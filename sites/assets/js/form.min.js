(function () {
	'use strict';

	frappe.templates['print_layout'] = '<div class="form-print-wrapper">  <div class="print-toolbar row">   <div class="col-xs-2">    <select class="print-preview-select input-sm form-control"></select></div>   <div class="col-xs-2">    <select class="languages input-sm form-control"     placeholder="{{ __("Language") }}"></select></div>   <div class="col-xs-2">    <div class="checkbox small" style="margin-top: 7px; margin-bottom: 0px;">     <label>      <input type="checkbox" class="print-letterhead text-muted" style="margin-top: 1px;"/>      {%= __("Letter Head") %}</label>    </div>   </div>   <div class="col-xs-6 text-right">        <div class="btn-group">     <a class="btn-print-print btn-sm btn btn-default">      <strong>{%= __("Print") %}</strong></a>     <a class="btn-sm btn btn-default" href="#Form/Print Settings">      {%= __("Settings...") %}</a>     <a class="btn-printer-setting btn-sm btn btn-default" style="display: none;">       {%= __("Printer Settings...") %}</a>     <a class="btn-print-edit btn-sm btn btn-default">      {%= __("Customize...") %}</a>     <a class="btn-print-preview btn-sm btn btn-default">      {%= __("Full Page") %}</a>     <a class="btn-download-pdf btn-sm btn btn-default">      {%= __("PDF") %}</a>    </div>   </div>  </div>  <div class="print-preview-wrapper">   <div class="print-preview">    <div class="print-format"></div>   </div>   <div class="page-break-message text-muted text-center text-medium margin-top"></div>  </div> </div> ';

	frappe.templates['users_in_sidebar'] = '{% for (var i=0, l=users.length; i < l; i++) {  var u = users[i]; %}  <span class="avatar avatar-small {{ u.avatar_class || "" }}" title="{{ u.title }}">  {% if (u.icon) { %}   <i class="{{ u.icon }}"></i>  {% } else if(u.image) { %}   <img class="media-object" src="{{ u.image }}" alt="{{ u.fullname }}">  {% } else { %}   <div class="standard-image" style="background-color: {{ u.color }};">{{ u.abbr.substr(0,1) }}</div>  {% } %}  </span> {% } %} ';

	frappe.templates['set_sharing'] = '<div class="padding">      <div class="row">         <div class="col-xs-6"><h6>{%= __("User") %}</h6></div>         <div class="col-xs-2"><h6>{%= __("Can Read") %}</h6></div>         <div class="col-xs-2"><h6>{%= __("Can Write") %}</h6></div>         <div class="col-xs-2"><h6>{%= __("Can Share") %}</h6></div>     </div>   <div class="row shared-user" data-everyone=1>         <div class="col-xs-6 share-all" style="height: 30px;"><b>{{ __("Everyone") }}</b></div>         <div class="col-xs-2"><input type="checkbox" name="read"             {% if(cint(everyone.read)) { %}checked{% } %} class="edit-share"></div>         <div class="col-xs-2"><input type="checkbox" name="write"             {% if(cint(everyone.write)) { %}checked{% } %} class="edit-share"{% if (!frm.perm[0].write){ %} disabled="disabled"{% } %}></div>         <div class="col-xs-2"><input type="checkbox" name="share"             {% if(cint(everyone.share)) { %}checked{% } %} class="edit-share"></div>  </div>      {% for (var i=0, l=shared.length; i < l; i++) {         var s = shared[i]; %}      {% if(s && !s.everyone) { %}      <div class="row shared-user" data-user="{%= s.user %}" data-name="{%= s.name %}">          <div class="col-xs-6">{%= s.user %}</div>          <div class="col-xs-2"><input type="checkbox" name="read"              {% if(cint(s.read)) { %}checked{% } %} class="edit-share"></div>          <div class="col-xs-2"><input type="checkbox" name="write"              {% if(cint(s.write)) { %}checked{% } %} class="edit-share"{% if (!frm.perm[0].write){ %} disabled="disabled"{% } %}></div>          <div class="col-xs-2"><input type="checkbox" name="share"              {% if(cint(s.share)) { %}checked{% } %} class="edit-share"></div>      </div>      {% } %}     {% } %}      {% if(frappe.model.can_share(null, frm)) { %}     <hr>      <div class="row">         <div class="col-xs-6"><h6>{%= __("Share this document with") %}</h6></div>         <div class="col-xs-2"><h6>{%= __("Can Read") %}</h6></div>         <div class="col-xs-2"><h6>{%= __("Can Write") %}</h6></div>         <div class="col-xs-2"><h6>{%= __("Can Share") %}</h6></div>     </div>      <div class="row">         <div class="col-xs-6 input-wrapper-add-share"></div>         <div class="col-xs-2"><input type="checkbox" class="add-share-read" name="read"></div>         <div class="col-xs-2"><input type="checkbox" class="add-share-write" name="write" {% if (!frm.perm[0].write){ %} disabled="disabled"{% } %}></div>         <div class="col-xs-2"><input type="checkbox" class="add-share-share" name="share"></div>     </div>     <p>         <button class="btn btn-primary btn-add-share">{{ __("Add") }}</button>     </p>  {% endif %} </div>';

	frappe.templates['form_sidebar'] = '<ul class="list-unstyled sidebar-menu visible-sm visible-xs">  <li>   <a class="navbar-home" href="#">    <img class="app-logo" src="{{ frappe.app.logo_url }}">   </a>  </li> </ul> <ul class="list-unstyled sidebar-menu user-actions hidden"></ul> <ul class="list-unstyled sidebar-menu sidebar-image-section hidden-xs hidden-sm hide">  <li class="sidebar-image-wrapper">   <div class="sidebar-image"></div>   <div class="sidebar-standard-image">    <div class="standard-image"></div>   </div>   <div class="sidebar-image-actions">    <div class="dropdown">     <a href="#" class="dropdown-toggle" data-toggle="dropdown">{{ __("Change") }}</a>     <ul class="dropdown-menu" role="menu">      <li><a class="sidebar-image-change">{{ __("Upload") }}</a></li>      <li><a class="sidebar-image-remove">{{ __("Remove") }}</a></li>     </ul>    </div>   </div>  </li> </ul> {% if frm.meta.beta %} <div class="sidebar-menu">  <p><label class="label label-warning" title="{{ __("This feature is brand new and still experimental") }}">{{ __("Under Development") }}</label></p>  <p><a class="small" href="https://github.com/frappe/{{ frappe.boot.module_app[frappe.scrub(frm.meta.module)] }}/issues/new"    target="_blank">   {{ __("Click here to post bugs and suggestions") }}</a></p>  </div> {% endif %} <ul class="list-unstyled sidebar-menu sidebar-rating hide">  <li style="position: relative;">   <a class="strong badge-hover">    <span>{%= __("Feedback") %}</span>   </a>  </li>  <li class="rating-icons"></li> </ul> <ul class="list-unstyled sidebar-menu">  <li class="divider visible-sm visible-xs"></li>  <li style="position: relative;">   <a class="sidebar-comments badge-hover">    <span>{%= __("Comments") %}</span>    <span class="badge n-comments">0</span>   </a>  </li>     {% if(frappe.help.has_help(doctype)) { %}     <li><a class="help-link list-link" data-doctype="{{ doctype }}">{{ __("Help") }}</a></li>     {% } %} </ul> <ul class="list-unstyled sidebar-menu form-assignments">  <li class="h6 assigned-to-label">{%= __("Assigned To") %}</li>  <li><a class="add-assignment text-muted">{%= __("Assign") %}   <i class="octicon octicon-plus" style="margin-left: 2px;"></i></a></li> </ul> <ul class="list-unstyled sidebar-menu form-attachments">  <li class="h6 attachments-label">{%= __("Attachments") %}</li>  <li><a class="add-attachment text-muted">{%= __("Attach File") %}   <i class="octicon octicon-plus" style="margin-left: 2px;"></i></li></a> </ul> <ul class="list-unstyled sidebar-menu">  <li class="h6 tags-label">{%= __("Tags") %}</li>  <li class="form-tags">   <div class="tag-area"></div>   <div class="clearfix"></div>  </li> </ul> <ul class="list-unstyled sidebar-menu form-reviews">  <li class="h6 attachments-label">{%= __("Reviews") %}</li>  <li class="review-list"></li> </ul> <ul class="list-unstyled sidebar-menu">  <li class="h6 shared-with-label">{%= __("Shared With") %}</li>  <li class="form-shared"></li> </ul> <ul class="list-unstyled sidebar-menu">  <li class="h6 viewers-label">{%= __("Currently Viewing") %}</li>  <li class="form-viewers"></li> </ul> <ul class="list-unstyled sidebar-menu">  <a><li class="auto-repeat-status"><li></a> </ul> <ul class="list-unstyled sidebar-menu">  <li class="liked-by-parent">   <span class="liked-by">    <i class="octicon octicon-heart like-action text-extra-muted fa-fw"></i>    <span class="likes-count"></span>   </span>  </li> </ul> <ul class="list-unstyled sidebar-menu followed-by-section">  <li class="h6 followed-by-label text-medium hidden">{%= __("Followed by") %}</li>  <li class="followed-by"></li>  <li class="document-follow">   <a class="badge-hover follow-document-link hidden">    {%= __("Follow") %}   </a>   <a class="badge-hover unfollow-document-link hidden">    {%= __("Unfollow") %}   </a>  </li> </ul> <ul class="list-unstyled sidebar-menu text-muted">  <li class="modified-by"></li>  <li class="created-by"></li> </ul> {% if(frappe.get_form_sidebar_extension) { %}     {{ frappe.get_form_sidebar_extension() }} {% } %} <ul class="list-unstyled visible-xs visible-sm">   <li class="close-sidebar">Close</li> </ul> ';

	frappe.templates['form_dashboard'] = '<div class="form-dashboard-wrapper">  <div class="progress-area hidden form-dashboard-section">  </div>  <div class="form-heatmap hidden form-dashboard-section">   <div id="heatmap-{{ frappe.model.scrub(frm.doctype) }}" class="heatmap"></div>   <div class="text-muted small heatmap-message hidden"></div>  </div>  <div class="form-graph form-dashboard-section hidden"></div>  <div class="form-stats form-dashboard-section hidden">   <div class="row"></div>  </div>  <div class="form-links form-dashboard-section hidden">   <div class="transactions"></div>  </div> </div>';

	frappe.templates['form_links'] = '<div class="form-documents">  {% for (var i=0; i < transactions.length; i++) { %}   {% if((i % 2)===0) { %}<div class="row">{% } %}   <div class="col-xs-6">    <h6>{{ transactions[i].label }}</h6>    {% for (var j=0; j < transactions[i].items.length; j++) {     var doctype = transactions[i].items[j]; %}    <div class="document-link"     data-doctype="{{ doctype }}">     <a class="badge-link small">{{ __(doctype) }}</a>     <span class="text-muted small count"></span>     <span class="open-notification hidden"      title="{{ __("Open {0}", [__(doctype)])}}"></span>     {% if !internal_links[doctype] %}      <button class="btn btn-new btn-default btn-xs hidden"       data-doctype="{{ doctype }}">        <i class="octicon octicon-plus" style="font-size: 12px;"></i></button>     {% endif %}    </div>    {% } %}   </div>   {% if((i % 2)===1) { %}</div>{% } %}  {% } %}    {% if((i % 2)===0) { %}</div>{% } %} </div> ';

	frappe.templates['report_links'] = '<div class="form-documents">  {% for (var i=0; i < reports.length; i++) { %}   {% if((i % 2)===0) { %}<div class="row">{% } %}   <div class="col-xs-6">    <h6>{{ reports[i].label }}</h6>    {% for (var j=0; j < reports[i].items.length; j++) {     var report = reports[i].items[j]; %}    <div class="document-link"     data-report="{{ report }}">     <a class="report-link small">{{ __(report) }}</a>    </div>    {% } %}   </div>   {% if((i % 2)===1) { %}</div>{% } %}  {% } %}    {% if((i % 2)===0) { %}</div>{% } %} </div> ';

	frappe.templates['attachment'] = '<li class="attachment-row flex align-center">  <a class="close">&times;</a>  <a href="{{ file_path }}">   <i class="{{ icon }} fa-fw text-warning"></i>  </a>  <a href="{{ file_url }}" target="_blank" title="{{ file_name }}" class="ellipsis" style="max-width: calc(100% - 43px);">   <span>{{ file_name }}</span>  </a> </li>  ';

	frappe.templates['form_footer'] = '<div class="form-footer">  <div class="after-save">   <div class="form-comments"></div>  </div>  <div class="pull-right scroll-to-top">   <a onclick="frappe.utils.scroll_to(0)"><i class="fa fa-chevron-up text-muted"></i></a>  </div> </div> ';

	frappe.templates['timeline'] = '<div class="timeline">  <div class="timeline-head">  </div>  <div class="timeline-new-email">   {% if (doctype === "Communication") { %}    <button class="btn btn-default btn-reply-email btn-xs">     {%= __("Reply") %}    </button>   {% } else { %}    <button class="btn btn-default btn-new-email btn-xs">    {%= __("New Email") %}    </button>    {% if (allow_events_in_timeline===1) { %}    <button class="btn btn-default btn-new-interaction btn-xs">     {%= __("New Event") %}    </button>    {% } %}   {% } %}  </div>  <div class="timeline-email-import text-muted small">   </div>  <div class="timeline-items">   </div> </div> ';

	frappe.templates['timeline_item'] = '<div class="media timeline-item {% if (data.user_content) { %} user-content {% } else { %} notification-content {% } %} {{ data.color || "" }}"  data-doctype="{{ data.doctype }}" data-name="{{ data.name }}" data-communication-type = "{{ data.communication_type }}">  {% if (data.user_content) { %}  <span class="pull-left avatar avatar-medium hidden-xs" style="margin-top: 1px">   {% if(data.user_info.image) { %}   <div class="avatar-frame" style="background-image: url(\'{%= data.user_info.image %}\')"></div>   {% } else { %}   <div class="standard-image" style="background-color: {{ data.user_info.color }}">    {{ data.user_info.abbr }}</div>   {% } %}  </span>  {% } %}   <div class="pull-left media-body">   <div class="media-content-wrapper">    <div class="action-btns">     {% if(data.delete) { %}     <div class="pull-right hidden-xs close-btn-container">      <span class="small text-muted">       {%= data.delete %}      </span>     </div>     {% } %}     {% if(data.edit) { %}     <div class="pull-right edit-btn-container">      <span class="small text-muted">       {%= data.edit %}      </span>     </div>     {% } %}    </div>    {% if(data.communication_type==="Communication"     || data.communication_type==="Feedback"     || (data.communication_type==="Comment"      && data.comment_type==="Comment")) { %}    <div class="comment-header clearfix small {% if (data.edit || data.delete) { %} links-active {% } %}">     <span class="pull-left avatar avatar-small visible-xs">      {% if(data.user_info.image) { %}      <div class="avatar-frame" style="background-image: url(\'{%= data.user_info.image %}\')"></div>      {% } else { %}      <div class="standard-image" style="background-color: {{ data.user_info.color }}">       {{ data.user_info.abbr }}</div>      {% } %}     </span>     <div class="asset-details" data-communication-type = "{{ data.communication_type }}">      <span class="author-wrap">       <i class="{%= data.icon %} hidden-xs fa-fw"></i>       <span title="{%= data.comment_by %}">{%= data.fullname %}</span>      </span>      <span>       {% if (data.timeline_doctype===data.frm.doc.doctype        && data.timeline_name===data.frm.doc.name) { %}        &ndash;        <a href="#Form/{%= data.reference_doctype %}/{%= data.reference_name %}" class="text-muted">         <strong>{{ __(data.reference_doctype) }}</strong>          {{ data.reference_name }}        </a>       {% } %}      </span>       {% if(in_list(["Communication", "Feedback"], data.communication_type)) { %}        {% if (frappe.model.can_read(\'Communication\')) { %}        <a href="#Form/Communication/{%= data.name %}"         class="text-muted">        {% } %}         {% if (data.delivery_status) {         if (in_list(["Sent", "Clicked"], data.delivery_status)) {          var indicator_class = "green";         } else if (data.delivery_status === "Sending") {          var indicator_class = "orange";         } else if (in_list(["Opened", "Read"], data.delivery_status)) {          var indicator_class = "blue";         } else {          var indicator_class = "red";         }        %}        <span class="text-muted hidden-xs">&ndash;</span>        <span class="indicator-right {%= indicator_class %}         delivery-status-indicator"         title="{%= __(data.delivery_status) %}"><span class="hidden-xs">         {%= __(data.delivery_status) %}</span></span>         {% } else { %}         {% if (frappe.model.can_read(\'Communication\')) { %}         <span class="text-muted n-dash">&ndash;</span>         {%= __("Details") %}         {% } %}        {% } %}         {% if (frappe.model.can_read(\'Communication\')) { %}        </a>        {% } %}         {% if (data.communication_medium === "Email"         && data.sender !== frappe.session.user_email) { %}        <a class="text-muted reply-link pull-right timeline-content-show"         data-name="{%= data.name %}" title="{%= __("Reply") %}">{%= __("Reply") %}</a>        <a class="text-muted reply-link-all pull-right timeline-content-show"         data-name="{%= data.name %}" title="{%= __("Reply All") %}">{%= __("Reply All") %}</a>        {% } %}       {% } %}      <span class="text-muted commented-on hidden-xs {% if (data.futur_date) { %}timeline-futur{% } %}">       &ndash; {%= data.comment_on %}</span>      <span class="text-muted commented-on-small {% if (data.futur_date) { %}timeline-futur{% } %}">       &ndash; {%= data.comment_on_small %}</span>      <span class="comment-likes hidden-xs"       data-liked-by=\'{{ JSON.stringify(data._liked_by) }}\'>       <i class="octicon octicon-heart like-action        {% if (!data.liked_by_user) { %}         text-extra-muted not-liked        {% } %} fa-fw"        data-doctype="{%= data.doctype %}"        data-name="{%= data.name %}"></i>       <span class="likes-count text-muted">        {{ (data._liked_by || []).length }}</span>      </span>     </div>    </div>    <div class="reply timeline-content-show">     <div class="timeline-item-content">      {% if data.show_subject %}       <p class="text-muted small">        <b>{{ __("Title") }}:</b> {{ data.subject }}</p>       <hr>      {% endif %}       {% if data.communication_type == "Feedback" && data.rating_icons %}       <p class="text-muted small">{{ data.rating_icons }}</p>       <hr>      {% endif %}       {%= data.content_html %}     </div>     <div class="timeline-item-edit"></div>     {% if(data.attachments && data.attachments.length) { %}     <div style="margin: 10px 0px">      {% $.each(data.attachments, function(i, a) { %}      <div class="ellipsis">       <a href="{%= encodeURI(a.file_url).replace(/#/g, \'%23\') %}"        class="text-muted small" target="_blank" rel="noopener noreferrer">        <i class="fa fa-paperclip"></i>        {%= a.file_url.split("/").slice(-1)[0] %}        {% if (a.is_private) { %}        <i class="fa fa-lock text-warning"></i>        {% } %}       </a>      </div>      {% }); %}     </div>     {% } %}    </div>     {% } else if(in_list(["Assignment Completed", "Assigned", "Shared",     "Unshared", "Milestone"], data.comment_type)) { %}     <div class="small">      <i class="{%= data.icon %} fa-fw"></i>       {% if (data.timeline_doctype===data.frm.doc.doctype        && data.timeline_name===data.frm.doc.name) { %}        <a href="#Form/{%= data.reference_doctype %}/{%= data.reference_name %}">         <strong>{{ __(data.reference_doctype) }}</strong>          {{ data.reference_name }}        </a>        &ndash;       {% } %}       {% if(data.link_doctype && data.link_name) { %}       <a href="#Form/{%= data.link_doctype %}/{%= data.link_name %}">       {% } %}       {{ __(data.content) }}       {% if(data.link_doctype && data.link_name) { %}       </a>       {% } %}       <span class="text-muted commented-on" style="font-weight: normal;">       &ndash; {%= data.comment_on %}</span>     </div>    {% } else { %}     <div class="small">      <i class="{%= data.icon %} fa-fw"></i>      {% if (data.comment_type == "Like") { %}      <span title="{%= data.comment_by %}">       {% if (data.timeline_doctype===data.frm.doc.doctype        && data.timeline_name===data.frm.doc.name) { %}        <a href="#Form/{%= data.reference_doctype %}/{%= data.reference_name %}">         <strong>{{ __(data.reference_doctype) }}</strong>          {{ data.reference_name }}        </a> &ndash;       {% } %}       {%= __("Liked by {0}", [data.fullname]) %}      </span>      {% } else if (data.comment_type == "Energy Points") { %}       {{ data.content_html }}      {% } else { %}       <b title="{{ data.comment_by }}">{%= data.fullname %}</b>       {%= __(data.content) %}       {% if (data.timeline_doctype===data.frm.doc.doctype        && data.timeline_name===data.frm.doc.name) { %}         &ndash;         <a href="#Form/{%= data.reference_doctype %}/{%= data.reference_name %}">         <strong>{{ __(data.reference_doctype) }}</strong>          {{ data.reference_name }}        </a>       {% } %}      {% } %}      <span class="text-muted commented-on" style="font-weight: normal;">      &ndash; {%= data.comment_on %}</span>     </div>    {% } %}   </div>  </div> </div> ';

	frappe.ui.form.Control = Class.extend({
		init: function(opts) {
			$.extend(this, opts);
			this.make();

			// if developer_mode=1, show fieldname as tooltip
			if(frappe.boot.user && frappe.boot.developer_mode===1 && this.$wrapper) {
				this.$wrapper.attr("title", __(this.df.fieldname));
			}

			if(this.render_input) {
				this.refresh();
			}
		},
		make: function() {
			this.make_wrapper();
			this.$wrapper
				.attr("data-fieldtype", this.df.fieldtype)
				.attr("data-fieldname", this.df.fieldname);
			this.wrapper = this.$wrapper.get(0);
			this.wrapper.fieldobj = this; // reference for event handlers
		},

		make_wrapper: function() {
			this.$wrapper = $("<div class='frappe-control'></div>").appendTo(this.parent);

			// alias
			this.wrapper = this.$wrapper;
		},

		toggle: function(show) {
			this.df.hidden = show ? 0 : 1;
			this.refresh();
		},

		// returns "Read", "Write" or "None"
		// as strings based on permissions
		get_status: function(explain) {
			if (this.df.get_status) {
				return this.df.get_status(this);
			}

			if((!this.doctype && !this.docname) || this.df.parenttype === 'Web Form') {
				// like in case of a dialog box
				if (cint(this.df.hidden)) {
					// eslint-disable-next-line
					if(explain) { console.log("By Hidden: None"); }
					return "None";

				} else if (cint(this.df.hidden_due_to_dependency)) {
					// eslint-disable-next-line
					if(explain) { console.log("By Hidden Dependency: None"); }
					return "None";

				} else if (cint(this.df.read_only)) {
					// eslint-disable-next-line
					if(explain) { console.log("By Read Only: Read"); }
					return "Read";

				}

				return "Write";
			}

			var status = frappe.perm.get_field_display_status(this.df,
				frappe.model.get_doc(this.doctype, this.docname), this.perm || (this.frm && this.frm.perm), explain);

			// hide if no value
			if (this.doctype && status==="Read" && !this.only_input
				&& is_null(frappe.model.get_value(this.doctype, this.docname, this.df.fieldname))
				&& !in_list(["HTML", "Image", "Button"], this.df.fieldtype)) {

				// eslint-disable-next-line
				if(explain) { console.log("By Hide Read-only, null fields: None"); }
				status = "None";
			}

			return status;
		},
		refresh: function() {
			this.disp_status = this.get_status();
			this.$wrapper
				&& this.$wrapper.toggleClass("hide-control", this.disp_status=="None")
				&& this.refresh_input
				&& this.refresh_input();

			var value = this.get_value();

			this.show_translatable_button(value);
		},
		show_translatable_button: function show_translatable_button(value) {
			var this$1 = this;

			// Disable translation non-string fields or special string fields
			if (!frappe.model
				|| !this.frm
				|| !this.doc
				|| !this.df.translatable
				|| !frappe.model.can_write('Translation')
				|| !value) { return; }

			// Disable translation in website
			if (!frappe.views || !frappe.views.TranslationManager) { return; }

			// Already attached button
			if (this.$wrapper.find('.clearfix .btn-translation').length) { return; }

			var translation_btn =
				"<a class=\"btn-translation no-decoration text-muted\" title=\"" + (__('Open Translation')) + "\">\n\t\t\t\t<i class=\"fa fa-globe\"></i>\n\t\t\t</a>";

			$(translation_btn)
				.appendTo(this.$wrapper.find('.clearfix'))
				.on('click', function () {
					if (!this$1.doc.__islocal) {
						new frappe.views.TranslationManager({
							'df': this$1.df,
							'source_name': value,
							'target_language': this$1.doc.language,
							'doc': this$1.doc
						});
					}
				});

		},
		get_doc: function() {
			return this.doctype && this.docname
				&& locals[this.doctype] && locals[this.doctype][this.docname] || {};
		},
		get_model_value: function() {
			if(this.doc) {
				return this.doc[this.df.fieldname];
			}
		},
		set_value: function(value) {
			return this.validate_and_set_in_model(value);
		},
		parse_validate_and_set_in_model: function(value, e) {
			if(this.parse) {
				value = this.parse(value);
			}
			return this.validate_and_set_in_model(value, e);
		},
		validate_and_set_in_model: function(value, e) {
			var me = this;
			if(this.inside_change_event) {
				return Promise.resolve();
			}
			this.inside_change_event = true;
			var set = function(value) {
				me.inside_change_event = false;
				return frappe.run_serially([
					function () { return me.set_model_value(value); },
					function () {
						me.set_mandatory && me.set_mandatory(value);

						if(me.df.change || me.df.onchange) {
							// onchange event specified in df
							return (me.df.change || me.df.onchange).apply(me, [e]);
						}
					}
				]);
			};

			value = this.validate(value);
			if (value && value.then) {
				// got a promise
				return value.then(function (value) { return set(value); });
			} else {
				// all clear
				return set(value);
			}
		},
		get_value: function() {
			if(this.get_status()==='Write') {
				return this.get_input_value ?
					(this.parse ? this.parse(this.get_input_value()) : this.get_input_value()) :
					undefined;
			} else {
				return this.value || undefined;
			}
		},
		set_model_value: function(value) {
			if(this.frm) {
				this.last_value = value;
				return frappe.model.set_value(this.doctype, this.docname, this.df.fieldname,
					value, this.df.fieldtype);
			} else {
				if(this.doc) {
					this.doc[this.df.fieldname] = value;
				}
				this.set_input(value);
				return Promise.resolve();
			}
		},
		set_focus: function() {
			if(this.$input) {
				this.$input.get(0).focus();
				return true;
			}
		}
	});

	frappe.ui.form.ControlInput = frappe.ui.form.Control.extend({
		horizontal: true,
		make: function() {
			// parent element
			this._super();
			this.set_input_areas();

			// set description
			this.set_max_width();
		},
		make_wrapper: function() {
			if(this.only_input) {
				this.$wrapper = $('<div class="form-group frappe-control">').appendTo(this.parent);
			} else {
				this.$wrapper = $('<div class="frappe-control">\
				<div class="form-group">\
					<div class="clearfix">\
						<label class="control-label" style="padding-right: 0px;"></label>\
					</div>\
					<div class="control-input-wrapper">\
						<div class="control-input"></div>\
						<div class="control-value like-disabled-input" style="display: none;"></div>\
						<p class="help-box small text-muted hidden-xs"></p>\
					</div>\
				</div>\
			</div>').appendTo(this.parent);
			}
		},
		toggle_label: function(show) {
			this.$wrapper.find(".control-label").toggleClass("hide", !show);
		},
		toggle_description: function(show) {
			this.$wrapper.find(".help-box").toggleClass("hide", !show);
		},
		set_input_areas: function() {
			if(this.only_input) {
				this.input_area = this.wrapper;
			} else {
				this.label_area = this.label_span = this.$wrapper.find("label").get(0);
				this.input_area = this.$wrapper.find(".control-input").get(0);
				this.$input_wrapper = this.$wrapper.find(".control-input-wrapper");
				// keep a separate display area to rendered formatted values
				// like links, currencies, HTMLs etc.
				this.disp_area = this.$wrapper.find(".control-value").get(0);
			}
		},
		set_max_width: function() {
			if(this.horizontal) {
				this.$wrapper.addClass("input-max-width");
			}
		},

		// update input value, label, description
		// display (show/hide/read-only),
		// mandatory style on refresh
		refresh_input: function() {
			var me = this;
			var make_input = function() {
				if (!me.has_input) {
					me.make_input();
					if (me.df.on_make) {
						me.df.on_make(me);
					}
				}
			};

			var update_input = function() {
				if (me.doctype && me.docname) {
					me.set_input(me.value);
				} else {
					me.set_input(me.value || null);
				}
			};

			if (me.disp_status != "None") {
				// refresh value
				if (me.frm) {
					me.value = frappe.model.get_value(me.doctype, me.docname, me.df.fieldname);
				} else if (me.doc) {
					me.value = me.doc[me.df.fieldname];
				}

				if (me.can_write()) {
					me.disp_area && $(me.disp_area).toggle(false);
					$(me.input_area).toggle(true);
					me.$input && me.$input.prop("disabled", false);
					make_input();
					update_input();
				} else {
					if (me.only_input) {
						make_input();
						update_input();
					} else {
						$(me.input_area).toggle(false);
						if (me.disp_area) {
							me.set_disp_area(me.value);
							$(me.disp_area).toggle(true);
						}
					}
					me.$input && me.$input.prop("disabled", true);
				}

				me.set_description();
				me.set_label();
				me.set_mandatory(me.value);
				me.set_bold();
			}
		},

		can_write: function can_write() {
			return this.disp_status == "Write";
		},

		set_disp_area: function(value) {
			if(in_list(["Currency", "Int", "Float"], this.df.fieldtype)
				&& (this.value === 0 || value === 0)) {
				// to set the 0 value in readonly for currency, int, float field
				value = 0;
			} else {
				value = this.value || value;
			}
			if (this.df.fieldtype === 'Data') {
				value = frappe.utils.escape_html(value);
			}
			var doc = this.doc || (this.frm && this.frm.doc);
			var display_value = frappe.format(value, this.df, { no_icon: true, inline: true }, doc);
			this.disp_area && $(this.disp_area).html(display_value);
		},

		bind_change_event: function() {
			var me = this;
			this.$input && this.$input.on("change", this.change || function(e) {
				me.parse_validate_and_set_in_model(me.get_input_value(), e);
			});
		},
		bind_focusout: function() {
			// on touchscreen devices, scroll to top
			// so that static navbar and page head don't overlap the input
			if (frappe.dom.is_touchscreen()) {
				var me = this;
				this.$input && this.$input.on("focusout", function() {
					if (frappe.dom.is_touchscreen()) {
						frappe.utils.scroll_to(me.$wrapper);
					}
				});
			}
		},
		set_label: function(label) {
			if(label) { this.df.label = label; }

			if(this.only_input || this.df.label==this._label)
				{ return; }
			this.label_span.innerHTML = ("") +
				__(this.df.label)  || "&nbsp;";
			this._label = this.df.label;
		},
		set_description: function(description) {
			if (description !== undefined) {
				this.df.description = description;
			}
			if (this.only_input || this.df.description===this._description) {
				return;
			}
			if (this.df.description) {
				this.$wrapper.find(".help-box").html(__(this.df.description));
			} else {
				this.set_empty_description();
			}
			this._description = this.df.description;
		},
		set_new_description: function(description) {
			this.$wrapper.find(".help-box").html(description);
		},
		set_empty_description: function() {
			this.$wrapper.find(".help-box").html("");
		},
		set_mandatory: function(value) {
			this.$wrapper.toggleClass("has-error", (this.df.reqd && is_null(value)) ? true : false);
		},
		set_bold: function() {
			if(this.$input) {
				this.$input.toggleClass("bold", !!(this.df.bold || this.df.reqd));
			}
			if(this.disp_area) {
				$(this.disp_area).toggleClass("bold", !!(this.df.bold || this.df.reqd));
			}
		}
	});

	frappe.ui.form.ControlData = frappe.ui.form.ControlInput.extend({
		html_element: "input",
		input_type: "text",
		make_input: function() {
			if(this.$input) { return; }

			this.$input = $("<"+ this.html_element +">")
				.attr("type", this.input_type)
				.attr("autocomplete", "off")
				.addClass("input-with-feedback form-control")
				.prependTo(this.input_area);

			if (in_list(['Data', 'Link', 'Dynamic Link', 'Password', 'Select', 'Read Only', 'Attach', 'Attach Image'],
				this.df.fieldtype)) {
				this.$input.attr("maxlength", this.df.length || 140);
			}

			this.set_input_attributes();
			this.input = this.$input.get(0);
			this.has_input = true;
			this.bind_change_event();
			this.bind_focusout();
			this.setup_autoname_check();

			// somehow this event does not bubble up to document
			// after v7, if you can debug, remove this
		},
		setup_autoname_check: function() {
			var this$1 = this;

			if (!this.df.parent) { return; }
			this.meta = frappe.get_meta(this.df.parent);
			if (this.meta && ((this.meta.autoname
				&& this.meta.autoname.substr(0, 6)==='field:'
				&& this.meta.autoname.substr(6) === this.df.fieldname) || this.df.fieldname==='__newname') ) {
				this.$input.on('keyup', function () {
					this$1.set_description('');
					if (this$1.doc && this$1.doc.__islocal) {
						// check after 1 sec
						var timeout = setTimeout(function () {
							// clear any pending calls
							if (this$1.last_check) { clearTimeout(this$1.last_check); }

							// check if name exists
							frappe.db.get_value(this$1.doctype, this$1.$input.val(),
								'name', function (val) {
									if (val && val.name) {
										this$1.set_description(__('{0} already exists. Select another name', [val.name]));
									}
								},
								this$1.doc.parenttype
							);
							this$1.last_check = null;
						}, 1000);
						this$1.last_check = timeout;
					}
				});
			}
		},
		set_input_attributes: function() {
			this.$input
				.attr("data-fieldtype", this.df.fieldtype)
				.attr("data-fieldname", this.df.fieldname)
				.attr("placeholder", this.df.placeholder || "");
			if(this.doctype) {
				this.$input.attr("data-doctype", this.doctype);
			}
			if(this.df.input_css) {
				this.$input.css(this.df.input_css);
			}
			if(this.df.input_class) {
				this.$input.addClass(this.df.input_class);
			}
		},
		set_input: function(value) {
			this.last_value = this.value;
			this.value = value;
			this.set_formatted_input(value);
			this.set_disp_area(value);
			this.set_mandatory && this.set_mandatory(value);
		},
		set_formatted_input: function(value) {
			this.$input && this.$input.val(this.format_for_input(value));
		},
		get_input_value: function() {
			return this.$input ? this.$input.val() : undefined;
		},
		format_for_input: function(val) {
			return val==null ? "" : val;
		},
		validate: function(v) {
			if(this.df.is_filter) {
				return v;
			}
			if(this.df.options == 'Phone') {
				if(v+''=='') {
					return '';
				}
				var v1 = '';
				// phone may start with + and must only have numbers later, '-' and ' ' are stripped
				v = v.replace(/ /g, '').replace(/-/g, '').replace(/\(/g, '').replace(/\)/g, '');

				// allow initial +,0,00
				if(v && v.substr(0,1)=='+') {
					v1 = '+'; v = v.substr(1);
				}
				if(v && v.substr(0,2)=='00') {
					v1 += '00'; v = v.substr(2);
				}
				if(v && v.substr(0,1)=='0') {
					v1 += '0'; v = v.substr(1);
				}
				v1 += cint(v) + '';
				return v1;
			} else if(this.df.options == 'Email') {
				if(v+''=='') {
					return '';
				}

				var email_list = frappe.utils.split_emails(v);
				if (!email_list) {
					// invalid email
					return '';
				} else {
					var email_invalid = false;
					email_list.forEach(function(email) {
						if (!validate_email(email)) {
							email_invalid = true;
						}
					});
					this.df.invalid = email_invalid;
					return v;
				}

			} else {
				return v;
			}
		}
	});

	frappe.ui.form.ControlInt = frappe.ui.form.ControlData.extend({
		make: function() {
			this._super();
			// $(this.label_area).addClass('pull-right');
			// $(this.disp_area).addClass('text-right');
		},
		make_input: function() {
			var me = this;
			this._super();
			this.$input
				// .addClass("text-right")
				.on("focus", function() {
					setTimeout(function() {
						if(!document.activeElement) { return; }
						document.activeElement.value
							= me.validate(document.activeElement.value);
						document.activeElement.select();
					}, 100);
					return false;
				});
		},
		eval_expression: function(value) {
			if (typeof value === 'string') {
				if (value.match(/^[0-9+\-/* ]+$/)) {
					// If it is a string containing operators
					try {
						return eval(value);
					} catch (e) {
						// bad expression
						return value;
					}
				}
			}
			return value;
		},
		parse: function(value) {
			return cint(this.eval_expression(value), null);
		}
	});

	frappe.ui.form.ControlFloat = frappe.ui.form.ControlInt.extend({
		parse: function(value) {
			value = this.eval_expression(value);
			return isNaN(parseFloat(value)) ? null : flt(value, this.get_precision());
		},

		format_for_input: function(value) {
			var number_format;
			if (this.df.fieldtype==="Float" && this.df.options && this.df.options.trim()) {
				number_format = this.get_number_format();
			}
			var formatted_value = format_number(value, number_format, this.get_precision());
			return isNaN(parseFloat(value)) ? "" : formatted_value;
		},

		get_number_format: function() {
			var currency = frappe.meta.get_field_currency(this.df, this.get_doc());
			return get_number_format(currency);
		},

		get_precision: function() {
			// round based on field precision or float precision, else don't round
			return this.df.precision || cint(frappe.boot.sysdefaults.float_precision, null);
		}
	});

	frappe.ui.form.ControlPercent = frappe.ui.form.ControlFloat;

	frappe.ui.form.ControlCurrency = frappe.ui.form.ControlFloat.extend({
		format_for_input: function(value) {
			var formatted_value = format_number(value, this.get_number_format(), this.get_precision());
			return isNaN(parseFloat(value)) ? "" : formatted_value;
		},

		get_precision: function() {
			// always round based on field precision or currency's precision
			// this method is also called in this.parse()
			if (!this.df.precision) {
				if(frappe.boot.sysdefaults.currency_precision) {
					this.df.precision = frappe.boot.sysdefaults.currency_precision;
				} else {
					this.df.precision = get_number_format_info(this.get_number_format()).precision;
				}
			}

			return this.df.precision;
		}
	});

	frappe.ui.form.ControlDate = frappe.ui.form.ControlData.extend({
		make_input: function() {
			this._super();
			this.set_date_options();
			this.set_datepicker();
			this.set_t_for_today();
		},
		set_formatted_input: function(value) {
			this._super(value);
			if (!this.datepicker) { return; }
			if(!value) {
				this.datepicker.clear();
				return;
			}

			var should_refresh = this.last_value && this.last_value !== value;

			if (!should_refresh) {
				if(this.datepicker.selectedDates.length > 0) {
					// if date is selected but different from value, refresh
					var selected_date =
						moment(this.datepicker.selectedDates[0])
							.format(this.date_format);

					should_refresh = selected_date !== value;
				} else {
					// if datepicker has no selected date, refresh
					should_refresh = true;
				}
			}

			if(should_refresh) {
				this.datepicker.selectDate(frappe.datetime.str_to_obj(value));
			}
		},
		set_date_options: function() {
			var this$1 = this;

			// webformTODO:
			var sysdefaults = frappe.boot.sysdefaults;

			var lang = 'en';
			frappe.boot.user && (lang = frappe.boot.user.language);
			if(!$.fn.datepicker.language[lang]) {
				lang = 'en';
			}

			var date_format = sysdefaults && sysdefaults.date_format
				? sysdefaults.date_format : 'yyyy-mm-dd';

			var now_date = new Date();

			this.today_text = __("Today");
			this.date_format = frappe.defaultDateFormat;
			this.datepicker_options = {
				language: lang,
				autoClose: true,
				todayButton: true,
				dateFormat: date_format,
				startDate: now_date,
				keyboardNav: false,
				onSelect: function () {
					this$1.$input.trigger('change');
				},
				onShow: function () {
					this$1.datepicker.$datepicker
						.find('.datepicker--button:visible')
						.text(this$1.today_text);

					this$1.update_datepicker_position();
				}
			};
		},
		update_datepicker_position: function() {
			if(!this.frm) { return; }
			// show datepicker above or below the input
			// based on scroll position
			var window_height = $(window).height();
			var window_scroll_top = $(window).scrollTop();
			var el_offset_top = this.$input.offset().top + 280;
			var position = 'top left';
			if(window_height + window_scroll_top >= el_offset_top) {
				position = 'bottom left';
			}
			this.datepicker.update('position', position);
		},
		set_datepicker: function() {
			var this$1 = this;

			this.$input.datepicker(this.datepicker_options);
			this.datepicker = this.$input.data('datepicker');

			// today button didn't work as expected,
			// so explicitly bind the event
			this.datepicker.$datepicker
				.find('[data-action="today"]')
				.click(function () {
					this$1.datepicker.selectDate(this$1.get_now_date());
				});
		},
		get_now_date: function() {
			return frappe.datetime.now_date(true);
		},
		set_t_for_today: function() {
			var me = this;
			this.$input.on("keydown", function(e) {
				if(e.which===84) { // 84 === t
					if(me.df.fieldtype=='Date') {
						me.set_value(frappe.datetime.nowdate());
					} if(me.df.fieldtype=='Datetime') {
						me.set_value(frappe.datetime.now_datetime());
					} if(me.df.fieldtype=='Time') {
						me.set_value(frappe.datetime.now_time());
					}
					return false;
				}
			});
		},
		parse: function(value) {
			if(value) {
				return frappe.datetime.user_to_str(value);
			}
		},
		format_for_input: function(value) {
			if(value) {
				return frappe.datetime.str_to_user(value);
			}
			return "";
		},
		validate: function(value) {
			if(value && !frappe.datetime.validate(value)) {
				var sysdefaults = frappe.sys_defaults;
				var date_format = sysdefaults && sysdefaults.date_format
					? sysdefaults.date_format : 'yyyy-mm-dd';
				frappe.msgprint(__("Date {0} must be in format: {1}", [value, date_format]));
				return '';
			}
			return value;
		}
	});

	frappe.ui.form.ControlTime = frappe.ui.form.ControlData.extend({
		make_input: function() {
			var this$1 = this;

			var me = this;
			this._super();
			this.$input.datepicker({
				language: "en",
				timepicker: true,
				onlyTimepicker: true,
				timeFormat: "hh:ii:ss",
				startDate: frappe.datetime.now_time(true),
				onSelect: function() {
					// ignore micro seconds
					if (moment(me.get_value(), 'hh:mm:ss').format('HH:mm:ss') != moment(me.value, 'hh:mm:ss').format('HH:mm:ss')) {
						me.$input.trigger('change');
					}				
				},
				onShow: function() {
					$('.datepicker--button:visible').text(__('Now'));
				},
				keyboardNav: false,
				todayButton: true
			});
			this.datepicker = this.$input.data('datepicker');
			this.datepicker.$datepicker
				.find('[data-action="today"]')
				.click(function () {
					this$1.datepicker.selectDate(frappe.datetime.now_time(true));
				});
			this.refresh();
		},
		set_input: function(value) {
			this._super(value);
			if(value
				&& ((this.last_value && this.last_value !== this.value)
					|| (!this.datepicker.selectedDates.length))) {

				var date_obj = frappe.datetime.moment_to_date_obj(moment(value, 'HH:mm:ss'));
				this.datepicker.selectDate(date_obj);
			}
		},
		set_description: function() {
			var ref = this.df;
			var description = ref.description;
			var ref$1 = frappe.sys_defaults;
			var time_zone = ref$1.time_zone;
			if (!frappe.datetime.is_timezone_same()) {
				if (!description) {
					this.df.description = time_zone;
				} else if (!description.includes(time_zone)) {
					this.df.description += '<br>' + time_zone;
				}
			}
			this._super();
		}
	});

	frappe.ui.form.ControlDatetime = frappe.ui.form.ControlDate.extend({
		set_date_options: function() {
			this._super();
			this.today_text = __("Now");
			this.date_format = frappe.defaultDatetimeFormat;
			$.extend(this.datepicker_options, {
				timepicker: true,
				timeFormat: "hh:ii:ss"
			});
		},
		get_now_date: function() {
			return frappe.datetime.now_datetime(true);
		},
		set_description: function() {
			var ref = this.df;
			var description = ref.description;
			var ref$1 = frappe.sys_defaults;
			var time_zone = ref$1.time_zone;
			if (!frappe.datetime.is_timezone_same()) {
				if (!description) {
					this.df.description = time_zone;
				} else if (!description.includes(time_zone)) {
					this.df.description += '<br>' + time_zone;
				}
			}
			this._super();
		}
	});

	frappe.ui.form.ControlDateRange = frappe.ui.form.ControlData.extend({
		make_input: function() {
			this._super();
			this.set_date_options();
			this.set_datepicker();
			this.refresh();
		},
		set_date_options: function() {
			var me = this;
			this.datepicker_options = {
				language: "en",
				range: true,
				autoClose: true,
				toggleSelected: false
			};
			this.datepicker_options.dateFormat =
				(frappe.boot.sysdefaults.date_format || 'yyyy-mm-dd');
			this.datepicker_options.onSelect = function() {
				me.$input.trigger('change');
			};
		},
		set_datepicker: function() {
			this.$input.datepicker(this.datepicker_options);
			this.datepicker = this.$input.data('datepicker');
		},
		set_input: function(value, value2) {
			this.last_value = this.value;
			if (value && value2) {
				this.value = [value, value2];
			} else {
				this.value = value;
			}
			if (this.value) {
				var formatted = this.format_for_input(this.value[0], this.value[1]);
				this.$input && this.$input.val(formatted);
			} else {
				this.$input && this.$input.val("");
			}
			this.set_disp_area(value || '');
			this.set_mandatory && this.set_mandatory(value);
		},
		parse: function(value) {
			// replace the separator (which can be in user language) with comma
			var to = __('{0} to {1}').replace('{0}', '').replace('{1}', '');
			value = value.replace(to, ',');

			if(value && value.includes(',')) {
				var vals = value.split(',');
				var from_date = moment(frappe.datetime.user_to_obj(vals[0])).format('YYYY-MM-DD');
				var to_date = moment(frappe.datetime.user_to_obj(vals[vals.length-1])).format('YYYY-MM-DD');
				return [from_date, to_date];
			}
		},
		format_for_input: function(value1, value2) {
			if(value1 && value2) {
				value1 = frappe.datetime.str_to_user(value1);
				value2 = frappe.datetime.str_to_user(value2);
				return __("{0} to {1}", [value1, value2]);
			}
			return "";
		}
	});

	frappe.ui.form.ControlSelect = frappe.ui.form.ControlData.extend({
		html_element: 'select',
		make_input: function() {
			this._super();
			this.$wrapper.find('.control-input')
				.addClass('flex align-center')
				.append('<i class="octicon octicon-chevron-down text-muted"></i>');
			this.set_options();
		},
		set_formatted_input: function(value) {
			// refresh options first - (new ones??)
			if(value==null) { value = ''; }
			this.set_options(value);

			// set in the input element
			this._super(value);

			// check if the value to be set is selected
			var input_value = '';
			if(this.$input) {
				input_value = this.$input.val();
			}

			if(value && input_value && value !== input_value) {
				// trying to set a non-existant value
				// model value must be same as whatever the input is
				this.set_model_value(input_value);
			}
		},
		set_options: function(value) {
			// reset options, if something new is set
			var options = this.df.options || [];

			if(typeof this.df.options==="string") {
				options = this.df.options.split("\n");
			}

			// nothing changed
			if (JSON.stringify(options) === this.last_options) {
				return;
			}
			this.last_options = JSON.stringify(options);

			if(this.$input) {
				var selected = this.$input.find(":selected").val();
				this.$input.empty().add_options(options || []);

				if(value===undefined && selected) {
					this.$input.val(selected);
				}
			}
		},
		get_file_attachment_list: function() {
			if(!this.frm) { return; }
			var fl = frappe.model.docinfo[this.frm.doctype][this.frm.docname];
			if(fl && fl.attachments) {
				this.set_description("");
				var options = [""];
				$.each(fl.attachments, function(i, f) {
					options.push(f.file_url);
				});
				return options;
			} else {
				this.set_description(__("Please attach a file first."));
				return [""];
			}
		}
	});

	// add <option> list to <select>
	(function($) {
		$.fn.add_options = function(options_list) {
			// create options
			for(var i=0, j=options_list.length; i<j; i++) {
				var v = options_list[i];
				var value = null;
				var label = null;
				if (!is_null(v)) {
					var is_value_null = is_null(v.value);
					var is_label_null = is_null(v.label);
					var is_disabled = Boolean(v.disabled);

					if (is_value_null && is_label_null) {
						value = v;
						label = __(v);
					} else {
						value = is_value_null ? "" : v.value;
						label = is_label_null ? __(value) : __(v.label);
					}
				}
				$('<option>').html(cstr(label))
					.attr('value', value)
					.prop('disabled', is_disabled)
					.appendTo(this);
			}
			// select the first option
			this.selectedIndex = 0;
			return $(this);
		};
		$.fn.set_working = function() {
			this.prop('disabled', true);
		};
		$.fn.done_working = function() {
			this.prop('disabled', false);
		};
	})(jQuery);

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var awesomplete = createCommonjsModule(function (module) {
	/**
	 * Simple, lightweight, usable local autocomplete library for modern browsers
	 * Because there weren’t enough autocomplete scripts in the world? Because I’m completely insane and have NIH syndrome? Probably both. :P
	 * @author Lea Verou http://leaverou.github.io/awesomplete
	 * MIT license
	 */

	(function () {

	var _ = function (input, o) {
		var me = this;

	    // Keep track of number of instances for unique IDs
	    _.count = (_.count || 0) + 1;
	    this.count = _.count;

		// Setup

		this.isOpened = false;

		this.input = $(input);
		this.input.setAttribute("autocomplete", "off");
		this.input.setAttribute("aria-owns", "awesomplete_list_" + this.count);
		this.input.setAttribute("role", "combobox");

		// store constructor options in case we need to distinguish
		// between default and customized behavior later on
		this.options = o = o || {};

		configure(this, {
			minChars: 2,
			maxItems: 10,
			autoFirst: false,
			data: _.DATA,
			filter: _.FILTER_CONTAINS,
			sort: o.sort === false ? false : _.SORT_BYLENGTH,
			container: _.CONTAINER,
			item: _.ITEM,
			replace: _.REPLACE,
			tabSelect: false
		}, o);

		this.index = -1;

		// Create necessary elements

		this.container = this.container(input);

		this.ul = $.create("ul", {
			hidden: "hidden",
	        role: "listbox",
	        id: "awesomplete_list_" + this.count,
			inside: this.container
		});

		this.status = $.create("span", {
			className: "visually-hidden",
			role: "status",
			"aria-live": "assertive",
	        "aria-atomic": true,
	        inside: this.container,
	        textContent: this.minChars != 0 ? ("Type " + this.minChars + " or more characters for results.") : "Begin typing for results."
		});

		// Bind events

		this._events = {
			input: {
				"input": this.evaluate.bind(this),
				"blur": this.close.bind(this, { reason: "blur" }),
				"keydown": function(evt) {
					var c = evt.keyCode;

					// If the dropdown `ul` is in view, then act on keydown for the following keys:
					// Enter / Esc / Up / Down
					if(me.opened) {
						if (c === 13 && me.selected) { // Enter
							evt.preventDefault();
							me.select();
						}
						else if (c === 9 && me.selected && me.tabSelect) {
							me.select();
						}
						else if (c === 27) { // Esc
							me.close({ reason: "esc" });
						}
						else if (c === 38 || c === 40) { // Down/Up arrow
							evt.preventDefault();
							me[c === 38? "previous" : "next"]();
						}
					}
				}
			},
			form: {
				"submit": this.close.bind(this, { reason: "submit" })
			},
			ul: {
				// Prevent the default mousedowm, which ensures the input is not blurred.
				// The actual selection will happen on click. This also ensures dragging the
				// cursor away from the list item will cancel the selection
				"mousedown": function(evt) {
					evt.preventDefault();
				},
				// The click event is fired even if the corresponding mousedown event has called preventDefault
				"click": function(evt) {
					var li = evt.target;

					if (li !== this) {

						while (li && !/li/i.test(li.nodeName)) {
							li = li.parentNode;
						}

						if (li && evt.button === 0) {  // Only select on left click
							evt.preventDefault();
							me.select(li, evt.target);
						}
					}
				}
			}
		};

		$.bind(this.input, this._events.input);
		$.bind(this.input.form, this._events.form);
		$.bind(this.ul, this._events.ul);

		if (this.input.hasAttribute("list")) {
			this.list = "#" + this.input.getAttribute("list");
			this.input.removeAttribute("list");
		}
		else {
			this.list = this.input.getAttribute("data-list") || o.list || [];
		}

		_.all.push(this);
	};

	_.prototype = {
		set list(list) {
			if (Array.isArray(list)) {
				this._list = list;
			}
			else if (typeof list === "string" && list.indexOf(",") > -1) {
					this._list = list.split(/\s*,\s*/);
			}
			else { // Element or CSS selector
				list = $(list);

				if (list && list.children) {
					var items = [];
					slice.apply(list.children).forEach(function (el) {
						if (!el.disabled) {
							var text = el.textContent.trim();
							var value = el.value || text;
							var label = el.label || text;
							if (value !== "") {
								items.push({ label: label, value: value });
							}
						}
					});
					this._list = items;
				}
			}

			if (document.activeElement === this.input) {
				this.evaluate();
			}
		},

		get selected() {
			return this.index > -1;
		},

		get opened() {
			return this.isOpened;
		},

		close: function (o) {
			if (!this.opened) {
				return;
			}

			this.ul.setAttribute("hidden", "");
			this.isOpened = false;
			this.index = -1;

			this.status.setAttribute("hidden", "");

			$.fire(this.input, "awesomplete-close", o || {});
		},

		open: function () {
			this.ul.removeAttribute("hidden");
			this.isOpened = true;

			this.status.removeAttribute("hidden");

			if (this.autoFirst && this.index === -1) {
				this.goto(0);
			}

			$.fire(this.input, "awesomplete-open");
		},

		destroy: function() {
			//remove events from the input and its form
			$.unbind(this.input, this._events.input);
			$.unbind(this.input.form, this._events.form);

			// cleanup container if it was created by Awesomplete but leave it alone otherwise
			if (!this.options.container) {
				//move the input out of the awesomplete container and remove the container and its children
				var parentNode = this.container.parentNode;

				parentNode.insertBefore(this.input, this.container);
				parentNode.removeChild(this.container);
			}

			//remove autocomplete and aria-autocomplete attributes
			this.input.removeAttribute("autocomplete");
			this.input.removeAttribute("aria-autocomplete");

			//remove this awesomeplete instance from the global array of instances
			var indexOfAwesomplete = _.all.indexOf(this);

			if (indexOfAwesomplete !== -1) {
				_.all.splice(indexOfAwesomplete, 1);
			}
		},

		next: function () {
			var count = this.ul.children.length;
			this.goto(this.index < count - 1 ? this.index + 1 : (count ? 0 : -1) );
		},

		previous: function () {
			var count = this.ul.children.length;
			var pos = this.index - 1;

			this.goto(this.selected && pos !== -1 ? pos : count - 1);
		},

		// Should not be used, highlights specific item without any checks!
		goto: function (i) {
			var lis = this.ul.children;

			if (this.selected) {
				lis[this.index].setAttribute("aria-selected", "false");
			}

			this.index = i;

			if (i > -1 && lis.length > 0) {
				lis[i].setAttribute("aria-selected", "true");

				this.status.textContent = lis[i].textContent + ", list item " + (i + 1) + " of " + lis.length;

	            this.input.setAttribute("aria-activedescendant", this.ul.id + "_item_" + this.index);

				// scroll to highlighted element in case parent's height is fixed
				this.ul.scrollTop = lis[i].offsetTop - this.ul.clientHeight + lis[i].clientHeight;

				$.fire(this.input, "awesomplete-highlight", {
					text: this.suggestions[this.index]
				});
			}
		},

		select: function (selected, origin) {
			if (selected) {
				this.index = $.siblingIndex(selected);
			} else {
				selected = this.ul.children[this.index];
			}

			if (selected) {
				var suggestion = this.suggestions[this.index];

				var allowed = $.fire(this.input, "awesomplete-select", {
					text: suggestion,
					origin: origin || selected
				});

				if (allowed) {
					this.replace(suggestion);
					this.close({ reason: "select" });
					$.fire(this.input, "awesomplete-selectcomplete", {
						text: suggestion
					});
				}
			}
		},

		evaluate: function() {
			var me = this;
			var value = this.input.value;

			if (value.length >= this.minChars && this._list && this._list.length > 0) {
				this.index = -1;
				// Populate list with options that match
				this.ul.innerHTML = "";

				this.suggestions = this._list
					.map(function(item) {
						return new Suggestion(me.data(item, value));
					})
					.filter(function(item) {
						return me.filter(item, value);
					});

				if (this.sort !== false) {
					this.suggestions = this.suggestions.sort(this.sort);
				}

				this.suggestions = this.suggestions.slice(0, this.maxItems);

				this.suggestions.forEach(function(text, index) {
						me.ul.appendChild(me.item(text, value, index));
					});

				if (this.ul.children.length === 0) {

	                this.status.textContent = "No results found";

					this.close({ reason: "nomatches" });

				} else {
					this.open();

	                this.status.textContent = this.ul.children.length + " results found";
				}
			}
			else {
				this.close({ reason: "nomatches" });

	                this.status.textContent = "No results found";
			}
		}
	};

	// Static methods/properties

	_.all = [];

	_.FILTER_CONTAINS = function (text, input) {
		return RegExp($.regExpEscape(input.trim()), "i").test(text);
	};

	_.FILTER_STARTSWITH = function (text, input) {
		return RegExp("^" + $.regExpEscape(input.trim()), "i").test(text);
	};

	_.SORT_BYLENGTH = function (a, b) {
		if (a.length !== b.length) {
			return a.length - b.length;
		}

		return a < b? -1 : 1;
	};

	_.CONTAINER = function (input) {
		return $.create("div", {
			className: "awesomplete",
			around: input
		});
	};

	_.ITEM = function (text, input, item_id) {
		var html = input.trim() === "" ? text : text.replace(RegExp($.regExpEscape(input.trim()), "gi"), "<mark>$&</mark>");
		return $.create("li", {
			innerHTML: html,
			"aria-selected": "false",
	        "id": "awesomplete_list_" + this.count + "_item_" + item_id
		});
	};

	_.REPLACE = function (text) {
		this.input.value = text.value;
	};

	_.DATA = function (item/*, input*/) { return item; };

	// Private functions

	function Suggestion(data) {
		var o = Array.isArray(data)
		  ? { label: data[0], value: data[1] }
		  : typeof data === "object" && "label" in data && "value" in data ? data : { label: data, value: data };

		this.label = o.label || o.value;
		this.value = o.value;
	}
	Object.defineProperty(Suggestion.prototype = Object.create(String.prototype), "length", {
		get: function() { return this.label.length; }
	});
	Suggestion.prototype.toString = Suggestion.prototype.valueOf = function () {
		return "" + this.label;
	};

	function configure(instance, properties, o) {
		for (var i in properties) {
			var initial = properties[i],
			    attrValue = instance.input.getAttribute("data-" + i.toLowerCase());

			if (typeof initial === "number") {
				instance[i] = parseInt(attrValue);
			}
			else if (initial === false) { // Boolean options must be false by default anyway
				instance[i] = attrValue !== null;
			}
			else if (initial instanceof Function) {
				instance[i] = null;
			}
			else {
				instance[i] = attrValue;
			}

			if (!instance[i] && instance[i] !== 0) {
				instance[i] = (i in o)? o[i] : initial;
			}
		}
	}

	// Helpers

	var slice = Array.prototype.slice;

	function $(expr, con) {
		return typeof expr === "string"? (con || document).querySelector(expr) : expr || null;
	}

	function $$(expr, con) {
		return slice.call((con || document).querySelectorAll(expr));
	}

	$.create = function(tag, o) {
		var element = document.createElement(tag);

		for (var i in o) {
			var val = o[i];

			if (i === "inside") {
				$(val).appendChild(element);
			}
			else if (i === "around") {
				var ref = $(val);
				ref.parentNode.insertBefore(element, ref);
				element.appendChild(ref);

				if (ref.getAttribute("autofocus") != null) {
					ref.focus();
				}
			}
			else if (i in element) {
				element[i] = val;
			}
			else {
				element.setAttribute(i, val);
			}
		}

		return element;
	};

	$.bind = function(element, o) {
		if (element) {
			for (var event in o) {
				var callback = o[event];

				event.split(/\s+/).forEach(function (event) {
					element.addEventListener(event, callback);
				});
			}
		}
	};

	$.unbind = function(element, o) {
		if (element) {
			for (var event in o) {
				var callback = o[event];

				event.split(/\s+/).forEach(function(event) {
					element.removeEventListener(event, callback);
				});
			}
		}
	};

	$.fire = function(target, type, properties) {
		var evt = document.createEvent("HTMLEvents");

		evt.initEvent(type, true, true );

		for (var j in properties) {
			evt[j] = properties[j];
		}

		return target.dispatchEvent(evt);
	};

	$.regExpEscape = function (s) {
		return s.replace(/[-\\^$*+?.()|[\]{}]/g, "\\$&");
	};

	$.siblingIndex = function (el) {
		/* eslint-disable no-cond-assign */
		for (var i = 0; el = el.previousElementSibling; i++){ }
		return i;
	};

	// Initialization

	function init() {
		$$("input.awesomplete").forEach(function (input) {
			new _(input);
		});
	}

	// Make sure to export Awesomplete on self when in a browser
	if (typeof self !== "undefined") {
		self.Awesomplete = _;
	}

	// Are we in a browser? Check for Document constructor
	if (typeof Document !== "undefined") {
		// DOM already loaded?
		if (document.readyState !== "loading") {
			init();
		}
		else {
			// Wait for it
			document.addEventListener("DOMContentLoaded", init);
		}
	}

	_.$ = $;
	_.$$ = $$;

	// Expose Awesomplete as a CJS module
	if (module.exports) {
		module.exports = _;
	}

	return _;

	}());
	});

	// special features for link

	frappe.ui.form.ControlLink = frappe.ui.form.ControlData.extend({
		make_input: function() {
			var me = this;
			// line-height: 1 is for Mozilla 51, shows extra padding otherwise
			$('<div class="link-field ui-front" style="position: relative; line-height: 1;">\
			<input type="text" class="input-with-feedback form-control">\
			<span class="link-btn">\
				<a class="btn-open no-decoration" title="' + __("Open Link") + '">\
					<i class="octicon octicon-arrow-right"></i></a>\
			</span>\
		</div>').prependTo(this.input_area);
			this.$input_area = $(this.input_area);
			this.$input = this.$input_area.find('input');
			this.$link = this.$input_area.find('.link-btn');
			this.$link_open = this.$link.find('.btn-open');
			this.set_input_attributes();
			this.$input.on("focus", function() {
				setTimeout(function() {
					if(me.$input.val() && me.get_options()) {
						var doctype = me.get_options();
						var name = me.$input.val();
						me.$link.toggle(true);
						me.$link_open.attr('href', frappe.utils.get_form_link(doctype, name));
					}

					if(!me.$input.val()) {
						me.$input.val("").trigger("input");
					}
				}, 500);
			});
			this.$input.on("blur", function() {
				// if this disappears immediately, the user's click
				// does not register, hence timeout
				setTimeout(function() {
					me.$link.toggle(false);
				}, 500);
			});
			this.$input.attr('data-target', this.df.options);
			this.input = this.$input.get(0);
			this.has_input = true;
			this.translate_values = true;
			this.setup_buttons();
			this.setup_awesomeplete();
		},
		get_options: function() {
			return this.df.options;
		},
		get_reference_doctype: function get_reference_doctype() {
			// this is used to get the context in which link field is loaded
			if (this.doctype) { return this.doctype; }
			else {
				return frappe.get_route && frappe.get_route()[0] === 'List' ? frappe.get_route()[1] : null;
			}
		},
		setup_buttons: function() {
			if(this.only_input && !this.with_link_btn) {
				this.$input_area.find(".link-btn").remove();
			}
		},
		open_advanced_search: function() {
			var doctype = this.get_options();
			if(!doctype) { return; }
			new frappe.ui.form.LinkSelector({
				doctype: doctype,
				target: this,
				txt: this.get_input_value()
			});
			return false;
		},
		new_doc: function() {
			var doctype = this.get_options();
			var me = this;

			if(!doctype) { return; }

			// set values to fill in the new document
			if(this.df.get_route_options_for_new_doc) {
				frappe.route_options = this.df.get_route_options_for_new_doc(this);
			} else {
				frappe.route_options = {};
			}

			// partially entered name field
			frappe.route_options.name_field = this.get_value();

			// reference to calling link
			frappe._from_link = this;
			frappe._from_link_scrollY = $(document).scrollTop();

			frappe.ui.form.make_quick_entry(doctype, function (doc) {
				return me.set_value(doc.name);
			});

			return false;
		},
		setup_awesomeplete: function() {
			var me = this;

			this.$input.cache = {};

			this.awesomplete = new awesomplete(me.input, {
				minChars: 0,
				maxItems: 99,
				autoFirst: true,
				list: [],
				data: function (item) {
					return {
						label: item.label || item.value,
						value: item.value
					};
				},
				filter: function() {
					return true;
				},
				item: function (item) {
					var d = this.get_item(item.value);
					if(!d.label) {	d.label = d.value; }

					var _label = (me.translate_values) ? __(d.label) : d.label;
					var html = d.html || "<strong>" + _label + "</strong>";
					if(d.description && d.value!==d.description) {
						html += '<br><span class="small">' + __(d.description) + '</span>';
					}
					return $('<li></li>')
						.data('item.autocomplete', d)
						.prop('aria-selected', 'false')
						.html('<a><p>' + html + '</p></a>')
						.get(0);
				},
				sort: function() {
					return 0;
				}
			});

			this.$input.on("input", frappe.utils.debounce(function(e) {
				var doctype = me.get_options();
				if(!doctype) { return; }
				if (!me.$input.cache[doctype]) {
					me.$input.cache[doctype] = {};
				}

				var term = e.target.value;

				if (me.$input.cache[doctype][term]!=null) {
					// immediately show from cache
					me.awesomplete.list = me.$input.cache[doctype][term];
				}
				var args = {
					'txt': term,
					'doctype': doctype,
					'ignore_user_permissions': me.df.ignore_user_permissions,
					'reference_doctype': me.get_reference_doctype() || ""
				};

				me.set_custom_query(args);

				frappe.call({
					type: "POST",
					method:'frappe.desk.search.search_link',
					no_spinner: true,
					args: args,
					callback: function(r) {
						if(!me.$input.is(":focus")) {
							return;
						}
						r.results = me.merge_duplicates(r.results);

						// show filter description in awesomplete
						if (args.filters) {
							var filter_string = me.get_filter_description(args.filters);
							if (filter_string) {
								r.results.push({
									html: ("<span class=\"text-muted\">" + filter_string + "</span>"),
									value: '',
									action: function () {}
								});
							}
						}

						if(!me.df.only_select) {
							if(frappe.model.can_create(doctype)) {
								// new item
								r.results.push({
									label: "<span class='text-primary link-option'>"
										+ "<i class='fa fa-plus' style='margin-right: 5px;'></i> "
										+ __("Create a new {0}", [__(me.get_options())])
										+ "</span>",
									value: "create_new__link_option",
									action: me.new_doc
								});
							}
							// advanced search

							if (locals && locals['DocType']) {
								// not applicable in web forms
								r.results.push({
									label: "<span class='text-primary link-option'>"
										+ "<i class='fa fa-search' style='margin-right: 5px;'></i> "
										+ __("Advanced Search")
										+ "</span>",
									value: "advanced_search__link_option",
									action: me.open_advanced_search
								});
							}
						}
						me.$input.cache[doctype][term] = r.results;
						me.awesomplete.list = me.$input.cache[doctype][term];
					}
				});
			}, 500));

			this.$input.on("blur", function() {
				if(me.selected) {
					me.selected = false;
					return;
				}
				var value = me.get_input_value();
				if(value!==me.last_value) {
					me.parse_validate_and_set_in_model(value);
				}
			});

			this.$input.on("awesomplete-open", function() {
				me.$wrapper.css({"z-index": 100});
				me.$wrapper.find('ul').css({"z-index": 100});
				me.autocomplete_open = true;
			});

			this.$input.on("awesomplete-close", function() {
				me.$wrapper.css({"z-index": 1});
				me.autocomplete_open = false;
			});

			this.$input.on("awesomplete-select", function(e) {
				var o = e.originalEvent;
				var item = me.awesomplete.get_item(o.text.value);

				me.autocomplete_open = false;

				// prevent selection on tab
				var TABKEY = 9;
				if(e.keyCode === TABKEY) {
					e.preventDefault();
					me.awesomplete.close();
					return false;
				}

				if(item.action) {
					item.value = "";
					item.action.apply(me);
				}

				// if remember_last_selected is checked in the doctype against the field,
				// then add this value
				// to defaults so you do not need to set it again
				// unless it is changed.
				if(me.df.remember_last_selected_value) {
					frappe.boot.user.last_selected_values[me.df.options] = item.value;
				}

				me.parse_validate_and_set_in_model(item.value);
			});

			this.$input.on("awesomplete-selectcomplete", function(e) {
				var o = e.originalEvent;
				if(o.text.value.indexOf("__link_option") !== -1) {
					me.$input.val("");
				}
			});
		},

		merge_duplicates: function merge_duplicates(results) {
			// in case of result like this
			// [{value: 'Manufacturer 1', 'description': 'mobile part 1'},
			// 	{value: 'Manufacturer 1', 'description': 'mobile part 2'}]
			// suggestion list has two items with same value (docname) & description
			return results.reduce(function (newArr, currElem) {
				if (newArr.length === 0) { return [currElem]; }
				var element_with_same_value = newArr.find(function (e) { return e.value === currElem.value; });
				if (element_with_same_value) {
					element_with_same_value.description += ", " + (currElem.description);
					return [].concat( newArr );
				}
				return newArr.concat( [currElem]);
			}, []);
			// returns [{value: 'Manufacturer 1', 'description': 'mobile part 1, mobile part 2'}]
		},

		get_filter_description: function get_filter_description(filters) {
			var doctype = this.get_options();
			var filter_array = [];
			var meta = null;

			frappe.model.with_doctype(doctype, function () {
				meta = frappe.get_meta(doctype);
			});

			// convert object style to array
			if (!Array.isArray(filters)) {
				for (var fieldname in filters) {
					var value = filters[fieldname];
					if (!Array.isArray(value)) {
						value = ['=', value];
					}
					filter_array.push([fieldname ].concat( value)); // fieldname, operator, value
				}
			} else {
				filter_array = filters;
			}

			// add doctype if missing
			filter_array = filter_array.map(function (filter) {
				if (filter.length === 3) {
					return [doctype ].concat( filter); // doctype, fieldname, operator, value
				}
				return filter;
			});

			function get_filter_description(filter) {
				var doctype = filter[0];
				var fieldname = filter[1];
				var docfield = frappe.meta.get_docfield(doctype, fieldname);
				var label = docfield ? docfield.label : frappe.model.unscrub(fieldname);

				if (filter[3] && Array.isArray(filter[3]) && filter[3].length > 5) {
					filter[3] = filter[3].slice(0, 5);
					filter[3].push('...');
				}

				var value = filter[3] == null || filter[3] === ''
					? __('empty')
					: String(filter[3]);

				return [__(label).bold(), filter[2], value.bold()].join(' ');
			}

			var filter_string = filter_array
				.map(get_filter_description)
				.join(', ');

			return __('Filters applied for {0}', [filter_string]);
		},

		set_custom_query: function(args) {
			var set_nulls = function(obj) {
				$.each(obj, function(key, value) {
					if(value!==undefined) {
						obj[key] = value;
					}
				});
				return obj;
			};
			if(this.get_query || this.df.get_query) {
				var get_query = this.get_query || this.df.get_query;
				if($.isPlainObject(get_query)) {
					var filters = null;
					if(get_query.filters) {
						// passed as {'filters': {'key':'value'}}
						filters = get_query.filters;
					} else if(get_query.query) {

						// passed as {'query': 'path.to.method'}
						args.query = get_query;
					} else {

						// dict is filters
						filters = get_query;
					}

					if (filters) {
						filters = set_nulls(filters);

						// extend args for custom functions
						$.extend(args, filters);

						// add "filters" for standard query (search.py)
						args.filters = filters;
					}
				} else if(typeof(get_query)==="string") {
					args.query = get_query;
				} else {
					// get_query by function
					var q = (get_query)(this.frm && this.frm.doc || this.doc, this.doctype, this.docname);

					if (typeof(q)==="string") {
						// returns a string
						args.query = q;
					} else if($.isPlainObject(q)) {
						// returns a plain object with filters
						if(q.filters) {
							set_nulls(q.filters);
						}

						// turn off value translation
						if(q.translate_values !== undefined) {
							this.translate_values = q.translate_values;
						}

						// extend args for custom functions
						$.extend(args, q);

						// add "filters" for standard query (search.py)
						args.filters = q.filters;
					}
				}
			}
			if(this.df.filters) {
				set_nulls(this.df.filters);
				if(!args.filters) { args.filters = {}; }
				$.extend(args.filters, this.df.filters);
			}
		},
		validate: function(value) {
			// validate the value just entered
			if(this.df.options=="[Select]" || this.df.ignore_link_validation) {
				return value;
			}

			return this.validate_link_and_fetch(this.df, this.get_options(),
				this.docname, value);
		},
		validate_link_and_fetch: function(df, doctype, docname, value) {
			var this$1 = this;

			var me = this;

			if(value) {
				return new Promise(function (resolve) {
					var fetch = '';

					if(this$1.frm && this$1.frm.fetch_dict[df.fieldname]) {
						fetch = this$1.frm.fetch_dict[df.fieldname].columns.join(', ');
					}

					return frappe.call({
						method:'frappe.desk.form.utils.validate_link',
						type: "GET",
						args: {
							'value': value,
							'options': doctype,
							'fetch': fetch
						},
						no_spinner: true,
						callback: function(r) {
							if(r.message=='Ok') {
								if(r.fetch_values && docname) {
									me.set_fetch_values(df, docname, r.fetch_values);
								}
								resolve(r.valid_value);
							} else {
								resolve("");
							}
						}
					});
				});
			}
		},
		set_fetch_values: function(df, docname, fetch_values) {
			var fl = this.frm.fetch_dict[df.fieldname].fields;
			for(var i=0; i < fl.length; i++) {
				frappe.model.set_value(df.parent, docname, fl[i], fetch_values[i], df.fieldtype);
			}
		}
	});

	if(awesomplete) {
		awesomplete.prototype.get_item = function(value) {
			return this._list.find(function(item) {
				return item.value === value;
			});
		};
	}

	frappe.ui.form.ControlDynamicLink = frappe.ui.form.ControlLink.extend({
		get_options: function() {
			var options = '';
			if(this.df.get_options) {
				options = this.df.get_options();
			}
			else if (this.docname==null && cur_dialog) {
				//for dialog box
				options = cur_dialog.get_value(this.df.options);
			}
			else if (!cur_frm) {
				var selector = "input[data-fieldname=\"" + (this.df.options) + "\"]";
				var input = null;
				if (cur_list) {
					// for list page
					input = cur_list.filter_area.standard_filters_wrapper.find(selector);
				}
				if (cur_page) {
					input = $(cur_page.page).find(selector);
				}
				if (input) {
					options = input.val();
				}
			}
			else {
				options = frappe.model.get_value(this.df.parent, this.docname, this.df.options);
			}

			if (frappe.model.is_single(options)) {
				frappe.throw(__(((options.bold()) + " is not a valid DocType for Dynamic Link")));
			}

			return options;
		},
	});

	frappe.ui.form.ControlText = frappe.ui.form.ControlData.extend({
		html_element: "textarea",
		horizontal: false,
		make_wrapper: function() {
			this._super();
			this.$wrapper.find(".like-disabled-input").addClass("for-description");
		},
		make_input: function() {
			this._super();
			this.$input.css({'height': '300px'});
		}
	});

	frappe.ui.form.ControlLongText = frappe.ui.form.ControlText;
	frappe.ui.form.ControlSmallText = frappe.ui.form.ControlText.extend({
		make_input: function() {
			this._super();
			this.$input.css({'height': '150px'});
		}
	});

	frappe.ui.form.ControlCode = frappe.ui.form.ControlText.extend({
		make_input: function make_input() {
			var this$1 = this;

			if (this.editor) { return; }
			this.load_lib().then(function () { return this$1.make_ace_editor(); });
		},

		make_ace_editor: function make_ace_editor() {
			var this$1 = this;

			if (this.editor) { return; }
			this.ace_editor_target = $('<div class="ace-editor-target"></div>')
				.appendTo(this.input_area);

			// styling
			this.ace_editor_target.addClass('border rounded');
			this.ace_editor_target.css('height', 300);

			// initialize
			var ace = window.ace;
			this.editor = ace.edit(this.ace_editor_target.get(0));
			this.editor.setTheme('ace/theme/tomorrow');
			this.set_language();

			// events
			this.editor.session.on('change', frappe.utils.debounce(function () {
				var input_value = this$1.get_input_value();
				this$1.parse_validate_and_set_in_model(input_value);
			}, 300));
		},

		set_language: function set_language() {
			var language_map = {
				'Javascript': 'ace/mode/javascript',
				'JS': 'ace/mode/javascript',
				'HTML': 'ace/mode/html',
				'CSS': 'ace/mode/css',
				'Markdown': 'ace/mode/markdown',
				'SCSS': 'ace/mode/scss',
				'JSON': 'ace/mode/json'
			};
			var language = this.df.options;

			var valid_languages = Object.keys(language_map);
			if (!valid_languages.includes(language)) {
				// eslint-disable-next-line
				console.warn(("Invalid language option provided for field \"" + (this.df.label) + "\". Valid options are " + (valid_languages.join(', ')) + "."));
			}

			var ace_language_mode = language_map[language] || '';
			this.editor.session.setMode(ace_language_mode);
		},

		parse: function parse(value) {
			if (value == null) {
				value = "";
			}
			return value;
		},

		set_formatted_input: function set_formatted_input(value) {
			var this$1 = this;

			return this.load_lib().then(function () {
				if (!this$1.editor) { return; }
				if (!value) { value = ''; }
				if (value === this$1.get_input_value()) { return; }
				this$1.editor.session.setValue(value);
			});
		},

		get_input_value: function get_input_value() {
			return this.editor ? this.editor.session.getValue() : '';
		},

		load_lib: function load_lib() {
			var this$1 = this;

			if (this.library_loaded) { return this.library_loaded; }

			if (frappe.boot.developer_mode) {
				this.root_lib_path = '/assets/frappe/node_modules/ace-builds/src-noconflict/';
			} else {
				this.root_lib_path = '/assets/frappe/node_modules/ace-builds/src-min-noconflict/';
			}

			this.library_loaded = new Promise(function (resolve) {
				frappe.require(this$1.root_lib_path + 'ace.js', function () {
					window.ace.config.set('basePath', this$1.root_lib_path);
					resolve();
				});
			});

			return this.library_loaded;
		}
	});

	var quill = createCommonjsModule(function (module, exports) {
	/*!
	 * Quill Editor v2.0.0-dev.2
	 * https://quilljs.com/
	 * Copyright (c) 2014, Jason Chen
	 * Copyright (c) 2013, salesforce.com
	 */
	(function webpackUniversalModuleDefinition(root, factory) {
		{ module.exports = factory(); }
	})(window, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// define __esModule on exports
	/******/ 	__webpack_require__.r = function(exports) {
	/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 		}
	/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 	};
	/******/
	/******/ 	// create a fake namespace object
	/******/ 	// mode & 1: value is a module id, require it
	/******/ 	// mode & 2: merge all properties of value into the ns
	/******/ 	// mode & 4: return value when already ns object
	/******/ 	// mode & 8|1: behave like require
	/******/ 	__webpack_require__.t = function(value, mode) {
	/******/ 		if(mode & 1) { value = __webpack_require__(value); }
	/******/ 		if(mode & 8) { return value; }
	/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) { return value; }
	/******/ 		var ns = Object.create(null);
	/******/ 		__webpack_require__.r(ns);
	/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
	/******/ 		if(mode & 2 && typeof value != 'string') { for(var key in value) { __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key)); } }
	/******/ 		return ns;
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 0);
	/******/ })
	/************************************************************************/
	/******/ ({

	/***/ "./assets/icons/align-center.svg":
	/*!***************************************!*\
	  !*** ./assets/icons/align-center.svg ***!
	  \***************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/align-center.svg?");

	/***/ }),

	/***/ "./assets/icons/align-justify.svg":
	/*!****************************************!*\
	  !*** ./assets/icons/align-justify.svg ***!
	  \****************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/align-justify.svg?");

	/***/ }),

	/***/ "./assets/icons/align-left.svg":
	/*!*************************************!*\
	  !*** ./assets/icons/align-left.svg ***!
	  \*************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/align-left.svg?");

	/***/ }),

	/***/ "./assets/icons/align-right.svg":
	/*!**************************************!*\
	  !*** ./assets/icons/align-right.svg ***!
	  \**************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/align-right.svg?");

	/***/ }),

	/***/ "./assets/icons/background.svg":
	/*!*************************************!*\
	  !*** ./assets/icons/background.svg ***!
	  \*************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <g class=\\\"ql-fill ql-color-label\\\"> <polygon points=\\\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\\\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\\\"6.817 5 6 5 6 6 6.38 6 6.817 5\\\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\\\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\\\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\\\"4.63 10 4 10 4 11 4.192 11 4.63 10\\\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\\\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\\\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\\\"12 6.868 12 6 11.62 6 12 6.868\\\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\\\"12.933 9 13 9 13 8 12.495 8 12.933 9\\\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\\\"5.5 13 9 5 12.5 13\\\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/background.svg?");

	/***/ }),

	/***/ "./assets/icons/blockquote.svg":
	/*!*************************************!*\
	  !*** ./assets/icons/blockquote.svg ***!
	  \*************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <rect class=\\\"ql-fill ql-stroke\\\" height=3 width=3 x=4 y=5></rect> <rect class=\\\"ql-fill ql-stroke\\\" height=3 width=3 x=11 y=5></rect> <path class=\\\"ql-even ql-fill ql-stroke\\\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\\\"ql-even ql-fill ql-stroke\\\" d=M14,8c0,4.031-3,5-3,5></path> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/blockquote.svg?");

	/***/ }),

	/***/ "./assets/icons/bold.svg":
	/*!*******************************!*\
	  !*** ./assets/icons/bold.svg ***!
	  \*******************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/bold.svg?");

	/***/ }),

	/***/ "./assets/icons/clean.svg":
	/*!********************************!*\
	  !*** ./assets/icons/clean.svg ***!
	  \********************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg class=\\\"\\\" viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/clean.svg?");

	/***/ }),

	/***/ "./assets/icons/code.svg":
	/*!*******************************!*\
	  !*** ./assets/icons/code.svg ***!
	  \*******************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polyline class=\\\"ql-even ql-stroke\\\" points=\\\"5 7 3 9 5 11\\\"></polyline> <polyline class=\\\"ql-even ql-stroke\\\" points=\\\"13 7 15 9 13 11\\\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/code.svg?");

	/***/ }),

	/***/ "./assets/icons/color.svg":
	/*!********************************!*\
	  !*** ./assets/icons/color.svg ***!
	  \********************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=\\\"ql-color-label ql-stroke ql-transparent\\\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\\\"5.5 11 9 3 12.5 11\\\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/color.svg?");

	/***/ }),

	/***/ "./assets/icons/direction-ltr.svg":
	/*!****************************************!*\
	  !*** ./assets/icons/direction-ltr.svg ***!
	  \****************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polygon class=\\\"ql-stroke ql-fill\\\" points=\\\"3 11 5 9 3 7 3 11\\\"></polygon> <line class=\\\"ql-stroke ql-fill\\\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/direction-ltr.svg?");

	/***/ }),

	/***/ "./assets/icons/direction-rtl.svg":
	/*!****************************************!*\
	  !*** ./assets/icons/direction-rtl.svg ***!
	  \****************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polygon class=\\\"ql-stroke ql-fill\\\" points=\\\"15 12 13 10 15 8 15 12\\\"></polygon> <line class=\\\"ql-stroke ql-fill\\\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/direction-rtl.svg?");

	/***/ }),

	/***/ "./assets/icons/dropdown.svg":
	/*!***********************************!*\
	  !*** ./assets/icons/dropdown.svg ***!
	  \***********************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <polygon class=ql-stroke points=\\\"7 11 9 13 11 11 7 11\\\"></polygon> <polygon class=ql-stroke points=\\\"7 7 9 5 11 7 7 7\\\"></polygon> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/dropdown.svg?");

	/***/ }),

	/***/ "./assets/icons/formula.svg":
	/*!**********************************!*\
	  !*** ./assets/icons/formula.svg ***!
	  \**********************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/formula.svg?");

	/***/ }),

	/***/ "./assets/icons/header-2.svg":
	/*!***********************************!*\
	  !*** ./assets/icons/header-2.svg ***!
	  \***********************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewBox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/header-2.svg?");

	/***/ }),

	/***/ "./assets/icons/header.svg":
	/*!*********************************!*\
	  !*** ./assets/icons/header.svg ***!
	  \*********************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewBox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/header.svg?");

	/***/ }),

	/***/ "./assets/icons/image.svg":
	/*!********************************!*\
	  !*** ./assets/icons/image.svg ***!
	  \********************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\\\"ql-even ql-fill\\\" points=\\\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\\\"></polyline> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/image.svg?");

	/***/ }),

	/***/ "./assets/icons/indent.svg":
	/*!*********************************!*\
	  !*** ./assets/icons/indent.svg ***!
	  \*********************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\\\"ql-fill ql-stroke\\\" points=\\\"3 7 3 11 5 9 3 7\\\"></polyline> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/indent.svg?");

	/***/ }),

	/***/ "./assets/icons/italic.svg":
	/*!*********************************!*\
	  !*** ./assets/icons/italic.svg ***!
	  \*********************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/italic.svg?");

	/***/ }),

	/***/ "./assets/icons/link.svg":
	/*!*******************************!*\
	  !*** ./assets/icons/link.svg ***!
	  \*******************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\\\"ql-even ql-stroke\\\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\\\"ql-even ql-stroke\\\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/link.svg?");

	/***/ }),

	/***/ "./assets/icons/list-bullet.svg":
	/*!**************************************!*\
	  !*** ./assets/icons/list-bullet.svg ***!
	  \**************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/list-bullet.svg?");

	/***/ }),

	/***/ "./assets/icons/list-check.svg":
	/*!*************************************!*\
	  !*** ./assets/icons/list-check.svg ***!
	  \*************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg class=\\\"\\\" viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\\\"3 4 4 5 6 3\\\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\\\"3 14 4 15 6 13\\\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\\\"3 9 4 10 6 8\\\"></polyline> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/list-check.svg?");

	/***/ }),

	/***/ "./assets/icons/list-ordered.svg":
	/*!***************************************!*\
	  !*** ./assets/icons/list-ordered.svg ***!
	  \***************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\\\"ql-stroke ql-thin\\\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\\\"ql-stroke ql-thin\\\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\\\"ql-stroke ql-thin\\\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/list-ordered.svg?");

	/***/ }),

	/***/ "./assets/icons/outdent.svg":
	/*!**********************************!*\
	  !*** ./assets/icons/outdent.svg ***!
	  \**********************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\\\"5 7 5 11 3 9 5 7\\\"></polyline> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/outdent.svg?");

	/***/ }),

	/***/ "./assets/icons/strike.svg":
	/*!*********************************!*\
	  !*** ./assets/icons/strike.svg ***!
	  \*********************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <line class=\\\"ql-stroke ql-thin\\\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/strike.svg?");

	/***/ }),

	/***/ "./assets/icons/subscript.svg":
	/*!************************************!*\
	  !*** ./assets/icons/subscript.svg ***!
	  \************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/subscript.svg?");

	/***/ }),

	/***/ "./assets/icons/superscript.svg":
	/*!**************************************!*\
	  !*** ./assets/icons/superscript.svg ***!
	  \**************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/superscript.svg?");

	/***/ }),

	/***/ "./assets/icons/table.svg":
	/*!********************************!*\
	  !*** ./assets/icons/table.svg ***!
	  \********************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=2 width=3 x=5 y=5></rect> <rect class=ql-fill height=2 width=4 x=9 y=5></rect> <g class=\\\"ql-fill ql-transparent\\\"> <rect height=2 width=3 x=5 y=8></rect> <rect height=2 width=4 x=9 y=8></rect> <rect height=2 width=3 x=5 y=11></rect> <rect height=2 width=4 x=9 y=11></rect> </g> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/table.svg?");

	/***/ }),

	/***/ "./assets/icons/underline.svg":
	/*!************************************!*\
	  !*** ./assets/icons/underline.svg ***!
	  \************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/underline.svg?");

	/***/ }),

	/***/ "./assets/icons/video.svg":
	/*!********************************!*\
	  !*** ./assets/icons/video.svg ***!
	  \********************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("module.exports = \"<svg viewbox=\\\"0 0 18 18\\\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>\";\n\n//# sourceURL=webpack://Quill/./assets/icons/video.svg?");

	/***/ }),

	/***/ "./blots/block.js":
	/*!************************!*\
	  !*** ./blots/block.js ***!
	  \************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.BlockEmbed = exports.bubbleFormats = exports.blockDelta = undefined;\n\nvar _extend = __webpack_require__(/*! extend */ \"./node_modules/extend/index.js\");\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _quillDelta = __webpack_require__(/*! quill-delta */ \"./node_modules/quill-delta/lib/delta.js\");\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nvar _break = __webpack_require__(/*! ./break */ \"./blots/break.js\");\n\nvar _break2 = _interopRequireDefault(_break);\n\nvar _inline = __webpack_require__(/*! ./inline */ \"./blots/inline.js\");\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nvar _text = __webpack_require__(/*! ./text */ \"./blots/text.js\");\n\nvar _text2 = _interopRequireDefault(_text);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst NEWLINE_LENGTH = 1;\n\nclass Block extends _parchment.BlockBlot {\n  constructor(scroll, domNode) {\n    super(scroll, domNode);\n    this.cache = {};\n  }\n\n  delta() {\n    if (this.cache.delta == null) {\n      this.cache.delta = blockDelta(this);\n    }\n    return this.cache.delta;\n  }\n\n  deleteAt(index, length) {\n    super.deleteAt(index, length);\n    this.cache = {};\n  }\n\n  formatAt(index, length, name, value) {\n    if (length <= 0) return;\n    if (this.scroll.query(name, _parchment.Scope.BLOCK)) {\n      if (index + length === this.length()) {\n        this.format(name, value);\n      }\n    } else {\n      super.formatAt(index, Math.min(length, this.length() - index - 1), name, value);\n    }\n    this.cache = {};\n  }\n\n  insertAt(index, value, def) {\n    if (def != null) {\n      super.insertAt(index, value, def);\n      return;\n    }\n    if (value.length === 0) return;\n    const lines = value.split('\\n');\n    const text = lines.shift();\n    if (text.length > 0) {\n      if (index < this.length() - 1 || this.children.tail == null) {\n        super.insertAt(Math.min(index, this.length() - 1), text);\n      } else {\n        this.children.tail.insertAt(this.children.tail.length(), text);\n      }\n      this.cache = {};\n    }\n    let block = this;\n    lines.reduce((lineIndex, line) => {\n      block = block.split(lineIndex, true);\n      block.insertAt(0, line);\n      return line.length;\n    }, index + text.length);\n  }\n\n  insertBefore(blot, ref) {\n    const head = this.children.head;\n\n    super.insertBefore(blot, ref);\n    if (head instanceof _break2.default) {\n      head.remove();\n    }\n    this.cache = {};\n  }\n\n  length() {\n    if (this.cache.length == null) {\n      this.cache.length = super.length() + NEWLINE_LENGTH;\n    }\n    return this.cache.length;\n  }\n\n  moveChildren(target, ref) {\n    super.moveChildren(target, ref);\n    this.cache = {};\n  }\n\n  optimize(context) {\n    super.optimize(context);\n    this.cache = {};\n  }\n\n  path(index) {\n    return super.path(index, true);\n  }\n\n  removeChild(child) {\n    super.removeChild(child);\n    this.cache = {};\n  }\n\n  split(index, force = false) {\n    if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {\n      const clone = this.clone();\n      if (index === 0) {\n        this.parent.insertBefore(clone, this);\n        return this;\n      }\n      this.parent.insertBefore(clone, this.next);\n      return clone;\n    }\n    const next = super.split(index, force);\n    this.cache = {};\n    return next;\n  }\n}\nBlock.blotName = 'block';\nBlock.tagName = 'P';\nBlock.defaultChild = _break2.default;\nBlock.allowedChildren = [_break2.default, _inline2.default, _parchment.EmbedBlot, _text2.default];\n\nclass BlockEmbed extends _parchment.EmbedBlot {\n  attach() {\n    super.attach();\n    this.attributes = new _parchment.AttributorStore(this.domNode);\n  }\n\n  delta() {\n    return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));\n  }\n\n  format(name, value) {\n    const attribute = this.scroll.query(name, _parchment.Scope.BLOCK_ATTRIBUTE);\n    if (attribute != null) {\n      this.attributes.attribute(attribute, value);\n    }\n  }\n\n  formatAt(index, length, name, value) {\n    this.format(name, value);\n  }\n\n  insertAt(index, value, def) {\n    if (typeof value === 'string' && value.endsWith('\\n')) {\n      const block = this.scroll.create(Block.blotName);\n      this.parent.insertBefore(block, index === 0 ? this : this.next);\n      block.insertAt(0, value.slice(0, -1));\n    } else {\n      super.insertAt(index, value, def);\n    }\n  }\n}\nBlockEmbed.scope = _parchment.Scope.BLOCK_BLOT;\n// It is important for cursor behavior BlockEmbeds use tags that are block level elements\n\nfunction blockDelta(blot) {\n  return blot.descendants(_parchment.LeafBlot).reduce((delta, leaf) => {\n    if (leaf.length() === 0) {\n      return delta;\n    }\n    return delta.insert(leaf.value(), bubbleFormats(leaf));\n  }, new _quillDelta2.default()).insert('\\n', bubbleFormats(blot));\n}\n\nfunction bubbleFormats(blot, formats = {}) {\n  if (blot == null) return formats;\n  if (typeof blot.formats === 'function') {\n    formats = (0, _extend2.default)(formats, blot.formats());\n  }\n  if (blot.parent == null || blot.parent.blotName === 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {\n    return formats;\n  }\n  return bubbleFormats(blot.parent, formats);\n}\n\nexports.blockDelta = blockDelta;\nexports.bubbleFormats = bubbleFormats;\nexports.BlockEmbed = BlockEmbed;\nexports.default = Block;\n\n//# sourceURL=webpack://Quill/./blots/block.js?");

	/***/ }),

	/***/ "./blots/break.js":
	/*!************************!*\
	  !*** ./blots/break.js ***!
	  \************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nclass Break extends _parchment.EmbedBlot {\n  static value() {\n    return undefined;\n  }\n\n  optimize() {\n    if (this.prev || this.next) {\n      this.remove();\n    }\n  }\n\n  length() {\n    return 0;\n  }\n\n  value() {\n    return '';\n  }\n}\nBreak.blotName = 'break';\nBreak.tagName = 'BR';\n\nexports.default = Break;\n\n//# sourceURL=webpack://Quill/./blots/break.js?");

	/***/ }),

	/***/ "./blots/container.js":
	/*!****************************!*\
	  !*** ./blots/container.js ***!
	  \****************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nclass Container extends _parchment.ContainerBlot {}\n\nexports.default = Container;\n\n//# sourceURL=webpack://Quill/./blots/container.js?");

	/***/ }),

	/***/ "./blots/cursor.js":
	/*!*************************!*\
	  !*** ./blots/cursor.js ***!
	  \*************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nvar _text = __webpack_require__(/*! ./text */ \"./blots/text.js\");\n\nvar _text2 = _interopRequireDefault(_text);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Cursor extends _parchment.EmbedBlot {\n  static value() {\n    return undefined;\n  }\n\n  constructor(scroll, domNode, selection) {\n    super(scroll, domNode);\n    this.selection = selection;\n    this.textNode = document.createTextNode(Cursor.CONTENTS);\n    this.domNode.appendChild(this.textNode);\n    this.savedLength = 0;\n  }\n\n  detach() {\n    // super.detach() will also clear domNode.__blot\n    if (this.parent != null) this.parent.removeChild(this);\n  }\n\n  format(name, value) {\n    if (this.savedLength !== 0) {\n      super.format(name, value);\n      return;\n    }\n    let target = this;\n    let index = 0;\n    while (target != null && target.statics.scope !== _parchment.Scope.BLOCK_BLOT) {\n      index += target.offset(target.parent);\n      target = target.parent;\n    }\n    if (target != null) {\n      this.savedLength = Cursor.CONTENTS.length;\n      target.optimize();\n      target.formatAt(index, Cursor.CONTENTS.length, name, value);\n      this.savedLength = 0;\n    }\n  }\n\n  index(node, offset) {\n    if (node === this.textNode) return 0;\n    return super.index(node, offset);\n  }\n\n  length() {\n    return this.savedLength;\n  }\n\n  position() {\n    return [this.textNode, this.textNode.data.length];\n  }\n\n  remove() {\n    super.remove();\n    this.parent = null;\n  }\n\n  restore() {\n    if (this.selection.composing || this.parent == null) return null;\n    const range = this.selection.getNativeRange();\n    let restoreText;\n    let start;\n    let end;\n    if (range != null && range.start.node === this.textNode && range.end.node === this.textNode) {\n      var _ref = [this.textNode, range.start.offset, range.end.offset];\n      restoreText = _ref[0];\n      start = _ref[1];\n      end = _ref[2];\n    }\n    // Link format will insert text outside of anchor tag\n    while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {\n      this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);\n    }\n    if (this.textNode.data !== Cursor.CONTENTS) {\n      const text = this.textNode.data.split(Cursor.CONTENTS).join('');\n      if (this.next instanceof _text2.default) {\n        restoreText = this.next.domNode;\n        this.next.insertAt(0, text);\n        this.textNode.data = Cursor.CONTENTS;\n      } else {\n        this.textNode.data = text;\n        this.parent.insertBefore(this.scroll.create(this.textNode), this);\n        this.textNode = document.createTextNode(Cursor.CONTENTS);\n        this.domNode.appendChild(this.textNode);\n      }\n    }\n    this.remove();\n    if (start != null) {\n      var _map = [start, end].map(offset => {\n        return Math.max(0, Math.min(restoreText.data.length, offset - 1));\n      });\n\n      var _map2 = _slicedToArray(_map, 2);\n\n      start = _map2[0];\n      end = _map2[1];\n\n      return {\n        startNode: restoreText,\n        startOffset: start,\n        endNode: restoreText,\n        endOffset: end\n      };\n    }\n    return null;\n  }\n\n  update(mutations, context) {\n    if (mutations.some(mutation => {\n      return mutation.type === 'characterData' && mutation.target === this.textNode;\n    })) {\n      const range = this.restore();\n      if (range) context.range = range;\n    }\n  }\n\n  value() {\n    return '';\n  }\n}\nCursor.blotName = 'cursor';\nCursor.className = 'ql-cursor';\nCursor.tagName = 'span';\nCursor.CONTENTS = '\\uFEFF'; // Zero width no break space\n\nexports.default = Cursor;\n\n//# sourceURL=webpack://Quill/./blots/cursor.js?");

	/***/ }),

	/***/ "./blots/embed.js":
	/*!************************!*\
	  !*** ./blots/embed.js ***!
	  \************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nvar _text = __webpack_require__(/*! ./text */ \"./blots/text.js\");\n\nvar _text2 = _interopRequireDefault(_text);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst GUARD_TEXT = '\\uFEFF';\n\nclass Embed extends _parchment.EmbedBlot {\n  constructor(scroll, node) {\n    super(scroll, node);\n    this.contentNode = document.createElement('span');\n    this.contentNode.setAttribute('contenteditable', false);\n    Array.from(this.domNode.childNodes).forEach(childNode => {\n      this.contentNode.appendChild(childNode);\n    });\n    this.leftGuard = document.createTextNode(GUARD_TEXT);\n    this.rightGuard = document.createTextNode(GUARD_TEXT);\n    this.domNode.appendChild(this.leftGuard);\n    this.domNode.appendChild(this.contentNode);\n    this.domNode.appendChild(this.rightGuard);\n  }\n\n  index(node, offset) {\n    if (node === this.leftGuard) return 0;\n    if (node === this.rightGuard) return 1;\n    return super.index(node, offset);\n  }\n\n  restore(node) {\n    let range;\n    let textNode;\n    const text = node.data.split(GUARD_TEXT).join('');\n    if (node === this.leftGuard) {\n      if (this.prev instanceof _text2.default) {\n        const prevLength = this.prev.length();\n        this.prev.insertAt(prevLength, text);\n        range = {\n          startNode: this.prev.domNode,\n          startOffset: prevLength + text.length\n        };\n      } else {\n        textNode = document.createTextNode(text);\n        this.parent.insertBefore(this.scroll.create(textNode), this);\n        range = {\n          startNode: textNode,\n          startOffset: text.length\n        };\n      }\n    } else if (node === this.rightGuard) {\n      if (this.next instanceof _text2.default) {\n        this.next.insertAt(0, text);\n        range = {\n          startNode: this.next.domNode,\n          startOffset: text.length\n        };\n      } else {\n        textNode = document.createTextNode(text);\n        this.parent.insertBefore(this.scroll.create(textNode), this.next);\n        range = {\n          startNode: textNode,\n          startOffset: text.length\n        };\n      }\n    }\n    node.data = GUARD_TEXT;\n    return range;\n  }\n\n  update(mutations, context) {\n    mutations.forEach(mutation => {\n      if (mutation.type === 'characterData' && (mutation.target === this.leftGuard || mutation.target === this.rightGuard)) {\n        const range = this.restore(mutation.target);\n        if (range) context.range = range;\n      }\n    });\n  }\n}\n\nexports.default = Embed;\n\n//# sourceURL=webpack://Quill/./blots/embed.js?");

	/***/ }),

	/***/ "./blots/inline.js":
	/*!*************************!*\
	  !*** ./blots/inline.js ***!
	  \*************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nvar _break = __webpack_require__(/*! ./break */ \"./blots/break.js\");\n\nvar _break2 = _interopRequireDefault(_break);\n\nvar _text = __webpack_require__(/*! ./text */ \"./blots/text.js\");\n\nvar _text2 = _interopRequireDefault(_text);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Inline extends _parchment.InlineBlot {\n  static compare(self, other) {\n    const selfIndex = Inline.order.indexOf(self);\n    const otherIndex = Inline.order.indexOf(other);\n    if (selfIndex >= 0 || otherIndex >= 0) {\n      return selfIndex - otherIndex;\n    } else if (self === other) {\n      return 0;\n    } else if (self < other) {\n      return -1;\n    }\n    return 1;\n  }\n\n  formatAt(index, length, name, value) {\n    if (Inline.compare(this.statics.blotName, name) < 0 && this.scroll.query(name, _parchment.Scope.BLOT)) {\n      const blot = this.isolate(index, length);\n      if (value) {\n        blot.wrap(name, value);\n      }\n    } else {\n      super.formatAt(index, length, name, value);\n    }\n  }\n\n  optimize(context) {\n    super.optimize(context);\n    if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {\n      const parent = this.parent.isolate(this.offset(), this.length());\n      this.moveChildren(parent);\n      parent.wrap(this);\n    }\n  }\n}\nInline.allowedChildren = [Inline, _break2.default, _parchment.EmbedBlot, _text2.default];\n// Lower index means deeper in the DOM tree, since not found (-1) is for embeds\nInline.order = ['cursor', 'inline', // Must be lower\n'underline', 'strike', 'italic', 'bold', 'script', 'link', 'code'];\n\nexports.default = Inline;\n\n//# sourceURL=webpack://Quill/./blots/inline.js?");

	/***/ }),

	/***/ "./blots/scroll.js":
	/*!*************************!*\
	  !*** ./blots/scroll.js ***!
	  \*************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nvar _emitter = __webpack_require__(/*! ../core/emitter */ \"./core/emitter.js\");\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nvar _block = __webpack_require__(/*! ./block */ \"./blots/block.js\");\n\nvar _block2 = _interopRequireDefault(_block);\n\nvar _break = __webpack_require__(/*! ./break */ \"./blots/break.js\");\n\nvar _break2 = _interopRequireDefault(_break);\n\nvar _container = __webpack_require__(/*! ./container */ \"./blots/container.js\");\n\nvar _container2 = _interopRequireDefault(_container);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isLine(blot) {\n  return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;\n}\n\nclass Scroll extends _parchment.ScrollBlot {\n  constructor(registry, domNode, { emitter }) {\n    super(registry, domNode);\n    this.emitter = emitter;\n    // Some reason fixes composition issues with character languages in Windows/Chrome, Safari\n    this.domNode.addEventListener('DOMNodeInserted', () => {});\n    this.optimize();\n    this.enable();\n  }\n\n  batchStart() {\n    this.batch = true;\n  }\n\n  batchEnd() {\n    this.batch = false;\n    this.optimize();\n  }\n\n  emitMount(blot) {\n    this.emitter.emit(_emitter2.default.events.SCROLL_BLOT_MOUNT, blot);\n  }\n\n  emitUnmount(blot) {\n    this.emitter.emit(_emitter2.default.events.SCROLL_BLOT_UNMOUNT, blot);\n  }\n\n  deleteAt(index, length) {\n    var _line = this.line(index),\n        _line2 = _slicedToArray(_line, 2);\n\n    const first = _line2[0],\n          offset = _line2[1];\n\n    var _line3 = this.line(index + length),\n        _line4 = _slicedToArray(_line3, 1);\n\n    const last = _line4[0];\n\n    super.deleteAt(index, length);\n    if (last != null && first !== last && offset > 0) {\n      if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {\n        this.optimize();\n        return;\n      }\n      const ref = last.children.head instanceof _break2.default ? null : last.children.head;\n      first.moveChildren(last, ref);\n      first.remove();\n    }\n    this.optimize();\n  }\n\n  enable(enabled = true) {\n    this.domNode.setAttribute('contenteditable', enabled);\n  }\n\n  formatAt(index, length, format, value) {\n    super.formatAt(index, length, format, value);\n    this.optimize();\n  }\n\n  insertAt(index, value, def) {\n    if (index >= this.length()) {\n      if (def == null || this.scroll.query(value, _parchment.Scope.BLOCK) == null) {\n        const blot = this.scroll.create(this.statics.defaultChild.blotName);\n        this.appendChild(blot);\n        if (def == null && value.endsWith('\\n')) {\n          blot.insertAt(0, value.slice(0, -1), def);\n        } else {\n          blot.insertAt(0, value, def);\n        }\n      } else {\n        const embed = this.scroll.create(value, def);\n        this.appendChild(embed);\n      }\n    } else {\n      super.insertAt(index, value, def);\n    }\n    this.optimize();\n  }\n\n  insertBefore(blot, ref) {\n    if (blot.statics.scope === _parchment.Scope.INLINE_BLOT) {\n      const wrapper = this.scroll.create(this.statics.defaultChild.blotName);\n      wrapper.appendChild(blot);\n      super.insertBefore(wrapper, ref);\n    } else {\n      super.insertBefore(blot, ref);\n    }\n  }\n\n  leaf(index) {\n    return this.path(index).pop() || [null, -1];\n  }\n\n  line(index) {\n    if (index === this.length()) {\n      return this.line(index - 1);\n    }\n    return this.descendant(isLine, index);\n  }\n\n  lines(index = 0, length = Number.MAX_VALUE) {\n    const getLines = (blot, blotIndex, blotLength) => {\n      let lines = [];\n      let lengthLeft = blotLength;\n      blot.children.forEachAt(blotIndex, blotLength, (child, childIndex, childLength) => {\n        if (isLine(child)) {\n          lines.push(child);\n        } else if (child instanceof _parchment.ContainerBlot) {\n          lines = lines.concat(getLines(child, childIndex, lengthLeft));\n        }\n        lengthLeft -= childLength;\n      });\n      return lines;\n    };\n    return getLines(this, index, length);\n  }\n\n  optimize(mutations = [], context = {}) {\n    if (this.batch === true) return;\n    super.optimize(mutations, context);\n    if (mutations.length > 0) {\n      this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);\n    }\n  }\n\n  path(index) {\n    return super.path(index).slice(1); // Exclude self\n  }\n\n  remove() {\n    // Never remove self\n  }\n\n  update(mutations) {\n    if (this.batch === true) return;\n    let source = _emitter2.default.sources.USER;\n    if (typeof mutations === 'string') {\n      source = mutations;\n    }\n    if (!Array.isArray(mutations)) {\n      mutations = this.observer.takeRecords();\n    }\n    if (mutations.length > 0) {\n      this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);\n    }\n    super.update(mutations.concat([])); // pass copy\n    if (mutations.length > 0) {\n      this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);\n    }\n  }\n}\nScroll.blotName = 'scroll';\nScroll.className = 'ql-editor';\nScroll.tagName = 'DIV';\nScroll.defaultChild = _block2.default;\nScroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];\n\nexports.default = Scroll;\n\n//# sourceURL=webpack://Quill/./blots/scroll.js?");

	/***/ }),

	/***/ "./blots/text.js":
	/*!***********************!*\
	  !*** ./blots/text.js ***!
	  \***********************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nclass Text extends _parchment.TextBlot {}\n\nexports.default = Text;\n\n//# sourceURL=webpack://Quill/./blots/text.js?");

	/***/ }),

	/***/ "./core.js":
	/*!*****************!*\
	  !*** ./core.js ***!
	  \*****************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _quill = __webpack_require__(/*! ./core/quill */ \"./core/quill.js\");\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nvar _block = __webpack_require__(/*! ./blots/block */ \"./blots/block.js\");\n\nvar _block2 = _interopRequireDefault(_block);\n\nvar _break = __webpack_require__(/*! ./blots/break */ \"./blots/break.js\");\n\nvar _break2 = _interopRequireDefault(_break);\n\nvar _container = __webpack_require__(/*! ./blots/container */ \"./blots/container.js\");\n\nvar _container2 = _interopRequireDefault(_container);\n\nvar _cursor = __webpack_require__(/*! ./blots/cursor */ \"./blots/cursor.js\");\n\nvar _cursor2 = _interopRequireDefault(_cursor);\n\nvar _embed = __webpack_require__(/*! ./blots/embed */ \"./blots/embed.js\");\n\nvar _embed2 = _interopRequireDefault(_embed);\n\nvar _inline = __webpack_require__(/*! ./blots/inline */ \"./blots/inline.js\");\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nvar _scroll = __webpack_require__(/*! ./blots/scroll */ \"./blots/scroll.js\");\n\nvar _scroll2 = _interopRequireDefault(_scroll);\n\nvar _text = __webpack_require__(/*! ./blots/text */ \"./blots/text.js\");\n\nvar _text2 = _interopRequireDefault(_text);\n\nvar _clipboard = __webpack_require__(/*! ./modules/clipboard */ \"./modules/clipboard.js\");\n\nvar _clipboard2 = _interopRequireDefault(_clipboard);\n\nvar _history = __webpack_require__(/*! ./modules/history */ \"./modules/history.js\");\n\nvar _history2 = _interopRequireDefault(_history);\n\nvar _keyboard = __webpack_require__(/*! ./modules/keyboard */ \"./modules/keyboard.js\");\n\nvar _keyboard2 = _interopRequireDefault(_keyboard);\n\nvar _uploader = __webpack_require__(/*! ./modules/uploader */ \"./modules/uploader.js\");\n\nvar _uploader2 = _interopRequireDefault(_uploader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_quill2.default.register({\n  'blots/block': _block2.default,\n  'blots/block/embed': _block.BlockEmbed,\n  'blots/break': _break2.default,\n  'blots/container': _container2.default,\n  'blots/cursor': _cursor2.default,\n  'blots/embed': _embed2.default,\n  'blots/inline': _inline2.default,\n  'blots/scroll': _scroll2.default,\n  'blots/text': _text2.default,\n\n  'modules/clipboard': _clipboard2.default,\n  'modules/history': _history2.default,\n  'modules/keyboard': _keyboard2.default,\n  'modules/uploader': _uploader2.default\n});\n\nexports.default = _quill2.default;\n\n//# sourceURL=webpack://Quill/./core.js?");

	/***/ }),

	/***/ "./core/editor.js":
	/*!************************!*\
	  !*** ./core/editor.js ***!
	  \************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _clone = __webpack_require__(/*! clone */ \"./node_modules/clone/clone.js\");\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _deepEqual = __webpack_require__(/*! deep-equal */ \"./node_modules/deep-equal/index.js\");\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _extend = __webpack_require__(/*! extend */ \"./node_modules/extend/index.js\");\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _quillDelta = __webpack_require__(/*! quill-delta */ \"./node_modules/quill-delta/lib/delta.js\");\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _op = __webpack_require__(/*! quill-delta/lib/op */ \"./node_modules/quill-delta/lib/op.js\");\n\nvar _op2 = _interopRequireDefault(_op);\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nvar _cursor = __webpack_require__(/*! ../blots/cursor */ \"./blots/cursor.js\");\n\nvar _cursor2 = _interopRequireDefault(_cursor);\n\nvar _block = __webpack_require__(/*! ../blots/block */ \"./blots/block.js\");\n\nvar _block2 = _interopRequireDefault(_block);\n\nvar _break = __webpack_require__(/*! ../blots/break */ \"./blots/break.js\");\n\nvar _break2 = _interopRequireDefault(_break);\n\nvar _text = __webpack_require__(/*! ../blots/text */ \"./blots/text.js\");\n\nvar _text2 = _interopRequireDefault(_text);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nconst ASCII = /^[ -~]*$/;\n\nclass Editor {\n  constructor(scroll) {\n    this.scroll = scroll;\n    this.delta = this.getDelta();\n  }\n\n  applyDelta(delta) {\n    let consumeNextNewline = false;\n    this.scroll.update();\n    let scrollLength = this.scroll.length();\n    this.scroll.batchStart();\n    const normalizedDelta = normalizeDelta(delta);\n    normalizedDelta.reduce((index, op) => {\n      const length = op.retain || op.delete || op.insert.length || 1;\n      let attributes = op.attributes || {};\n      if (op.insert != null) {\n        if (typeof op.insert === 'string') {\n          let text = op.insert;\n          if (text.endsWith('\\n') && consumeNextNewline) {\n            consumeNextNewline = false;\n            text = text.slice(0, -1);\n          }\n          if (index >= scrollLength && !text.endsWith('\\n')) {\n            consumeNextNewline = true;\n          }\n          this.scroll.insertAt(index, text);\n\n          var _scroll$line = this.scroll.line(index),\n              _scroll$line2 = _slicedToArray(_scroll$line, 2);\n\n          const line = _scroll$line2[0],\n                offset = _scroll$line2[1];\n\n          let formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));\n          if (line instanceof _block2.default) {\n            var _line$descendant = line.descendant(_parchment.LeafBlot, offset),\n                _line$descendant2 = _slicedToArray(_line$descendant, 1);\n\n            const leaf = _line$descendant2[0];\n\n            formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));\n          }\n          attributes = _op2.default.attributes.diff(formats, attributes) || {};\n        } else if (typeof op.insert === 'object') {\n          const key = Object.keys(op.insert)[0]; // There should only be one key\n          if (key == null) return index;\n          this.scroll.insertAt(index, key, op.insert[key]);\n        }\n        scrollLength += length;\n      }\n      Object.keys(attributes).forEach(name => {\n        this.scroll.formatAt(index, length, name, attributes[name]);\n      });\n      return index + length;\n    }, 0);\n    normalizedDelta.reduce((index, op) => {\n      if (typeof op.delete === 'number') {\n        this.scroll.deleteAt(index, op.delete);\n        return index;\n      }\n      return index + (op.retain || op.insert.length || 1);\n    }, 0);\n    this.scroll.batchEnd();\n    this.scroll.optimize();\n    return this.update(normalizedDelta);\n  }\n\n  deleteText(index, length) {\n    this.scroll.deleteAt(index, length);\n    return this.update(new _quillDelta2.default().retain(index).delete(length));\n  }\n\n  formatLine(index, length, formats = {}) {\n    this.scroll.update();\n    Object.keys(formats).forEach(format => {\n      this.scroll.lines(index, Math.max(length, 1)).forEach(line => {\n        line.format(format, formats[format]);\n      });\n    });\n    this.scroll.optimize();\n    const delta = new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats));\n    return this.update(delta);\n  }\n\n  formatText(index, length, formats = {}) {\n    Object.keys(formats).forEach(format => {\n      this.scroll.formatAt(index, length, format, formats[format]);\n    });\n    const delta = new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats));\n    return this.update(delta);\n  }\n\n  getContents(index, length) {\n    return this.delta.slice(index, index + length);\n  }\n\n  getDelta() {\n    return this.scroll.lines().reduce((delta, line) => {\n      return delta.concat(line.delta());\n    }, new _quillDelta2.default());\n  }\n\n  getFormat(index, length = 0) {\n    let lines = [];\n    let leaves = [];\n    if (length === 0) {\n      this.scroll.path(index).forEach(path => {\n        var _path = _slicedToArray(path, 1);\n\n        const blot = _path[0];\n\n        if (blot instanceof _block2.default) {\n          lines.push(blot);\n        } else if (blot instanceof _parchment.LeafBlot) {\n          leaves.push(blot);\n        }\n      });\n    } else {\n      lines = this.scroll.lines(index, length);\n      leaves = this.scroll.descendants(_parchment.LeafBlot, index, length);\n    }\n    const formatsArr = [lines, leaves].map(blots => {\n      if (blots.length === 0) return {};\n      let formats = (0, _block.bubbleFormats)(blots.shift());\n      while (Object.keys(formats).length > 0) {\n        const blot = blots.shift();\n        if (blot == null) return formats;\n        formats = combineFormats((0, _block.bubbleFormats)(blot), formats);\n      }\n      return formats;\n    });\n    return _extend2.default.apply(_extend2.default, formatsArr);\n  }\n\n  getHTML(index, length) {\n    var _scroll$line3 = this.scroll.line(index),\n        _scroll$line4 = _slicedToArray(_scroll$line3, 2);\n\n    const line = _scroll$line4[0],\n          lineOffset = _scroll$line4[1];\n\n    if (line.length() >= lineOffset + length) {\n      return convertHTML(line, lineOffset, length, true);\n    }\n    return convertHTML(this.scroll, index, length, true);\n  }\n\n  getText(index, length) {\n    return this.getContents(index, length).filter(op => typeof op.insert === 'string').map(op => op.insert).join('');\n  }\n\n  insertEmbed(index, embed, value) {\n    this.scroll.insertAt(index, embed, value);\n    return this.update(new _quillDelta2.default().retain(index).insert({ [embed]: value }));\n  }\n\n  insertText(index, text, formats = {}) {\n    text = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n    this.scroll.insertAt(index, text);\n    Object.keys(formats).forEach(format => {\n      this.scroll.formatAt(index, text.length, format, formats[format]);\n    });\n    return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));\n  }\n\n  isBlank() {\n    if (this.scroll.children.length === 0) return true;\n    if (this.scroll.children.length > 1) return false;\n    const block = this.scroll.children.head;\n    if (block.statics.blotName !== _block2.default.blotName) return false;\n    if (block.children.length > 1) return false;\n    return block.children.head instanceof _break2.default;\n  }\n\n  removeFormat(index, length) {\n    const text = this.getText(index, length);\n\n    var _scroll$line5 = this.scroll.line(index + length),\n        _scroll$line6 = _slicedToArray(_scroll$line5, 2);\n\n    const line = _scroll$line6[0],\n          offset = _scroll$line6[1];\n\n    let suffixLength = 0;\n    let suffix = new _quillDelta2.default();\n    if (line != null) {\n      suffixLength = line.length() - offset;\n      suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\\n');\n    }\n    const contents = this.getContents(index, length + suffixLength);\n    const diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));\n    const delta = new _quillDelta2.default().retain(index).concat(diff);\n    return this.applyDelta(delta);\n  }\n\n  update(change, mutations = [], cursorIndex = undefined) {\n    const oldDelta = this.delta;\n    if (mutations.length === 1 && mutations[0].type === 'characterData' && mutations[0].target.data.match(ASCII) && this.scroll.find(mutations[0].target)) {\n      // Optimization for character changes\n      const textBlot = this.scroll.find(mutations[0].target);\n      const formats = (0, _block.bubbleFormats)(textBlot);\n      const index = textBlot.offset(this.scroll);\n      const oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, '');\n      const oldText = new _quillDelta2.default().insert(oldValue);\n      const newText = new _quillDelta2.default().insert(textBlot.value());\n      const diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));\n      change = diffDelta.reduce((delta, op) => {\n        if (op.insert) {\n          return delta.insert(op.insert, formats);\n        }\n        return delta.push(op);\n      }, new _quillDelta2.default());\n      this.delta = oldDelta.compose(change);\n    } else {\n      this.delta = this.getDelta();\n      if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {\n        change = oldDelta.diff(this.delta, cursorIndex);\n      }\n    }\n    return change;\n  }\n}\n\nfunction convertListHTML(items, lastIndent, types) {\n  if (items.length === 0) {\n    var _getListType = getListType(types.pop()),\n        _getListType2 = _slicedToArray(_getListType, 1);\n\n    const endTag = _getListType2[0];\n\n    if (lastIndent <= 0) {\n      return `</li></${endTag}>`;\n    }\n    return `</li></${endTag}>${convertListHTML([], lastIndent - 1, types)}`;\n  }\n\n  var _items = _toArray(items),\n      _items$ = _items[0];\n\n  const child = _items$.child,\n        offset = _items$.offset,\n        length = _items$.length,\n        indent = _items$.indent,\n        type = _items$.type,\n        rest = _items.slice(1);\n\n  var _getListType3 = getListType(type),\n      _getListType4 = _slicedToArray(_getListType3, 2);\n\n  const tag = _getListType4[0],\n        attribute = _getListType4[1];\n\n  if (indent > lastIndent) {\n    types.push(tag);\n    return `<${tag}><li${attribute}>${convertHTML(child, offset, length)}${convertListHTML(rest, indent, types)}`;\n  } else if (indent === lastIndent) {\n    return `</li><li${attribute}>${convertHTML(child, offset, length)}${convertListHTML(rest, indent, types)}`;\n  } else if (indent === lastIndent - 1) {\n    var _getListType5 = getListType(types.pop()),\n        _getListType6 = _slicedToArray(_getListType5, 1);\n\n    const endTag = _getListType6[0];\n\n    return `</li></${endTag}></li><li${attribute}>${convertHTML(child, offset, length)}${convertListHTML(rest, indent, types)}`;\n  }\n\n  var _getListType7 = getListType(types.pop()),\n      _getListType8 = _slicedToArray(_getListType7, 1);\n\n  const endTag = _getListType8[0];\n\n  return `</li></${endTag}>${convertListHTML(items, lastIndent - 1, types)}`;\n}\n\nfunction convertHTML(blot, index, length, isRoot = false) {\n  if (typeof blot.html === 'function') {\n    return blot.html(index, length);\n  } else if (blot instanceof _text2.default) {\n    return blot.value().slice(index, index + length);\n  } else if (blot.children) {\n    // TODO fix API\n    if (blot.statics.blotName === 'list-container') {\n      const items = [];\n      blot.children.forEachAt(index, length, (child, offset, childLength) => {\n        const formats = child.formats();\n        items.push({\n          child,\n          offset,\n          length: childLength,\n          indent: formats.indent || 0,\n          type: formats.list\n        });\n      });\n      return convertListHTML(items, -1, []);\n    }\n    const parts = [];\n    blot.children.forEachAt(index, length, (child, offset, childLength) => {\n      parts.push(convertHTML(child, offset, childLength));\n    });\n    if (isRoot || blot.statics.blotName === 'list') {\n      return parts.join('');\n    }\n    var _blot$domNode = blot.domNode;\n    const outerHTML = _blot$domNode.outerHTML,\n          innerHTML = _blot$domNode.innerHTML;\n\n    var _outerHTML$split = outerHTML.split(`>${innerHTML}<`),\n        _outerHTML$split2 = _slicedToArray(_outerHTML$split, 2);\n\n    const start = _outerHTML$split2[0],\n          end = _outerHTML$split2[1];\n\n    return `${start}>${parts.join('')}<${end}`;\n  }\n  return blot.domNode.outerHTML;\n}\n\nfunction combineFormats(formats, combined) {\n  return Object.keys(combined).reduce((merged, name) => {\n    if (formats[name] == null) return merged;\n    if (combined[name] === formats[name]) {\n      merged[name] = combined[name];\n    } else if (Array.isArray(combined[name])) {\n      if (combined[name].indexOf(formats[name]) < 0) {\n        merged[name] = combined[name].concat([formats[name]]);\n      }\n    } else {\n      merged[name] = [combined[name], formats[name]];\n    }\n    return merged;\n  }, {});\n}\n\nfunction getListType(type) {\n  const tag = type === 'ordered' ? 'ol' : 'ul';\n  switch (type) {\n    case 'checked':\n      return [tag, ' data-list=\"checked\"'];\n    case 'unchecked':\n      return [tag, ' data-list=\"unchecked\"'];\n    default:\n      return [tag, ''];\n  }\n}\n\nfunction normalizeDelta(delta) {\n  return delta.reduce((normalizedDelta, op) => {\n    if (typeof op.insert === 'string') {\n      const text = op.insert.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n      return normalizedDelta.insert(text, op.attributes);\n    }\n    return normalizedDelta.push(op);\n  }, new _quillDelta2.default());\n}\n\nexports.default = Editor;\n\n//# sourceURL=webpack://Quill/./core/editor.js?");

	/***/ }),

	/***/ "./core/emitter.js":
	/*!*************************!*\
	  !*** ./core/emitter.js ***!
	  \*************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _eventemitter = __webpack_require__(/*! eventemitter3 */ \"./node_modules/eventemitter3/index.js\");\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nvar _instances = __webpack_require__(/*! ./instances */ \"./core/instances.js\");\n\nvar _instances2 = _interopRequireDefault(_instances);\n\nvar _logger = __webpack_require__(/*! ./logger */ \"./core/logger.js\");\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst debug = (0, _logger2.default)('quill:events');\nconst EVENTS = ['selectionchange', 'mousedown', 'mouseup', 'click'];\n\nEVENTS.forEach(eventName => {\n  document.addEventListener(eventName, (...args) => {\n    Array.from(document.querySelectorAll('.ql-container')).forEach(node => {\n      const quill = _instances2.default.get(node);\n      if (quill && quill.emitter) {\n        quill.emitter.handleDOM(...args);\n      }\n    });\n  });\n});\n\nclass Emitter extends _eventemitter2.default {\n  constructor() {\n    super();\n    this.listeners = {};\n    this.on('error', debug.error);\n  }\n\n  emit(...args) {\n    debug.log.call(debug, ...args);\n    super.emit(...args);\n  }\n\n  handleDOM(event, ...args) {\n    (this.listeners[event.type] || []).forEach(({ node, handler }) => {\n      if (event.target === node || node.contains(event.target)) {\n        handler(event, ...args);\n      }\n    });\n  }\n\n  listenDOM(eventName, node, handler) {\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = [];\n    }\n    this.listeners[eventName].push({ node, handler });\n  }\n}\n\nEmitter.events = {\n  EDITOR_CHANGE: 'editor-change',\n  SCROLL_BEFORE_UPDATE: 'scroll-before-update',\n  SCROLL_BLOT_MOUNT: 'scroll-blot-mount',\n  SCROLL_BLOT_UNMOUNT: 'scroll-blot-unmount',\n  SCROLL_OPTIMIZE: 'scroll-optimize',\n  SCROLL_UPDATE: 'scroll-update',\n  SELECTION_CHANGE: 'selection-change',\n  TEXT_CHANGE: 'text-change'\n};\nEmitter.sources = {\n  API: 'api',\n  SILENT: 'silent',\n  USER: 'user'\n};\n\nexports.default = Emitter;\n\n//# sourceURL=webpack://Quill/./core/emitter.js?");

	/***/ }),

	/***/ "./core/instances.js":
	/*!***************************!*\
	  !*** ./core/instances.js ***!
	  \***************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = new WeakMap();\n\n//# sourceURL=webpack://Quill/./core/instances.js?");

	/***/ }),

	/***/ "./core/logger.js":
	/*!************************!*\
	  !*** ./core/logger.js ***!
	  \************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst levels = ['error', 'warn', 'log', 'info'];\nlet level = 'warn';\n\nfunction debug(method, ...args) {\n  if (levels.indexOf(method) <= levels.indexOf(level)) {\n    console[method](...args); // eslint-disable-line no-console\n  }\n}\n\nfunction namespace(ns) {\n  return levels.reduce((logger, method) => {\n    logger[method] = debug.bind(console, method, ns);\n    return logger;\n  }, {});\n}\n\nnamespace.level = newLevel => {\n  level = newLevel;\n};\ndebug.level = namespace.level;\n\nexports.default = namespace;\n\n//# sourceURL=webpack://Quill/./core/logger.js?");

	/***/ }),

	/***/ "./core/module.js":
	/*!************************!*\
	  !*** ./core/module.js ***!
	  \************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nclass Module {\n  constructor(quill, options = {}) {\n    this.quill = quill;\n    this.options = options;\n  }\n}\nModule.DEFAULTS = {};\n\nexports.default = Module;\n\n//# sourceURL=webpack://Quill/./core/module.js?");

	/***/ }),

	/***/ "./core/quill.js":
	/*!***********************!*\
	  !*** ./core/quill.js ***!
	  \***********************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.overload = exports.expandConfig = exports.globalRegistry = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _quillDelta = __webpack_require__(/*! quill-delta */ \"./node_modules/quill-delta/lib/delta.js\");\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nvar Parchment = _interopRequireWildcard(_parchment);\n\nvar _extend = __webpack_require__(/*! extend */ \"./node_modules/extend/index.js\");\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _editor = __webpack_require__(/*! ./editor */ \"./core/editor.js\");\n\nvar _editor2 = _interopRequireDefault(_editor);\n\nvar _emitter = __webpack_require__(/*! ./emitter */ \"./core/emitter.js\");\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nvar _module = __webpack_require__(/*! ./module */ \"./core/module.js\");\n\nvar _module2 = _interopRequireDefault(_module);\n\nvar _selection = __webpack_require__(/*! ./selection */ \"./core/selection.js\");\n\nvar _selection2 = _interopRequireDefault(_selection);\n\nvar _instances = __webpack_require__(/*! ./instances */ \"./core/instances.js\");\n\nvar _instances2 = _interopRequireDefault(_instances);\n\nvar _logger = __webpack_require__(/*! ./logger */ \"./core/logger.js\");\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _theme = __webpack_require__(/*! ./theme */ \"./core/theme.js\");\n\nvar _theme2 = _interopRequireDefault(_theme);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst debug = (0, _logger2.default)('quill');\n\nconst globalRegistry = new Parchment.Registry();\n\nclass Quill {\n  static debug(limit) {\n    if (limit === true) {\n      limit = 'log';\n    }\n    _logger2.default.level(limit);\n  }\n\n  static find(node) {\n    return _instances2.default.get(node) || globalRegistry.find(node);\n  }\n\n  static import(name) {\n    if (this.imports[name] == null) {\n      debug.error(`Cannot import ${name}. Are you sure it was registered?`);\n    }\n    return this.imports[name];\n  }\n\n  static register(path, target, overwrite = false) {\n    if (typeof path !== 'string') {\n      const name = path.attrName || path.blotName;\n      if (typeof name === 'string') {\n        // register(Blot | Attributor, overwrite)\n        this.register(`formats/${name}`, path, target);\n      } else {\n        Object.keys(path).forEach(key => {\n          this.register(key, path[key], target);\n        });\n      }\n    } else {\n      if (this.imports[path] != null && !overwrite) {\n        debug.warn(`Overwriting ${path} with`, target);\n      }\n      this.imports[path] = target;\n      if ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {\n        globalRegistry.register(target);\n      }\n      if (typeof target.register === 'function') {\n        target.register(globalRegistry);\n      }\n    }\n  }\n\n  constructor(container, options = {}) {\n    this.options = expandConfig(container, options);\n    this.container = this.options.container;\n    if (this.container == null) {\n      return debug.error('Invalid Quill container', container);\n    }\n    if (this.options.debug) {\n      Quill.debug(this.options.debug);\n    }\n    const html = this.container.innerHTML.trim();\n    this.container.classList.add('ql-container');\n    this.container.innerHTML = '';\n    _instances2.default.set(this.container, this);\n    this.root = this.addContainer('ql-editor');\n    this.root.addEventListener('dragstart', e => {\n      e.preventDefault();\n    });\n    this.root.classList.add('ql-blank');\n    this.root.setAttribute('data-gramm', false);\n    this.scrollingContainer = this.options.scrollingContainer || this.root;\n    this.emitter = new _emitter2.default();\n    const ScrollBlot = this.options.registry.query(Parchment.ScrollBlot.blotName);\n    this.scroll = new ScrollBlot(this.options.registry, this.root, {\n      emitter: this.emitter\n    });\n    this.editor = new _editor2.default(this.scroll);\n    this.selection = new _selection2.default(this.scroll, this.emitter);\n    this.theme = new this.options.theme(this, this.options); // eslint-disable-line new-cap\n    this.keyboard = this.theme.addModule('keyboard');\n    this.clipboard = this.theme.addModule('clipboard');\n    this.history = this.theme.addModule('history');\n    this.uploader = this.theme.addModule('uploader');\n    this.theme.init();\n    this.emitter.on(_emitter2.default.events.EDITOR_CHANGE, type => {\n      if (type === _emitter2.default.events.TEXT_CHANGE) {\n        this.root.classList.toggle('ql-blank', this.editor.isBlank());\n      }\n    });\n    this.emitter.on(_emitter2.default.events.SCROLL_UPDATE, (source, mutations) => {\n      const range = this.selection.lastRange;\n      const index = range && range.length === 0 ? range.index : undefined;\n      modify.call(this, () => this.editor.update(null, mutations, index), source);\n    });\n    const contents = this.clipboard.convert({\n      html: `${html}<p><br></p>`,\n      text: '\\n'\n    });\n    this.setContents(contents);\n    this.history.clear();\n    if (this.options.placeholder) {\n      this.root.setAttribute('data-placeholder', this.options.placeholder);\n    }\n    if (this.options.readOnly) {\n      this.disable();\n    }\n  }\n\n  addContainer(container, refNode = null) {\n    if (typeof container === 'string') {\n      const className = container;\n      container = document.createElement('div');\n      container.classList.add(className);\n    }\n    this.container.insertBefore(container, refNode);\n    return container;\n  }\n\n  blur() {\n    this.selection.setRange(null);\n  }\n\n  deleteText(index, length, source) {\n    var _overload = overload(index, length, source);\n\n    var _overload2 = _slicedToArray(_overload, 4);\n\n    index = _overload2[0];\n    length = _overload2[1];\n    source = _overload2[3];\n\n    return modify.call(this, () => {\n      return this.editor.deleteText(index, length);\n    }, source, index, -1 * length);\n  }\n\n  disable() {\n    this.enable(false);\n  }\n\n  enable(enabled = true) {\n    this.scroll.enable(enabled);\n    this.container.classList.toggle('ql-disabled', !enabled);\n  }\n\n  focus() {\n    const scrollTop = this.scrollingContainer.scrollTop;\n\n    this.selection.focus();\n    this.scrollingContainer.scrollTop = scrollTop;\n    this.scrollIntoView();\n  }\n\n  format(name, value, source = _emitter2.default.sources.API) {\n    return modify.call(this, () => {\n      const range = this.getSelection(true);\n      let change = new _quillDelta2.default();\n      if (range == null) {\n        return change;\n      } else if (this.scroll.query(name, Parchment.Scope.BLOCK)) {\n        change = this.editor.formatLine(range.index, range.length, {\n          [name]: value\n        });\n      } else if (range.length === 0) {\n        this.selection.format(name, value);\n        return change;\n      } else {\n        change = this.editor.formatText(range.index, range.length, {\n          [name]: value\n        });\n      }\n      this.setSelection(range, _emitter2.default.sources.SILENT);\n      return change;\n    }, source);\n  }\n\n  formatLine(index, length, name, value, source) {\n    let formats;\n    // eslint-disable-next-line prefer-const\n\n    var _overload3 = overload(index, length, name, value, source);\n\n    var _overload4 = _slicedToArray(_overload3, 4);\n\n    index = _overload4[0];\n    length = _overload4[1];\n    formats = _overload4[2];\n    source = _overload4[3];\n\n    return modify.call(this, () => {\n      return this.editor.formatLine(index, length, formats);\n    }, source, index, 0);\n  }\n\n  formatText(index, length, name, value, source) {\n    let formats;\n    // eslint-disable-next-line prefer-const\n\n    var _overload5 = overload(index, length, name, value, source);\n\n    var _overload6 = _slicedToArray(_overload5, 4);\n\n    index = _overload6[0];\n    length = _overload6[1];\n    formats = _overload6[2];\n    source = _overload6[3];\n\n    return modify.call(this, () => {\n      return this.editor.formatText(index, length, formats);\n    }, source, index, 0);\n  }\n\n  getBounds(index, length = 0) {\n    let bounds;\n    if (typeof index === 'number') {\n      bounds = this.selection.getBounds(index, length);\n    } else {\n      bounds = this.selection.getBounds(index.index, index.length);\n    }\n    const containerBounds = this.container.getBoundingClientRect();\n    return {\n      bottom: bounds.bottom - containerBounds.top,\n      height: bounds.height,\n      left: bounds.left - containerBounds.left,\n      right: bounds.right - containerBounds.left,\n      top: bounds.top - containerBounds.top,\n      width: bounds.width\n    };\n  }\n\n  getContents(index = 0, length = this.getLength() - index) {\n    var _overload7 = overload(index, length);\n\n    var _overload8 = _slicedToArray(_overload7, 2);\n\n    index = _overload8[0];\n    length = _overload8[1];\n\n    return this.editor.getContents(index, length);\n  }\n\n  getFormat(index = this.getSelection(true), length = 0) {\n    if (typeof index === 'number') {\n      return this.editor.getFormat(index, length);\n    }\n    return this.editor.getFormat(index.index, index.length);\n  }\n\n  getIndex(blot) {\n    return blot.offset(this.scroll);\n  }\n\n  getLength() {\n    return this.scroll.length();\n  }\n\n  getLeaf(index) {\n    return this.scroll.leaf(index);\n  }\n\n  getLine(index) {\n    return this.scroll.line(index);\n  }\n\n  getLines(index = 0, length = Number.MAX_VALUE) {\n    if (typeof index !== 'number') {\n      return this.scroll.lines(index.index, index.length);\n    }\n    return this.scroll.lines(index, length);\n  }\n\n  getModule(name) {\n    return this.theme.modules[name];\n  }\n\n  getSelection(focus = false) {\n    if (focus) this.focus();\n    this.update(); // Make sure we access getRange with editor in consistent state\n    return this.selection.getRange()[0];\n  }\n\n  getSemanticHTML(index = 0, length = this.getLength() - index) {\n    var _overload9 = overload(index, length);\n\n    var _overload10 = _slicedToArray(_overload9, 2);\n\n    index = _overload10[0];\n    length = _overload10[1];\n\n    return this.editor.getHTML(index, length);\n  }\n\n  getText(index = 0, length = this.getLength() - index) {\n    var _overload11 = overload(index, length);\n\n    var _overload12 = _slicedToArray(_overload11, 2);\n\n    index = _overload12[0];\n    length = _overload12[1];\n\n    return this.editor.getText(index, length);\n  }\n\n  hasFocus() {\n    return this.selection.hasFocus();\n  }\n\n  insertEmbed(index, embed, value, source = Quill.sources.API) {\n    return modify.call(this, () => {\n      return this.editor.insertEmbed(index, embed, value);\n    }, source, index);\n  }\n\n  insertText(index, text, name, value, source) {\n    let formats;\n    // eslint-disable-next-line prefer-const\n\n    var _overload13 = overload(index, 0, name, value, source);\n\n    var _overload14 = _slicedToArray(_overload13, 4);\n\n    index = _overload14[0];\n    formats = _overload14[2];\n    source = _overload14[3];\n\n    return modify.call(this, () => {\n      return this.editor.insertText(index, text, formats);\n    }, source, index, text.length);\n  }\n\n  isEnabled() {\n    return !this.container.classList.contains('ql-disabled');\n  }\n\n  off(...args) {\n    return this.emitter.off(...args);\n  }\n\n  on(...args) {\n    return this.emitter.on(...args);\n  }\n\n  once(...args) {\n    return this.emitter.once(...args);\n  }\n\n  removeFormat(index, length, source) {\n    var _overload15 = overload(index, length, source);\n\n    var _overload16 = _slicedToArray(_overload15, 4);\n\n    index = _overload16[0];\n    length = _overload16[1];\n    source = _overload16[3];\n\n    return modify.call(this, () => {\n      return this.editor.removeFormat(index, length);\n    }, source, index);\n  }\n\n  scrollIntoView() {\n    this.selection.scrollIntoView(this.scrollingContainer);\n  }\n\n  setContents(delta, source = _emitter2.default.sources.API) {\n    return modify.call(this, () => {\n      delta = new _quillDelta2.default(delta);\n      const length = this.getLength();\n      const deleted = this.editor.deleteText(0, length);\n      const applied = this.editor.applyDelta(delta);\n      const lastOp = applied.ops[applied.ops.length - 1];\n      if (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\\n') {\n        this.editor.deleteText(this.getLength() - 1, 1);\n        applied.delete(1);\n      }\n      return deleted.compose(applied);\n    }, source);\n  }\n\n  setSelection(index, length, source) {\n    if (index == null) {\n      this.selection.setRange(null, length || Quill.sources.API);\n    } else {\n      var _overload17 = overload(index, length, source);\n\n      var _overload18 = _slicedToArray(_overload17, 4);\n\n      index = _overload18[0];\n      length = _overload18[1];\n      source = _overload18[3];\n\n      this.selection.setRange(new _selection.Range(Math.max(0, index), length), source);\n      if (source !== _emitter2.default.sources.SILENT) {\n        this.selection.scrollIntoView(this.scrollingContainer);\n      }\n    }\n  }\n\n  setText(text, source = _emitter2.default.sources.API) {\n    const delta = new _quillDelta2.default().insert(text);\n    return this.setContents(delta, source);\n  }\n\n  update(source = _emitter2.default.sources.USER) {\n    const change = this.scroll.update(source); // Will update selection before selection.update() does if text changes\n    this.selection.update(source);\n    // TODO this is usually undefined\n    return change;\n  }\n\n  updateContents(delta, source = _emitter2.default.sources.API) {\n    return modify.call(this, () => {\n      delta = new _quillDelta2.default(delta);\n      return this.editor.applyDelta(delta, source);\n    }, source, true);\n  }\n}\nQuill.DEFAULTS = {\n  bounds: null,\n  modules: {},\n  placeholder: '',\n  readOnly: false,\n  registry: globalRegistry,\n  scrollingContainer: null,\n  theme: 'default'\n};\nQuill.events = _emitter2.default.events;\nQuill.sources = _emitter2.default.sources;\n// eslint-disable-next-line no-undef\nQuill.version =  false ? undefined : \"2.0.0-dev.2\";\n\nQuill.imports = {\n  delta: _quillDelta2.default,\n  parchment: Parchment,\n  'core/module': _module2.default,\n  'core/theme': _theme2.default\n};\n\nfunction expandConfig(container, userConfig) {\n  userConfig = (0, _extend2.default)(true, {\n    container,\n    modules: {\n      clipboard: true,\n      keyboard: true,\n      history: true,\n      uploader: true\n    }\n  }, userConfig);\n  if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {\n    userConfig.theme = _theme2.default;\n  } else {\n    userConfig.theme = Quill.import(`themes/${userConfig.theme}`);\n    if (userConfig.theme == null) {\n      throw new Error(`Invalid theme ${userConfig.theme}. Did you register it?`);\n    }\n  }\n  const themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);\n  [themeConfig, userConfig].forEach(config => {\n    config.modules = config.modules || {};\n    Object.keys(config.modules).forEach(module => {\n      if (config.modules[module] === true) {\n        config.modules[module] = {};\n      }\n    });\n  });\n  const moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));\n  const moduleConfig = moduleNames.reduce((config, name) => {\n    const moduleClass = Quill.import(`modules/${name}`);\n    if (moduleClass == null) {\n      debug.error(`Cannot load ${name} module. Are you sure you registered it?`);\n    } else {\n      config[name] = moduleClass.DEFAULTS || {};\n    }\n    return config;\n  }, {});\n  // Special case toolbar shorthand\n  if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {\n    userConfig.modules.toolbar = {\n      container: userConfig.modules.toolbar\n    };\n  }\n  userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, { modules: moduleConfig }, themeConfig, userConfig);\n  ['bounds', 'container', 'scrollingContainer'].forEach(key => {\n    if (typeof userConfig[key] === 'string') {\n      userConfig[key] = document.querySelector(userConfig[key]);\n    }\n  });\n  userConfig.modules = Object.keys(userConfig.modules).reduce((config, name) => {\n    if (userConfig.modules[name]) {\n      config[name] = userConfig.modules[name];\n    }\n    return config;\n  }, {});\n  return userConfig;\n}\n\n// Handle selection preservation and TEXT_CHANGE emission\n// common to modification APIs\nfunction modify(modifier, source, index, shift) {\n  if (!this.isEnabled() && source === _emitter2.default.sources.USER) {\n    return new _quillDelta2.default();\n  }\n  let range = index == null ? null : this.getSelection();\n  const oldDelta = this.editor.delta;\n  const change = modifier();\n  if (range != null) {\n    if (index === true) {\n      index = range.index; // eslint-disable-line prefer-destructuring\n    }\n    if (shift == null) {\n      range = shiftRange(range, change, source);\n    } else if (shift !== 0) {\n      range = shiftRange(range, index, shift, source);\n    }\n    this.setSelection(range, _emitter2.default.sources.SILENT);\n  }\n  if (change.length() > 0) {\n    const args = [_emitter2.default.events.TEXT_CHANGE, change, oldDelta, source];\n    this.emitter.emit(_emitter2.default.events.EDITOR_CHANGE, ...args);\n    if (source !== _emitter2.default.sources.SILENT) {\n      this.emitter.emit(...args);\n    }\n  }\n  return change;\n}\n\nfunction overload(index, length, name, value, source) {\n  let formats = {};\n  if (typeof index.index === 'number' && typeof index.length === 'number') {\n    // Allow for throwaway end (used by insertText/insertEmbed)\n    if (typeof length !== 'number') {\n      source = value;\n      value = name;\n      name = length;\n      length = index.length; // eslint-disable-line prefer-destructuring\n      index = index.index; // eslint-disable-line prefer-destructuring\n    } else {\n      length = index.length; // eslint-disable-line prefer-destructuring\n      index = index.index; // eslint-disable-line prefer-destructuring\n    }\n  } else if (typeof length !== 'number') {\n    source = value;\n    value = name;\n    name = length;\n    length = 0;\n  }\n  // Handle format being object, two format name/value strings or excluded\n  if (typeof name === 'object') {\n    formats = name;\n    source = value;\n  } else if (typeof name === 'string') {\n    if (value != null) {\n      formats[name] = value;\n    } else {\n      source = name;\n    }\n  }\n  // Handle optional source\n  source = source || _emitter2.default.sources.API;\n  return [index, length, formats, source];\n}\n\nfunction shiftRange(range, index, length, source) {\n  if (range == null) return null;\n  let start;\n  let end;\n  if (index instanceof _quillDelta2.default) {\n    var _map = [range.index, range.index + range.length].map(pos => index.transformPosition(pos, source !== _emitter2.default.sources.USER));\n\n    var _map2 = _slicedToArray(_map, 2);\n\n    start = _map2[0];\n    end = _map2[1];\n  } else {\n    var _map3 = [range.index, range.index + range.length].map(pos => {\n      if (pos < index || pos === index && source === _emitter2.default.sources.USER) return pos;\n      if (length >= 0) {\n        return pos + length;\n      }\n      return Math.max(index, pos + length);\n    });\n\n    var _map4 = _slicedToArray(_map3, 2);\n\n    start = _map4[0];\n    end = _map4[1];\n  }\n  return new _selection.Range(start, end - start);\n}\n\nexports.globalRegistry = globalRegistry;\nexports.expandConfig = expandConfig;\nexports.overload = overload;\nexports.default = Quill;\n\n//# sourceURL=webpack://Quill/./core/quill.js?");

	/***/ }),

	/***/ "./core/selection.js":
	/*!***************************!*\
	  !*** ./core/selection.js ***!
	  \***************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Range = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nvar _clone = __webpack_require__(/*! clone */ \"./node_modules/clone/clone.js\");\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _deepEqual = __webpack_require__(/*! deep-equal */ \"./node_modules/deep-equal/index.js\");\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _emitter = __webpack_require__(/*! ./emitter */ \"./core/emitter.js\");\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nvar _logger = __webpack_require__(/*! ./logger */ \"./core/logger.js\");\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst debug = (0, _logger2.default)('quill:selection');\n\nclass Range {\n  constructor(index, length = 0) {\n    this.index = index;\n    this.length = length;\n  }\n}\n\nclass Selection {\n  constructor(scroll, emitter) {\n    this.emitter = emitter;\n    this.scroll = scroll;\n    this.composing = false;\n    this.mouseDown = false;\n    this.root = this.scroll.domNode;\n    this.cursor = this.scroll.create('cursor', this);\n    // savedRange is last non-null range\n    this.savedRange = new Range(0, 0);\n    this.lastRange = this.savedRange;\n    this.handleComposition();\n    this.handleDragging();\n    this.emitter.listenDOM('selectionchange', document, () => {\n      if (!this.mouseDown) {\n        setTimeout(this.update.bind(this, _emitter2.default.sources.USER), 1);\n      }\n    });\n    this.emitter.on(_emitter2.default.events.SCROLL_BEFORE_UPDATE, () => {\n      if (!this.hasFocus()) return;\n      const native = this.getNativeRange();\n      if (native == null) return;\n      if (native.start.node === this.cursor.textNode) return; // cursor.restore() will handle\n      this.emitter.once(_emitter2.default.events.SCROLL_UPDATE, () => {\n        try {\n          this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);\n          this.update(_emitter2.default.sources.SILENT);\n        } catch (ignored) {\n          // ignore\n        }\n      });\n    });\n    this.emitter.on(_emitter2.default.events.SCROLL_OPTIMIZE, (mutations, context) => {\n      if (context.range) {\n        var _context$range = context.range;\n        const startNode = _context$range.startNode,\n              startOffset = _context$range.startOffset,\n              endNode = _context$range.endNode,\n              endOffset = _context$range.endOffset;\n\n        this.setNativeRange(startNode, startOffset, endNode, endOffset);\n        this.update(_emitter2.default.sources.SILENT);\n      }\n    });\n    this.update(_emitter2.default.sources.SILENT);\n  }\n\n  handleComposition() {\n    this.root.addEventListener('compositionstart', () => {\n      this.composing = true;\n    });\n    this.root.addEventListener('compositionend', () => {\n      this.composing = false;\n      if (this.cursor.parent) {\n        const range = this.cursor.restore();\n        if (!range) return;\n        setTimeout(() => {\n          this.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);\n        }, 1);\n      }\n    });\n  }\n\n  handleDragging() {\n    this.emitter.listenDOM('mousedown', document.body, () => {\n      this.mouseDown = true;\n    });\n    this.emitter.listenDOM('mouseup', document.body, () => {\n      this.mouseDown = false;\n      this.update(_emitter2.default.sources.USER);\n    });\n  }\n\n  focus() {\n    if (this.hasFocus()) return;\n    this.root.focus();\n    this.setRange(this.savedRange);\n  }\n\n  format(format, value) {\n    this.scroll.update();\n    const nativeRange = this.getNativeRange();\n    if (nativeRange == null || !nativeRange.native.collapsed || this.scroll.query(format, _parchment.Scope.BLOCK)) return;\n    if (nativeRange.start.node !== this.cursor.textNode) {\n      const blot = this.scroll.find(nativeRange.start.node, false);\n      if (blot == null) return;\n      // TODO Give blot ability to not split\n      if (blot instanceof _parchment.LeafBlot) {\n        const after = blot.split(nativeRange.start.offset);\n        blot.parent.insertBefore(this.cursor, after);\n      } else {\n        blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen\n      }\n      this.cursor.attach();\n    }\n    this.cursor.format(format, value);\n    this.scroll.optimize();\n    this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);\n    this.update();\n  }\n\n  getBounds(index, length = 0) {\n    const scrollLength = this.scroll.length();\n    index = Math.min(index, scrollLength - 1);\n    length = Math.min(index + length, scrollLength - 1) - index;\n    let node;\n\n    var _scroll$leaf = this.scroll.leaf(index),\n        _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2);\n\n    let leaf = _scroll$leaf2[0],\n        offset = _scroll$leaf2[1];\n\n    if (leaf == null) return null;\n\n    var _leaf$position = leaf.position(offset, true);\n\n    var _leaf$position2 = _slicedToArray(_leaf$position, 2);\n\n    node = _leaf$position2[0];\n    offset = _leaf$position2[1];\n\n    const range = document.createRange();\n    if (length > 0) {\n      range.setStart(node, offset);\n\n      var _scroll$leaf3 = this.scroll.leaf(index + length);\n\n      var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);\n\n      leaf = _scroll$leaf4[0];\n      offset = _scroll$leaf4[1];\n\n      if (leaf == null) return null;\n\n      var _leaf$position3 = leaf.position(offset, true);\n\n      var _leaf$position4 = _slicedToArray(_leaf$position3, 2);\n\n      node = _leaf$position4[0];\n      offset = _leaf$position4[1];\n\n      range.setEnd(node, offset);\n      return range.getBoundingClientRect();\n    }\n    let side = 'left';\n    let rect;\n    if (node instanceof Text) {\n      if (offset < node.data.length) {\n        range.setStart(node, offset);\n        range.setEnd(node, offset + 1);\n      } else {\n        range.setStart(node, offset - 1);\n        range.setEnd(node, offset);\n        side = 'right';\n      }\n      rect = range.getBoundingClientRect();\n    } else {\n      rect = leaf.domNode.getBoundingClientRect();\n      if (offset > 0) side = 'right';\n    }\n    return {\n      bottom: rect.top + rect.height,\n      height: rect.height,\n      left: rect[side],\n      right: rect[side],\n      top: rect.top,\n      width: 0\n    };\n  }\n\n  getNativeRange() {\n    const selection = document.getSelection();\n    if (selection == null || selection.rangeCount <= 0) return null;\n    const nativeRange = selection.getRangeAt(0);\n    if (nativeRange == null) return null;\n    const range = this.normalizeNative(nativeRange);\n    debug.info('getNativeRange', range);\n    return range;\n  }\n\n  getRange() {\n    const normalized = this.getNativeRange();\n    if (normalized == null) return [null, null];\n    const range = this.normalizedToRange(normalized);\n    return [range, normalized];\n  }\n\n  hasFocus() {\n    return document.activeElement === this.root || contains(this.root, document.activeElement);\n  }\n\n  normalizedToRange(range) {\n    const positions = [[range.start.node, range.start.offset]];\n    if (!range.native.collapsed) {\n      positions.push([range.end.node, range.end.offset]);\n    }\n    const indexes = positions.map(position => {\n      var _position = _slicedToArray(position, 2);\n\n      const node = _position[0],\n            offset = _position[1];\n\n      const blot = this.scroll.find(node, true);\n      const index = blot.offset(this.scroll);\n      if (offset === 0) {\n        return index;\n      } else if (blot instanceof _parchment.ContainerBlot) {\n        return index + blot.length();\n      }\n      return index + blot.index(node, offset);\n    });\n    const end = Math.min(Math.max(...indexes), this.scroll.length() - 1);\n    const start = Math.min(end, ...indexes);\n    return new Range(start, end - start);\n  }\n\n  normalizeNative(nativeRange) {\n    if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {\n      return null;\n    }\n    const range = {\n      start: {\n        node: nativeRange.startContainer,\n        offset: nativeRange.startOffset\n      },\n      end: { node: nativeRange.endContainer, offset: nativeRange.endOffset },\n      native: nativeRange\n    };\n    [range.start, range.end].forEach(position => {\n      let node = position.node,\n          offset = position.offset;\n\n      while (!(node instanceof Text) && node.childNodes.length > 0) {\n        if (node.childNodes.length > offset) {\n          node = node.childNodes[offset];\n          offset = 0;\n        } else if (node.childNodes.length === offset) {\n          node = node.lastChild;\n          if (node instanceof Text) {\n            offset = node.data.length;\n          } else if (node.childNodes.length > 0) {\n            // Container case\n            offset = node.childNodes.length;\n          } else {\n            // Embed case\n            offset = node.childNodes.length + 1;\n          }\n        } else {\n          break;\n        }\n      }\n      position.node = node;\n      position.offset = offset;\n    });\n    return range;\n  }\n\n  rangeToNative(range) {\n    const indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];\n    const args = [];\n    const scrollLength = this.scroll.length();\n    indexes.forEach((index, i) => {\n      index = Math.min(scrollLength - 1, index);\n\n      var _scroll$leaf5 = this.scroll.leaf(index),\n          _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2);\n\n      const leaf = _scroll$leaf6[0],\n            leafOffset = _scroll$leaf6[1];\n\n      var _leaf$position5 = leaf.position(leafOffset, i !== 0),\n          _leaf$position6 = _slicedToArray(_leaf$position5, 2);\n\n      const node = _leaf$position6[0],\n            offset = _leaf$position6[1];\n\n      args.push(node, offset);\n    });\n    if (args.length < 2) {\n      return args.concat(args);\n    }\n    return args;\n  }\n\n  scrollIntoView(scrollingContainer) {\n    const range = this.lastRange;\n    if (range == null) return;\n    const bounds = this.getBounds(range.index, range.length);\n    if (bounds == null) return;\n    const limit = this.scroll.length() - 1;\n\n    var _scroll$line = this.scroll.line(Math.min(range.index, limit)),\n        _scroll$line2 = _slicedToArray(_scroll$line, 1);\n\n    const first = _scroll$line2[0];\n\n    let last = first;\n    if (range.length > 0) {\n      var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));\n\n      var _scroll$line4 = _slicedToArray(_scroll$line3, 1);\n\n      last = _scroll$line4[0];\n    }\n    if (first == null || last == null) return;\n    const scrollBounds = scrollingContainer.getBoundingClientRect();\n    if (bounds.top < scrollBounds.top) {\n      scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;\n    } else if (bounds.bottom > scrollBounds.bottom) {\n      scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;\n    }\n  }\n\n  setNativeRange(startNode, startOffset, endNode = startNode, endOffset = startOffset, force = false) {\n    debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);\n    if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {\n      return;\n    }\n    const selection = document.getSelection();\n    if (selection == null) return;\n    if (startNode != null) {\n      if (!this.hasFocus()) this.root.focus();\n\n      var _ref = this.getNativeRange() || {};\n\n      const native = _ref.native;\n\n      if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {\n        if (startNode.tagName === 'BR') {\n          startOffset = Array.from(startNode.parentNode.childNodes).indexOf(startNode);\n          startNode = startNode.parentNode;\n        }\n        if (endNode.tagName === 'BR') {\n          endOffset = Array.from(endNode.parentNode.childNodes).indexOf(endNode);\n          endNode = endNode.parentNode;\n        }\n        const range = document.createRange();\n        range.setStart(startNode, startOffset);\n        range.setEnd(endNode, endOffset);\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n    } else {\n      selection.removeAllRanges();\n      this.root.blur();\n    }\n  }\n\n  setRange(range, force = false, source = _emitter2.default.sources.API) {\n    if (typeof force === 'string') {\n      source = force;\n      force = false;\n    }\n    debug.info('setRange', range);\n    if (range != null) {\n      const args = this.rangeToNative(range);\n      this.setNativeRange(...args, force);\n    } else {\n      this.setNativeRange(null);\n    }\n    this.update(source);\n  }\n\n  update(source = _emitter2.default.sources.USER) {\n    const oldRange = this.lastRange;\n\n    var _getRange = this.getRange(),\n        _getRange2 = _slicedToArray(_getRange, 2);\n\n    const lastRange = _getRange2[0],\n          nativeRange = _getRange2[1];\n\n    this.lastRange = lastRange;\n    if (this.lastRange != null) {\n      this.savedRange = this.lastRange;\n    }\n    if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {\n      if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {\n        this.cursor.restore();\n      }\n      const args = [_emitter2.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];\n      this.emitter.emit(_emitter2.default.events.EDITOR_CHANGE, ...args);\n      if (source !== _emitter2.default.sources.SILENT) {\n        this.emitter.emit(...args);\n      }\n    }\n  }\n}\n\nfunction contains(parent, descendant) {\n  try {\n    // Firefox inserts inaccessible nodes around video elements\n    descendant.parentNode; // eslint-disable-line no-unused-expressions\n  } catch (e) {\n    return false;\n  }\n  return parent.contains(descendant);\n}\n\nexports.Range = Range;\nexports.default = Selection;\n\n//# sourceURL=webpack://Quill/./core/selection.js?");

	/***/ }),

	/***/ "./core/theme.js":
	/*!***********************!*\
	  !*** ./core/theme.js ***!
	  \***********************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nclass Theme {\n  constructor(quill, options) {\n    this.quill = quill;\n    this.options = options;\n    this.modules = {};\n  }\n\n  init() {\n    Object.keys(this.options.modules).forEach(name => {\n      if (this.modules[name] == null) {\n        this.addModule(name);\n      }\n    });\n  }\n\n  addModule(name) {\n    const ModuleClass = this.quill.constructor.import(`modules/${name}`);\n    this.modules[name] = new ModuleClass(this.quill, this.options.modules[name] || {});\n    return this.modules[name];\n  }\n}\nTheme.DEFAULTS = {\n  modules: {}\n};\nTheme.themes = {\n  default: Theme\n};\n\nexports.default = Theme;\n\n//# sourceURL=webpack://Quill/./core/theme.js?");

	/***/ }),

	/***/ "./formats/align.js":
	/*!**************************!*\
	  !*** ./formats/align.js ***!
	  \**************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AlignStyle = exports.AlignClass = exports.AlignAttribute = undefined;\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nconst config = {\n  scope: _parchment.Scope.BLOCK,\n  whitelist: ['right', 'center', 'justify']\n};\n\nconst AlignAttribute = new _parchment.Attributor('align', 'align', config);\nconst AlignClass = new _parchment.ClassAttributor('align', 'ql-align', config);\nconst AlignStyle = new _parchment.StyleAttributor('align', 'text-align', config);\n\nexports.AlignAttribute = AlignAttribute;\nexports.AlignClass = AlignClass;\nexports.AlignStyle = AlignStyle;\n\n//# sourceURL=webpack://Quill/./formats/align.js?");

	/***/ }),

	/***/ "./formats/background.js":
	/*!*******************************!*\
	  !*** ./formats/background.js ***!
	  \*******************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BackgroundStyle = exports.BackgroundClass = undefined;\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nvar _color = __webpack_require__(/*! ./color */ \"./formats/color.js\");\n\nconst BackgroundClass = new _parchment.ClassAttributor('background', 'ql-bg', {\n  scope: _parchment.Scope.INLINE\n});\nconst BackgroundStyle = new _color.ColorAttributor('background', 'background-color', {\n  scope: _parchment.Scope.INLINE\n});\n\nexports.BackgroundClass = BackgroundClass;\nexports.BackgroundStyle = BackgroundStyle;\n\n//# sourceURL=webpack://Quill/./formats/background.js?");

	/***/ }),

	/***/ "./formats/blockquote.js":
	/*!*******************************!*\
	  !*** ./formats/blockquote.js ***!
	  \*******************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _block = __webpack_require__(/*! ../blots/block */ \"./blots/block.js\");\n\nvar _block2 = _interopRequireDefault(_block);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Blockquote extends _block2.default {}\nBlockquote.blotName = 'blockquote';\nBlockquote.tagName = 'blockquote';\n\nexports.default = Blockquote;\n\n//# sourceURL=webpack://Quill/./formats/blockquote.js?");

	/***/ }),

	/***/ "./formats/bold.js":
	/*!*************************!*\
	  !*** ./formats/bold.js ***!
	  \*************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _inline = __webpack_require__(/*! ../blots/inline */ \"./blots/inline.js\");\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Bold extends _inline2.default {\n  static create() {\n    return super.create();\n  }\n\n  static formats() {\n    return true;\n  }\n\n  optimize(context) {\n    super.optimize(context);\n    if (this.domNode.tagName !== this.statics.tagName[0]) {\n      this.replaceWith(this.statics.blotName);\n    }\n  }\n}\nBold.blotName = 'bold';\nBold.tagName = ['STRONG', 'B'];\n\nexports.default = Bold;\n\n//# sourceURL=webpack://Quill/./formats/bold.js?");

	/***/ }),

	/***/ "./formats/code.js":
	/*!*************************!*\
	  !*** ./formats/code.js ***!
	  \*************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CodeBlockContainer = exports.Code = undefined;\n\nvar _block = __webpack_require__(/*! ../blots/block */ \"./blots/block.js\");\n\nvar _block2 = _interopRequireDefault(_block);\n\nvar _break = __webpack_require__(/*! ../blots/break */ \"./blots/break.js\");\n\nvar _break2 = _interopRequireDefault(_break);\n\nvar _cursor = __webpack_require__(/*! ../blots/cursor */ \"./blots/cursor.js\");\n\nvar _cursor2 = _interopRequireDefault(_cursor);\n\nvar _inline = __webpack_require__(/*! ../blots/inline */ \"./blots/inline.js\");\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nvar _text = __webpack_require__(/*! ../blots/text */ \"./blots/text.js\");\n\nvar _text2 = _interopRequireDefault(_text);\n\nvar _container = __webpack_require__(/*! ../blots/container */ \"./blots/container.js\");\n\nvar _container2 = _interopRequireDefault(_container);\n\nvar _quill = __webpack_require__(/*! ../core/quill */ \"./core/quill.js\");\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass CodeBlockContainer extends _container2.default {\n  static create(value) {\n    const domNode = super.create(value);\n    domNode.setAttribute('spellcheck', false);\n    return domNode;\n  }\n\n  html(index, length) {\n    const html = this.domNode.innerText.slice(index, index + length);\n    return `<pre>${html}</pre>`;\n  }\n}\n\nclass CodeBlock extends _block2.default {\n  static register() {\n    _quill2.default.register(CodeBlockContainer);\n  }\n}\n\nclass Code extends _inline2.default {}\nCode.blotName = 'code';\nCode.tagName = 'CODE';\n\nCodeBlock.blotName = 'code-block';\nCodeBlock.className = 'ql-code-block';\nCodeBlock.tagName = 'DIV';\nCodeBlockContainer.blotName = 'code-block-container';\nCodeBlockContainer.className = 'ql-code-block-container';\nCodeBlockContainer.tagName = 'DIV';\n\nCodeBlockContainer.allowedChildren = [CodeBlock];\n\nCodeBlock.allowedChildren = [_text2.default, _break2.default, _cursor2.default];\nCodeBlock.requiredContainer = CodeBlockContainer;\nCodeBlock.TAB = '  ';\n\nexports.Code = Code;\nexports.CodeBlockContainer = CodeBlockContainer;\nexports.default = CodeBlock;\n\n//# sourceURL=webpack://Quill/./formats/code.js?");

	/***/ }),

	/***/ "./formats/color.js":
	/*!**************************!*\
	  !*** ./formats/color.js ***!
	  \**************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorStyle = exports.ColorClass = exports.ColorAttributor = undefined;\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nclass ColorAttributor extends _parchment.StyleAttributor {\n  value(domNode) {\n    let value = super.value(domNode);\n    if (!value.startsWith('rgb(')) return value;\n    value = value.replace(/^[^\\d]+/, '').replace(/[^\\d]+$/, '');\n    const hex = value.split(',').map(component => `00${parseInt(component, 10).toString(16)}`.slice(-2)).join('');\n    return `#${hex}`;\n  }\n}\n\nconst ColorClass = new _parchment.ClassAttributor('color', 'ql-color', {\n  scope: _parchment.Scope.INLINE\n});\nconst ColorStyle = new ColorAttributor('color', 'color', {\n  scope: _parchment.Scope.INLINE\n});\n\nexports.ColorAttributor = ColorAttributor;\nexports.ColorClass = ColorClass;\nexports.ColorStyle = ColorStyle;\n\n//# sourceURL=webpack://Quill/./formats/color.js?");

	/***/ }),

	/***/ "./formats/direction.js":
	/*!******************************!*\
	  !*** ./formats/direction.js ***!
	  \******************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectionStyle = exports.DirectionClass = exports.DirectionAttribute = undefined;\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nconst config = {\n  scope: _parchment.Scope.BLOCK,\n  whitelist: ['rtl']\n};\n\nconst DirectionAttribute = new _parchment.Attributor('direction', 'dir', config);\nconst DirectionClass = new _parchment.ClassAttributor('direction', 'ql-direction', config);\nconst DirectionStyle = new _parchment.StyleAttributor('direction', 'direction', config);\n\nexports.DirectionAttribute = DirectionAttribute;\nexports.DirectionClass = DirectionClass;\nexports.DirectionStyle = DirectionStyle;\n\n//# sourceURL=webpack://Quill/./formats/direction.js?");

	/***/ }),

	/***/ "./formats/font.js":
	/*!*************************!*\
	  !*** ./formats/font.js ***!
	  \*************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FontClass = exports.FontStyle = undefined;\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nconst config = {\n  scope: _parchment.Scope.INLINE,\n  whitelist: ['serif', 'monospace']\n};\n\nconst FontClass = new _parchment.ClassAttributor('font', 'ql-font', config);\n\nclass FontStyleAttributor extends _parchment.StyleAttributor {\n  value(node) {\n    return super.value(node).replace(/[\"']/g, '');\n  }\n}\n\nconst FontStyle = new FontStyleAttributor('font', 'font-family', config);\n\nexports.FontStyle = FontStyle;\nexports.FontClass = FontClass;\n\n//# sourceURL=webpack://Quill/./formats/font.js?");

	/***/ }),

	/***/ "./formats/formula.js":
	/*!****************************!*\
	  !*** ./formats/formula.js ***!
	  \****************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _embed = __webpack_require__(/*! ../blots/embed */ \"./blots/embed.js\");\n\nvar _embed2 = _interopRequireDefault(_embed);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Formula extends _embed2.default {\n  static create(value) {\n    if (window.katex == null) {\n      throw new Error('Formula module requires KaTeX.');\n    }\n    const node = super.create(value);\n    if (typeof value === 'string') {\n      window.katex.render(value, node, {\n        throwOnError: false,\n        errorColor: '#f00'\n      });\n      node.setAttribute('data-value', value);\n    }\n    return node;\n  }\n\n  static value(domNode) {\n    return domNode.getAttribute('data-value');\n  }\n\n  html() {\n    var _value = this.value();\n\n    const formula = _value.formula;\n\n    return `<span>${formula}</span>`;\n  }\n}\nFormula.blotName = 'formula';\nFormula.className = 'ql-formula';\nFormula.tagName = 'SPAN';\n\nexports.default = Formula;\n\n//# sourceURL=webpack://Quill/./formats/formula.js?");

	/***/ }),

	/***/ "./formats/header.js":
	/*!***************************!*\
	  !*** ./formats/header.js ***!
	  \***************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _block = __webpack_require__(/*! ../blots/block */ \"./blots/block.js\");\n\nvar _block2 = _interopRequireDefault(_block);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Header extends _block2.default {\n  static formats(domNode) {\n    return this.tagName.indexOf(domNode.tagName) + 1;\n  }\n}\nHeader.blotName = 'header';\nHeader.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];\n\nexports.default = Header;\n\n//# sourceURL=webpack://Quill/./formats/header.js?");

	/***/ }),

	/***/ "./formats/image.js":
	/*!**************************!*\
	  !*** ./formats/image.js ***!
	  \**************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nvar _link = __webpack_require__(/*! ../formats/link */ \"./formats/link.js\");\n\nconst ATTRIBUTES = ['alt', 'height', 'width'];\n\nclass Image extends _parchment.EmbedBlot {\n  static create(value) {\n    const node = super.create(value);\n    if (typeof value === 'string') {\n      node.setAttribute('src', this.sanitize(value));\n    }\n    return node;\n  }\n\n  static formats(domNode) {\n    return ATTRIBUTES.reduce((formats, attribute) => {\n      if (domNode.hasAttribute(attribute)) {\n        formats[attribute] = domNode.getAttribute(attribute);\n      }\n      return formats;\n    }, {});\n  }\n\n  static match(url) {\n    return (/\\.(jpe?g|gif|png)$/.test(url) || /^data:image\\/.+;base64/.test(url)\n    );\n  }\n\n  static register() {\n    if (/Firefox/i.test(navigator.userAgent)) {\n      setTimeout(() => {\n        // Disable image resizing in Firefox\n        document.execCommand('enableObjectResizing', false, false);\n      }, 1);\n    }\n  }\n\n  static sanitize(url) {\n    return (0, _link.sanitize)(url, ['http', 'https', 'data']) ? url : '//:0';\n  }\n\n  static value(domNode) {\n    return domNode.getAttribute('src');\n  }\n\n  format(name, value) {\n    if (ATTRIBUTES.indexOf(name) > -1) {\n      if (value) {\n        this.domNode.setAttribute(name, value);\n      } else {\n        this.domNode.removeAttribute(name);\n      }\n    } else {\n      super.format(name, value);\n    }\n  }\n}\nImage.blotName = 'image';\nImage.tagName = 'IMG';\n\nexports.default = Image;\n\n//# sourceURL=webpack://Quill/./formats/image.js?");

	/***/ }),

	/***/ "./formats/indent.js":
	/*!***************************!*\
	  !*** ./formats/indent.js ***!
	  \***************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nclass IndentAttributor extends _parchment.ClassAttributor {\n  add(node, value) {\n    if (value === '+1' || value === '-1') {\n      const indent = this.value(node) || 0;\n      value = value === '+1' ? indent + 1 : indent - 1;\n    }\n    if (value === 0) {\n      this.remove(node);\n      return true;\n    }\n    return super.add(node, value);\n  }\n\n  canAdd(node, value) {\n    return super.canAdd(node, value) || super.canAdd(node, parseInt(value, 10));\n  }\n\n  value(node) {\n    return parseInt(super.value(node), 10) || undefined; // Don't return NaN\n  }\n}\n\nconst IndentClass = new IndentAttributor('indent', 'ql-indent', {\n  scope: _parchment.Scope.BLOCK,\n  whitelist: [1, 2, 3, 4, 5, 6, 7, 8]\n});\n\nexports.default = IndentClass;\n\n//# sourceURL=webpack://Quill/./formats/indent.js?");

	/***/ }),

	/***/ "./formats/italic.js":
	/*!***************************!*\
	  !*** ./formats/italic.js ***!
	  \***************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _bold = __webpack_require__(/*! ./bold */ \"./formats/bold.js\");\n\nvar _bold2 = _interopRequireDefault(_bold);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Italic extends _bold2.default {}\nItalic.blotName = 'italic';\nItalic.tagName = ['EM', 'I'];\n\nexports.default = Italic;\n\n//# sourceURL=webpack://Quill/./formats/italic.js?");

	/***/ }),

	/***/ "./formats/link.js":
	/*!*************************!*\
	  !*** ./formats/link.js ***!
	  \*************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sanitize = exports.default = undefined;\n\nvar _inline = __webpack_require__(/*! ../blots/inline */ \"./blots/inline.js\");\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Link extends _inline2.default {\n  static create(value) {\n    const node = super.create(value);\n    node.setAttribute('href', this.sanitize(value));\n    node.setAttribute('target', '_blank');\n    return node;\n  }\n\n  static formats(domNode) {\n    return domNode.getAttribute('href');\n  }\n\n  static sanitize(url) {\n    return sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;\n  }\n\n  format(name, value) {\n    if (name !== this.statics.blotName || !value) {\n      super.format(name, value);\n    } else {\n      this.domNode.setAttribute('href', this.constructor.sanitize(value));\n    }\n  }\n}\nLink.blotName = 'link';\nLink.tagName = 'A';\nLink.SANITIZED_URL = 'about:blank';\nLink.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];\n\nfunction sanitize(url, protocols) {\n  const anchor = document.createElement('a');\n  anchor.href = url;\n  const protocol = anchor.href.slice(0, anchor.href.indexOf(':'));\n  return protocols.indexOf(protocol) > -1;\n}\n\nexports.default = Link;\nexports.sanitize = sanitize;\n\n//# sourceURL=webpack://Quill/./formats/link.js?");

	/***/ }),

	/***/ "./formats/list.js":
	/*!*************************!*\
	  !*** ./formats/list.js ***!
	  \*************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.ListContainer = undefined;\n\nvar _block = __webpack_require__(/*! ../blots/block */ \"./blots/block.js\");\n\nvar _block2 = _interopRequireDefault(_block);\n\nvar _container = __webpack_require__(/*! ../blots/container */ \"./blots/container.js\");\n\nvar _container2 = _interopRequireDefault(_container);\n\nvar _quill = __webpack_require__(/*! ../core/quill */ \"./core/quill.js\");\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass ListContainer extends _container2.default {}\nListContainer.blotName = 'list-container';\nListContainer.tagName = 'OL';\n\nclass ListItem extends _block2.default {\n  static create(value) {\n    const node = super.create();\n    node.setAttribute('data-list', value);\n    return node;\n  }\n\n  static formats(domNode) {\n    return domNode.getAttribute('data-list') || undefined;\n  }\n\n  static register() {\n    _quill2.default.register(ListContainer);\n  }\n\n  constructor(scroll, domNode) {\n    super(scroll, domNode);\n    const listEventHandler = e => {\n      if (e.target !== domNode) return;\n      const format = this.statics.formats(domNode, scroll);\n      if (format === 'checked') {\n        this.format('list', 'unchecked');\n      } else if (format === 'unchecked') {\n        this.format('list', 'checked');\n      }\n    };\n    domNode.addEventListener('touchstart', listEventHandler);\n    domNode.addEventListener('mousedown', listEventHandler);\n  }\n\n  format(name, value) {\n    if (name === this.statics.blotName && value) {\n      this.domNode.setAttribute('data-list', value);\n    } else {\n      super.format(name, value);\n    }\n  }\n}\nListItem.blotName = 'list';\nListItem.tagName = 'LI';\n\nListContainer.allowedChildren = [ListItem];\nListItem.requiredContainer = ListContainer;\n\nexports.ListContainer = ListContainer;\nexports.default = ListItem;\n\n//# sourceURL=webpack://Quill/./formats/list.js?");

	/***/ }),

	/***/ "./formats/script.js":
	/*!***************************!*\
	  !*** ./formats/script.js ***!
	  \***************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _inline = __webpack_require__(/*! ../blots/inline */ \"./blots/inline.js\");\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Script extends _inline2.default {\n  static create(value) {\n    if (value === 'super') {\n      return document.createElement('sup');\n    } else if (value === 'sub') {\n      return document.createElement('sub');\n    }\n    return super.create(value);\n  }\n\n  static formats(domNode) {\n    if (domNode.tagName === 'SUB') return 'sub';\n    if (domNode.tagName === 'SUP') return 'super';\n    return undefined;\n  }\n}\nScript.blotName = 'script';\nScript.tagName = ['SUB', 'SUP'];\n\nexports.default = Script;\n\n//# sourceURL=webpack://Quill/./formats/script.js?");

	/***/ }),

	/***/ "./formats/size.js":
	/*!*************************!*\
	  !*** ./formats/size.js ***!
	  \*************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SizeStyle = exports.SizeClass = undefined;\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nconst SizeClass = new _parchment.ClassAttributor('size', 'ql-size', {\n  scope: _parchment.Scope.INLINE,\n  whitelist: ['small', 'large', 'huge']\n});\nconst SizeStyle = new _parchment.StyleAttributor('size', 'font-size', {\n  scope: _parchment.Scope.INLINE,\n  whitelist: ['10px', '18px', '32px']\n});\n\nexports.SizeClass = SizeClass;\nexports.SizeStyle = SizeStyle;\n\n//# sourceURL=webpack://Quill/./formats/size.js?");

	/***/ }),

	/***/ "./formats/strike.js":
	/*!***************************!*\
	  !*** ./formats/strike.js ***!
	  \***************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _inline = __webpack_require__(/*! ../blots/inline */ \"./blots/inline.js\");\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Strike extends _inline2.default {}\nStrike.blotName = 'strike';\nStrike.tagName = 'S';\n\nexports.default = Strike;\n\n//# sourceURL=webpack://Quill/./formats/strike.js?");

	/***/ }),

	/***/ "./formats/table.js":
	/*!**************************!*\
	  !*** ./formats/table.js ***!
	  \**************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tableId = exports.TableContainer = exports.TableBody = exports.TableRow = exports.TableCell = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _block = __webpack_require__(/*! ../blots/block */ \"./blots/block.js\");\n\nvar _block2 = _interopRequireDefault(_block);\n\nvar _container = __webpack_require__(/*! ../blots/container */ \"./blots/container.js\");\n\nvar _container2 = _interopRequireDefault(_container);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass TableCell extends _block2.default {\n  static create(value) {\n    const node = super.create();\n    if (value) {\n      node.setAttribute('data-row', value);\n    } else {\n      node.setAttribute('data-row', tableId());\n    }\n    return node;\n  }\n\n  static formats(domNode) {\n    if (domNode.hasAttribute('data-row')) {\n      return domNode.getAttribute('data-row');\n    }\n    return undefined;\n  }\n\n  format(name, value) {\n    if (name === TableCell.blotName && value) {\n      this.domNode.setAttribute('data-row', value);\n    } else {\n      super.format(name, value);\n    }\n  }\n\n  table() {\n    let cur = this.parent;\n    while (cur != null && cur.statics.blotName !== 'table-container') {\n      cur = cur.parent;\n    }\n    return cur;\n  }\n}\nTableCell.blotName = 'table';\nTableCell.tagName = 'TD';\n\nclass TableRow extends _container2.default {\n  checkMerge() {\n    if (super.checkMerge() && this.next.children.head != null) {\n      const thisHead = this.children.head.formats();\n      const thisTail = this.children.tail.formats();\n      const nextHead = this.next.children.head.formats();\n      const nextTail = this.next.children.tail.formats();\n      return thisHead.table === thisTail.table && thisHead.table === nextHead.table && thisHead.table === nextTail.table;\n    }\n    return false;\n  }\n\n  optimize(...args) {\n    super.optimize(...args);\n    this.children.forEach(child => {\n      if (child.next == null) return;\n      const childFormats = child.formats();\n      const nextFormats = child.next.formats();\n      if (childFormats.table !== nextFormats.table) {\n        const next = this.splitAfter(child);\n        if (next) {\n          next.optimize();\n        }\n        // We might be able to merge with prev now\n        if (this.prev) {\n          this.prev.optimize();\n        }\n      }\n    });\n  }\n}\nTableRow.blotName = 'table-row';\nTableRow.tagName = 'TR';\n\nclass TableBody extends _container2.default {}\nTableBody.blotName = 'table-body';\nTableBody.tagName = 'TBODY';\n\nclass TableContainer extends _container2.default {\n  balanceCells() {\n    const rows = this.descendants(TableRow);\n    const maxColumns = rows.reduce((max, row) => {\n      return Math.max(row.children.length, max);\n    }, 0);\n    rows.forEach(row => {\n      new Array(maxColumns - row.children.length).fill(0).forEach(() => {\n        let value;\n        if (row.children.head != null) {\n          value = TableCell.formats(row.children.head.domNode);\n        }\n        const blot = this.scroll.create(TableCell.blotName, value);\n        row.appendChild(blot);\n        blot.optimize(); // Add break blot\n      });\n    });\n  }\n\n  deleteColumn(index) {\n    var _descendant = this.descendant(TableBody),\n        _descendant2 = _slicedToArray(_descendant, 1);\n\n    const body = _descendant2[0];\n\n    if (body == null || body.children.head == null) return;\n    body.children.forEach(row => {\n      const cell = row.children.at(index);\n      if (cell != null) {\n        cell.remove();\n      }\n    });\n  }\n\n  insertColumn(index) {\n    var _descendant3 = this.descendant(TableBody),\n        _descendant4 = _slicedToArray(_descendant3, 1);\n\n    const body = _descendant4[0];\n\n    if (body == null || body.children.head == null) return;\n    body.children.forEach(row => {\n      const ref = row.children.at(index);\n      const value = TableCell.formats(row.children.head.domNode);\n      const cell = this.scroll.create(TableCell.blotName, value);\n      row.insertBefore(cell, ref);\n    });\n  }\n\n  insertRow(index) {\n    var _descendant5 = this.descendant(TableBody),\n        _descendant6 = _slicedToArray(_descendant5, 1);\n\n    const body = _descendant6[0];\n\n    if (body == null || body.children.head == null) return;\n    const id = tableId();\n    const row = this.scroll.create(TableRow.blotName);\n    body.children.head.children.forEach(() => {\n      const cell = this.scroll.create(TableCell.blotName, id);\n      row.appendChild(cell);\n    });\n    const ref = body.children.at(index);\n    body.insertBefore(row, ref);\n  }\n}\nTableContainer.blotName = 'table-container';\nTableContainer.tagName = 'TABLE';\n\nTableContainer.allowedChildren = [TableBody];\nTableBody.requiredContainer = TableContainer;\n\nTableBody.allowedChildren = [TableRow];\nTableRow.requiredContainer = TableBody;\n\nTableRow.allowedChildren = [TableCell];\nTableCell.requiredContainer = TableRow;\n\nfunction tableId() {\n  const id = Math.random().toString(36).slice(2, 6);\n  return `row-${id}`;\n}\n\nexports.TableCell = TableCell;\nexports.TableRow = TableRow;\nexports.TableBody = TableBody;\nexports.TableContainer = TableContainer;\nexports.tableId = tableId;\n\n//# sourceURL=webpack://Quill/./formats/table.js?");

	/***/ }),

	/***/ "./formats/underline.js":
	/*!******************************!*\
	  !*** ./formats/underline.js ***!
	  \******************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _inline = __webpack_require__(/*! ../blots/inline */ \"./blots/inline.js\");\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Underline extends _inline2.default {}\nUnderline.blotName = 'underline';\nUnderline.tagName = 'U';\n\nexports.default = Underline;\n\n//# sourceURL=webpack://Quill/./formats/underline.js?");

	/***/ }),

	/***/ "./formats/video.js":
	/*!**************************!*\
	  !*** ./formats/video.js ***!
	  \**************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _block = __webpack_require__(/*! ../blots/block */ \"./blots/block.js\");\n\nvar _link = __webpack_require__(/*! ../formats/link */ \"./formats/link.js\");\n\nvar _link2 = _interopRequireDefault(_link);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst ATTRIBUTES = ['height', 'width'];\n\nclass Video extends _block.BlockEmbed {\n  static create(value) {\n    const node = super.create(value);\n    node.setAttribute('frameborder', '0');\n    node.setAttribute('allowfullscreen', true);\n    node.setAttribute('src', this.sanitize(value));\n    return node;\n  }\n\n  static formats(domNode) {\n    return ATTRIBUTES.reduce((formats, attribute) => {\n      if (domNode.hasAttribute(attribute)) {\n        formats[attribute] = domNode.getAttribute(attribute);\n      }\n      return formats;\n    }, {});\n  }\n\n  static sanitize(url) {\n    return _link2.default.sanitize(url); // eslint-disable-line import/no-named-as-default-member\n  }\n\n  static value(domNode) {\n    return domNode.getAttribute('src');\n  }\n\n  format(name, value) {\n    if (ATTRIBUTES.indexOf(name) > -1) {\n      if (value) {\n        this.domNode.setAttribute(name, value);\n      } else {\n        this.domNode.removeAttribute(name);\n      }\n    } else {\n      super.format(name, value);\n    }\n  }\n\n  html() {\n    var _value = this.value();\n\n    const video = _value.video;\n\n    return `<a href=\"${video}\">${video}</a>`;\n  }\n}\nVideo.blotName = 'video';\nVideo.className = 'ql-video';\nVideo.tagName = 'IFRAME';\n\nexports.default = Video;\n\n//# sourceURL=webpack://Quill/./formats/video.js?");

	/***/ }),

	/***/ "./modules/clipboard.js":
	/*!******************************!*\
	  !*** ./modules/clipboard.js ***!
	  \******************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.traverse = exports.matchText = exports.matchNewline = exports.matchBlot = exports.matchAttributor = exports.default = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extend = __webpack_require__(/*! extend */ \"./node_modules/extend/index.js\");\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _quillDelta = __webpack_require__(/*! quill-delta */ \"./node_modules/quill-delta/lib/delta.js\");\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nvar _quill = __webpack_require__(/*! ../core/quill */ \"./core/quill.js\");\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nvar _logger = __webpack_require__(/*! ../core/logger */ \"./core/logger.js\");\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _module = __webpack_require__(/*! ../core/module */ \"./core/module.js\");\n\nvar _module2 = _interopRequireDefault(_module);\n\nvar _align = __webpack_require__(/*! ../formats/align */ \"./formats/align.js\");\n\nvar _background = __webpack_require__(/*! ../formats/background */ \"./formats/background.js\");\n\nvar _code = __webpack_require__(/*! ../formats/code */ \"./formats/code.js\");\n\nvar _code2 = _interopRequireDefault(_code);\n\nvar _color = __webpack_require__(/*! ../formats/color */ \"./formats/color.js\");\n\nvar _direction = __webpack_require__(/*! ../formats/direction */ \"./formats/direction.js\");\n\nvar _font = __webpack_require__(/*! ../formats/font */ \"./formats/font.js\");\n\nvar _size = __webpack_require__(/*! ../formats/size */ \"./formats/size.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst debug = (0, _logger2.default)('quill:clipboard');\n\nconst CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['ol, ul', matchList], ['pre', matchCodeBlock], ['tr', matchTable], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];\n\nconst ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce((memo, attr) => {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\n\nconst STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce((memo, attr) => {\n  memo[attr.keyName] = attr;\n  return memo;\n}, {});\n\nclass Clipboard extends _module2.default {\n  constructor(quill, options) {\n    super(quill, options);\n    this.quill.root.addEventListener('copy', this.onCaptureCopy.bind(this));\n    this.quill.root.addEventListener('cut', this.onCaptureCut.bind(this));\n    this.quill.root.addEventListener('paste', this.onCapturePaste.bind(this));\n    this.matchers = [];\n    CLIPBOARD_CONFIG.concat(this.options.matchers).forEach(([selector, matcher]) => {\n      this.addMatcher(selector, matcher);\n    });\n  }\n\n  addMatcher(selector, matcher) {\n    this.matchers.push([selector, matcher]);\n  }\n\n  convert({ html, text }) {\n    const formats = this.quill.getFormat(this.quill.selection.savedRange.index);\n    if (formats[_code2.default.blotName]) {\n      return new _quillDelta2.default().insert(text, {\n        [_code2.default.blotName]: formats[_code2.default.blotName]\n      });\n    } else if (!html) {\n      return new _quillDelta2.default().insert(text || '');\n    }\n    const container = this.quill.root.ownerDocument.createElement('div');\n    container.innerHTML = html.replace(/>\\r?\\n +</g, '><'); // Remove spaces between tags\n    const nodeMatches = new WeakMap();\n\n    var _prepareMatching = this.prepareMatching(container, nodeMatches),\n        _prepareMatching2 = _slicedToArray(_prepareMatching, 2);\n\n    const elementMatchers = _prepareMatching2[0],\n          textMatchers = _prepareMatching2[1];\n\n    const delta = traverse(this.quill.scroll, container, elementMatchers, textMatchers, nodeMatches);\n    // Remove trailing newline\n    if (deltaEndsWith(delta, '\\n') && delta.ops[delta.ops.length - 1].attributes == null) {\n      return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));\n    }\n    return delta;\n  }\n\n  dangerouslyPasteHTML(index, html, source = _quill2.default.sources.API) {\n    if (typeof index === 'string') {\n      const delta = this.convert({ html: index, text: '' });\n      this.quill.setContents(delta, html);\n      this.quill.setSelection(0, _quill2.default.sources.SILENT);\n    } else {\n      const paste = this.convert({ html, text: '' });\n      this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);\n      this.quill.setSelection(index + paste.length(), _quill2.default.sources.SILENT);\n    }\n  }\n\n  onCaptureCopy(e) {\n    if (e.defaultPrevented) return;\n    this.quill.update();\n\n    var _quill$selection$getR = this.quill.selection.getRange(),\n        _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1);\n\n    const range = _quill$selection$getR2[0];\n\n    if (range) {\n      this.onCopy(e, range);\n      e.preventDefault();\n    }\n  }\n\n  onCaptureCut(e) {\n    if (e.defaultPrevented) return;\n    this.quill.update();\n\n    var _quill$selection$getR3 = this.quill.selection.getRange(),\n        _quill$selection$getR4 = _slicedToArray(_quill$selection$getR3, 1);\n\n    const range = _quill$selection$getR4[0];\n\n    if (range) {\n      this.onCopy(e, range);\n      this.quill.deleteText(range, _quill2.default.sources.USER);\n      e.preventDefault();\n    }\n  }\n\n  onCapturePaste(e) {\n    if (e.defaultPrevented || !this.quill.isEnabled()) return;\n    const range = this.quill.getSelection(true);\n    const files = Array.from(e.clipboardData.files || []);\n    if (files.length > 0) {\n      this.quill.uploader.upload(range, files);\n    } else {\n      this.onPaste(e, range);\n    }\n    e.preventDefault();\n  }\n\n  onCopy(e, range) {\n    const text = this.quill.getText(range);\n    const html = this.quill.getSemanticHTML(range);\n    e.clipboardData.setData('text/plain', text);\n    e.clipboardData.setData('text/html', html);\n  }\n\n  onPaste(e, range) {\n    const html = e.clipboardData.getData('text/html');\n    const text = e.clipboardData.getData('text/plain');\n    const pastedDelta = this.convert({ text, html });\n    debug.log('onPaste', pastedDelta, { text, html });\n    const delta = new _quillDelta2.default().retain(range.index).delete(range.length).concat(pastedDelta);\n    this.quill.updateContents(delta, _quill2.default.sources.USER);\n    // range.length contributes to delta.length()\n    this.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);\n    this.quill.scrollIntoView();\n  }\n\n  prepareMatching(container, nodeMatches) {\n    const elementMatchers = [];\n    const textMatchers = [];\n    this.matchers.forEach(pair => {\n      var _pair = _slicedToArray(pair, 2);\n\n      const selector = _pair[0],\n            matcher = _pair[1];\n\n      switch (selector) {\n        case Node.TEXT_NODE:\n          textMatchers.push(matcher);\n          break;\n        case Node.ELEMENT_NODE:\n          elementMatchers.push(matcher);\n          break;\n        default:\n          Array.from(container.querySelectorAll(selector)).forEach(node => {\n            if (nodeMatches.has(node)) {\n              const matches = nodeMatches.get(node);\n              matches.push(matcher);\n            } else {\n              nodeMatches.set(node, [matcher]);\n            }\n          });\n          break;\n      }\n    });\n    return [elementMatchers, textMatchers];\n  }\n}\nClipboard.DEFAULTS = {\n  matchers: []\n};\n\nfunction applyFormat(delta, format, value) {\n  if (typeof format === 'object') {\n    return Object.keys(format).reduce((newDelta, key) => {\n      return applyFormat(newDelta, key, format[key]);\n    }, delta);\n  }\n  return delta.reduce((newDelta, op) => {\n    if (op.attributes && op.attributes[format]) {\n      return newDelta.push(op);\n    }\n    return newDelta.insert(op.insert, (0, _extend2.default)({}, { [format]: value }, op.attributes));\n  }, new _quillDelta2.default());\n}\n\nfunction deltaEndsWith(delta, text) {\n  let endText = '';\n  for (let i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i // eslint-disable-line no-plusplus\n  ) {\n    const op = delta.ops[i];\n    if (typeof op.insert !== 'string') break;\n    endText = op.insert + endText;\n  }\n  return endText.slice(-1 * text.length) === text;\n}\n\nfunction isLine(node) {\n  if (node.childNodes.length === 0) return false; // Exclude embed blocks\n  return ['address', 'article', 'blockquote', 'canvas', 'dd', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'iframe', 'li', 'main', 'nav', 'ol', 'output', 'p', 'pre', 'section', 'table', 'td', 'tr', 'ul', 'video'].includes(node.tagName.toLowerCase());\n}\n\nconst preNodes = new WeakMap();\nfunction isPre(node) {\n  if (node == null) return false;\n  if (!preNodes.has(node)) {\n    if (node.tagName === 'PRE') {\n      preNodes.set(node, true);\n    } else {\n      preNodes.set(node, isPre(node.parentNode));\n    }\n  }\n  return preNodes.get(node);\n}\n\nfunction traverse(scroll, node, elementMatchers, textMatchers, nodeMatches) {\n  // Post-order\n  if (node.nodeType === node.TEXT_NODE) {\n    return textMatchers.reduce((delta, matcher) => {\n      return matcher(node, delta, scroll);\n    }, new _quillDelta2.default());\n  } else if (node.nodeType === node.ELEMENT_NODE) {\n    return Array.from(node.childNodes || []).reduce((delta, childNode) => {\n      let childrenDelta = traverse(scroll, childNode, elementMatchers, textMatchers, nodeMatches);\n      if (childNode.nodeType === node.ELEMENT_NODE) {\n        childrenDelta = elementMatchers.reduce((reducedDelta, matcher) => {\n          return matcher(childNode, reducedDelta, scroll);\n        }, childrenDelta);\n        childrenDelta = (nodeMatches.get(childNode) || []).reduce((reducedDelta, matcher) => {\n          return matcher(childNode, reducedDelta, scroll);\n        }, childrenDelta);\n      }\n      return delta.concat(childrenDelta);\n    }, new _quillDelta2.default());\n  }\n  return new _quillDelta2.default();\n}\n\nfunction matchAlias(format, node, delta) {\n  return applyFormat(delta, format, true);\n}\n\nfunction matchAttributor(node, delta, scroll) {\n  const attributes = _parchment.Attributor.keys(node);\n  const classes = _parchment.ClassAttributor.keys(node);\n  const styles = _parchment.StyleAttributor.keys(node);\n  const formats = {};\n  attributes.concat(classes).concat(styles).forEach(name => {\n    let attr = scroll.query(name, _parchment.Scope.ATTRIBUTE);\n    if (attr != null) {\n      formats[attr.attrName] = attr.value(node);\n      if (formats[attr.attrName]) return;\n    }\n    attr = ATTRIBUTE_ATTRIBUTORS[name];\n    if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n      formats[attr.attrName] = attr.value(node) || undefined;\n    }\n    attr = STYLE_ATTRIBUTORS[name];\n    if (attr != null && (attr.attrName === name || attr.keyName === name)) {\n      attr = STYLE_ATTRIBUTORS[name];\n      formats[attr.attrName] = attr.value(node) || undefined;\n    }\n  });\n  if (Object.keys(formats).length > 0) {\n    return applyFormat(delta, formats);\n  }\n  return delta;\n}\n\nfunction matchBlot(node, delta, scroll) {\n  const match = scroll.query(node);\n  if (match == null) return delta;\n  if (match.prototype instanceof _parchment.EmbedBlot) {\n    const embed = {};\n    const value = match.value(node);\n    if (value != null) {\n      embed[match.blotName] = value;\n      return new _quillDelta2.default().insert(embed, match.formats(node, scroll));\n    }\n  } else if (typeof match.formats === 'function') {\n    return applyFormat(delta, match.blotName, match.formats(node, scroll));\n  }\n  return delta;\n}\n\nfunction matchBreak(node, delta) {\n  if (!deltaEndsWith(delta, '\\n')) {\n    delta.insert('\\n');\n  }\n  return delta;\n}\n\nfunction matchCodeBlock(node, delta, scroll) {\n  const match = scroll.query('code-block');\n  const language = match ? match.formats(node, scroll) : true;\n  return applyFormat(delta, 'code-block', language);\n}\n\nfunction matchIgnore() {\n  return new _quillDelta2.default();\n}\n\nfunction matchIndent(node, delta, scroll) {\n  const match = scroll.query(node);\n  if (match == null || match.blotName !== 'list' || !deltaEndsWith(delta, '\\n')) {\n    return delta;\n  }\n  let indent = -1;\n  let parent = node.parentNode;\n  while (parent != null) {\n    if (['OL', 'UL'].includes(parent.tagName)) {\n      indent += 1;\n    }\n    parent = parent.parentNode;\n  }\n  if (indent <= 0) return delta;\n  return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, { indent }));\n}\n\nfunction matchList(node, delta) {\n  const list = node.tagName === 'OL' ? 'ordered' : 'bullet';\n  return applyFormat(delta, 'list', list);\n}\n\nfunction matchNewline(node, delta) {\n  if (!deltaEndsWith(delta, '\\n')) {\n    if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {\n      delta.insert('\\n');\n    }\n  }\n  return delta;\n}\n\nfunction matchStyles(node, delta) {\n  const formats = {};\n  const style = node.style || {};\n  if (style.fontStyle === 'italic') {\n    formats.italic = true;\n  }\n  if (style.fontWeight.startsWith('bold') || parseInt(style.fontWeight, 10) >= 700) {\n    formats.bold = true;\n  }\n  if (Object.keys(formats).length > 0) {\n    delta = applyFormat(delta, formats);\n  }\n  if (parseFloat(style.textIndent || 0) > 0) {\n    // Could be 0.5in\n    return new _quillDelta2.default().insert('\\t').concat(delta);\n  }\n  return delta;\n}\n\nfunction matchTable(node, delta) {\n  const table = node.parentNode.tagName === 'TABLE' ? node.parentNode : node.parentNode.parentNode;\n  const rows = Array.from(table.querySelectorAll('tr'));\n  const row = rows.indexOf(node) + 1;\n  return applyFormat(delta, 'table', row);\n}\n\nfunction matchText(node, delta) {\n  let text = node.data;\n  // Word represents empty line with <o:p>&nbsp;</o:p>\n  if (node.parentNode.tagName === 'O:P') {\n    return delta.insert(text.trim());\n  }\n  if (text.trim().length === 0 && node.parentNode == null) {\n    return delta;\n  }\n  if (!isPre(node)) {\n    const replacer = (collapse, match) => {\n      const replaced = match.replace(/[^\\u00a0]/g, ''); // \\u00a0 is nbsp;\n      return replaced.length < 1 && collapse ? ' ' : replaced;\n    };\n    text = text.replace(/\\r\\n/g, ' ').replace(/\\n/g, ' ');\n    text = text.replace(/\\s\\s+/g, replacer.bind(replacer, true)); // collapse whitespace\n    if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {\n      text = text.replace(/^\\s+/, replacer.bind(replacer, false));\n    }\n    if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {\n      text = text.replace(/\\s+$/, replacer.bind(replacer, false));\n    }\n  }\n  return delta.insert(text);\n}\n\nexports.default = Clipboard;\nexports.matchAttributor = matchAttributor;\nexports.matchBlot = matchBlot;\nexports.matchNewline = matchNewline;\nexports.matchText = matchText;\nexports.traverse = traverse;\n\n//# sourceURL=webpack://Quill/./modules/clipboard.js?");

	/***/ }),

	/***/ "./modules/history.js":
	/*!****************************!*\
	  !*** ./modules/history.js ***!
	  \****************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLastChangeIndex = exports.default = undefined;\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nvar _quill = __webpack_require__(/*! ../core/quill */ \"./core/quill.js\");\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nvar _module = __webpack_require__(/*! ../core/module */ \"./core/module.js\");\n\nvar _module2 = _interopRequireDefault(_module);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass History extends _module2.default {\n  constructor(quill, options) {\n    super(quill, options);\n    this.lastRecorded = 0;\n    this.ignoreChange = false;\n    this.clear();\n    this.quill.on(_quill2.default.events.EDITOR_CHANGE, (eventName, delta, oldDelta, source) => {\n      if (eventName !== _quill2.default.events.TEXT_CHANGE || this.ignoreChange) return;\n      if (!this.options.userOnly || source === _quill2.default.sources.USER) {\n        this.record(delta, oldDelta);\n      } else {\n        this.transform(delta);\n      }\n    });\n    this.quill.keyboard.addBinding({ key: 'z', shortKey: true }, this.undo.bind(this));\n    this.quill.keyboard.addBinding({ key: 'z', shortKey: true, shiftKey: true }, this.redo.bind(this));\n    if (/Win/i.test(navigator.platform)) {\n      this.quill.keyboard.addBinding({ key: 'y', shortKey: true }, this.redo.bind(this));\n    }\n  }\n\n  change(source, dest) {\n    if (this.stack[source].length === 0) return;\n    const delta = this.stack[source].pop();\n    this.stack[dest].push(delta);\n    this.lastRecorded = 0;\n    this.ignoreChange = true;\n    this.quill.updateContents(delta[source], _quill2.default.sources.USER);\n    this.ignoreChange = false;\n    const index = getLastChangeIndex(this.quill.scroll, delta[source]);\n    this.quill.setSelection(index);\n  }\n\n  clear() {\n    this.stack = { undo: [], redo: [] };\n  }\n\n  cutoff() {\n    this.lastRecorded = 0;\n  }\n\n  record(changeDelta, oldDelta) {\n    if (changeDelta.ops.length === 0) return;\n    this.stack.redo = [];\n    let undoDelta = this.quill.getContents().diff(oldDelta);\n    const timestamp = Date.now();\n    if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {\n      const delta = this.stack.undo.pop();\n      undoDelta = undoDelta.compose(delta.undo);\n      changeDelta = delta.redo.compose(changeDelta);\n    } else {\n      this.lastRecorded = timestamp;\n    }\n    this.stack.undo.push({\n      redo: changeDelta,\n      undo: undoDelta\n    });\n    if (this.stack.undo.length > this.options.maxStack) {\n      this.stack.undo.shift();\n    }\n  }\n\n  redo() {\n    this.change('redo', 'undo');\n  }\n\n  transform(delta) {\n    this.stack.undo.forEach(change => {\n      change.undo = delta.transform(change.undo, true);\n      change.redo = delta.transform(change.redo, true);\n    });\n    this.stack.redo.forEach(change => {\n      change.undo = delta.transform(change.undo, true);\n      change.redo = delta.transform(change.redo, true);\n    });\n  }\n\n  undo() {\n    this.change('undo', 'redo');\n  }\n}\nHistory.DEFAULTS = {\n  delay: 1000,\n  maxStack: 100,\n  userOnly: false\n};\n\nfunction endsWithNewlineChange(scroll, delta) {\n  const lastOp = delta.ops[delta.ops.length - 1];\n  if (lastOp == null) return false;\n  if (lastOp.insert != null) {\n    return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\\n');\n  }\n  if (lastOp.attributes != null) {\n    return Object.keys(lastOp.attributes).some(attr => {\n      return scroll.query(attr, _parchment.Scope.BLOCK) != null;\n    });\n  }\n  return false;\n}\n\nfunction getLastChangeIndex(scroll, delta) {\n  const deleteLength = delta.reduce((length, op) => {\n    return length + (op.delete || 0);\n  }, 0);\n  let changeIndex = delta.length() - deleteLength;\n  if (endsWithNewlineChange(scroll, delta)) {\n    changeIndex -= 1;\n  }\n  return changeIndex;\n}\n\nexports.default = History;\nexports.getLastChangeIndex = getLastChangeIndex;\n\n//# sourceURL=webpack://Quill/./modules/history.js?");

	/***/ }),

	/***/ "./modules/keyboard.js":
	/*!*****************************!*\
	  !*** ./modules/keyboard.js ***!
	  \*****************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalize = exports.SHORTKEY = exports.default = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _clone = __webpack_require__(/*! clone */ \"./node_modules/clone/clone.js\");\n\nvar _clone2 = _interopRequireDefault(_clone);\n\nvar _deepEqual = __webpack_require__(/*! deep-equal */ \"./node_modules/deep-equal/index.js\");\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _extend = __webpack_require__(/*! extend */ \"./node_modules/extend/index.js\");\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _quillDelta = __webpack_require__(/*! quill-delta */ \"./node_modules/quill-delta/lib/delta.js\");\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _op = __webpack_require__(/*! quill-delta/lib/op */ \"./node_modules/quill-delta/lib/op.js\");\n\nvar _op2 = _interopRequireDefault(_op);\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nvar _quill = __webpack_require__(/*! ../core/quill */ \"./core/quill.js\");\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nvar _logger = __webpack_require__(/*! ../core/logger */ \"./core/logger.js\");\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _module = __webpack_require__(/*! ../core/module */ \"./core/module.js\");\n\nvar _module2 = _interopRequireDefault(_module);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst debug = (0, _logger2.default)('quill:keyboard');\n\nconst SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';\n\nclass Keyboard extends _module2.default {\n  static match(evt, binding) {\n    if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(key => {\n      return !!binding[key] !== evt[key] && binding[key] !== null;\n    })) {\n      return false;\n    }\n    return binding.key === evt.key || binding.key === evt.which;\n  }\n\n  constructor(quill, options) {\n    super(quill, options);\n    this.bindings = {};\n    Object.keys(this.options.bindings).forEach(name => {\n      if (this.options.bindings[name]) {\n        this.addBinding(this.options.bindings[name]);\n      }\n    });\n    this.addBinding({ key: 'Enter', shiftKey: null }, handleEnter);\n    this.addBinding({ key: 'Enter', metaKey: null, ctrlKey: null, altKey: null }, () => {});\n    if (/Firefox/i.test(navigator.userAgent)) {\n      // Need to handle delete and backspace for Firefox in the general case #1171\n      this.addBinding({ key: 'Backspace' }, { collapsed: true }, handleBackspace);\n      this.addBinding({ key: 'Delete' }, { collapsed: true }, handleDelete);\n    } else {\n      this.addBinding({ key: 'Backspace' }, { collapsed: true, prefix: /^.?$/ }, handleBackspace);\n      this.addBinding({ key: 'Delete' }, { collapsed: true, suffix: /^.?$/ }, handleDelete);\n    }\n    this.addBinding({ key: 'Backspace' }, { collapsed: false }, handleDeleteRange);\n    this.addBinding({ key: 'Delete' }, { collapsed: false }, handleDeleteRange);\n    this.addBinding({\n      key: 'Backspace',\n      altKey: null,\n      ctrlKey: null,\n      metaKey: null,\n      shiftKey: null\n    }, { collapsed: true, offset: 0 }, handleBackspace);\n    this.listen();\n  }\n\n  addBinding(keyBinding, context = {}, handler = {}) {\n    const binding = normalize(keyBinding);\n    if (binding == null) {\n      debug.warn('Attempted to add invalid keyboard binding', binding);\n      return;\n    }\n    if (typeof context === 'function') {\n      context = { handler: context };\n    }\n    if (typeof handler === 'function') {\n      handler = { handler };\n    }\n    const keys = Array.isArray(binding.key) ? binding.key : [binding.key];\n    keys.forEach(key => {\n      const singleBinding = (0, _extend2.default)({}, binding, { key }, context, handler);\n      this.bindings[singleBinding.key] = this.bindings[singleBinding.key] || [];\n      this.bindings[singleBinding.key].push(singleBinding);\n    });\n  }\n\n  listen() {\n    this.quill.root.addEventListener('keydown', evt => {\n      if (evt.defaultPrevented) return;\n      const bindings = (this.bindings[evt.key] || []).concat(this.bindings[evt.which] || []);\n      const matches = bindings.filter(binding => Keyboard.match(evt, binding));\n      if (matches.length === 0) return;\n      const range = this.quill.getSelection();\n      if (range == null || !this.quill.hasFocus()) return;\n\n      var _quill$getLine = this.quill.getLine(range.index),\n          _quill$getLine2 = _slicedToArray(_quill$getLine, 2);\n\n      const line = _quill$getLine2[0],\n            offset = _quill$getLine2[1];\n\n      var _quill$getLeaf = this.quill.getLeaf(range.index),\n          _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2);\n\n      const leafStart = _quill$getLeaf2[0],\n            offsetStart = _quill$getLeaf2[1];\n\n      var _ref = range.length === 0 ? [leafStart, offsetStart] : this.quill.getLeaf(range.index + range.length),\n          _ref2 = _slicedToArray(_ref, 2);\n\n      const leafEnd = _ref2[0],\n            offsetEnd = _ref2[1];\n\n      const prefixText = leafStart instanceof _parchment.TextBlot ? leafStart.value().slice(0, offsetStart) : '';\n      const suffixText = leafEnd instanceof _parchment.TextBlot ? leafEnd.value().slice(offsetEnd) : '';\n      const curContext = {\n        collapsed: range.length === 0,\n        empty: range.length === 0 && line.length() <= 1,\n        format: this.quill.getFormat(range),\n        line,\n        offset,\n        prefix: prefixText,\n        suffix: suffixText,\n        event: evt\n      };\n      const prevented = matches.some(binding => {\n        if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) {\n          return false;\n        }\n        if (binding.empty != null && binding.empty !== curContext.empty) {\n          return false;\n        }\n        if (binding.offset != null && binding.offset !== curContext.offset) {\n          return false;\n        }\n        if (Array.isArray(binding.format)) {\n          // any format is present\n          if (binding.format.every(name => curContext.format[name] == null)) {\n            return false;\n          }\n        } else if (typeof binding.format === 'object') {\n          // all formats must match\n          if (!Object.keys(binding.format).every(name => {\n            if (binding.format[name] === true) return curContext.format[name] != null;\n            if (binding.format[name] === false) return curContext.format[name] == null;\n            return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);\n          })) {\n            return false;\n          }\n        }\n        if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) {\n          return false;\n        }\n        if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) {\n          return false;\n        }\n        return binding.handler.call(this, range, curContext, binding) !== true;\n      });\n      if (prevented) {\n        evt.preventDefault();\n      }\n    });\n  }\n}\n\nKeyboard.DEFAULTS = {\n  bindings: {\n    bold: makeFormatHandler('bold'),\n    italic: makeFormatHandler('italic'),\n    underline: makeFormatHandler('underline'),\n    indent: {\n      // highlight tab or tab at beginning of list, indent or blockquote\n      key: 'Tab',\n      format: ['blockquote', 'indent', 'list'],\n      handler(range, context) {\n        if (context.collapsed && context.offset !== 0) return true;\n        this.quill.format('indent', '+1', _quill2.default.sources.USER);\n        return false;\n      }\n    },\n    outdent: {\n      key: 'Tab',\n      shiftKey: true,\n      format: ['blockquote', 'indent', 'list'],\n      // highlight tab or tab at beginning of list, indent or blockquote\n      handler(range, context) {\n        if (context.collapsed && context.offset !== 0) return true;\n        this.quill.format('indent', '-1', _quill2.default.sources.USER);\n        return false;\n      }\n    },\n    'outdent backspace': {\n      key: 'Backspace',\n      collapsed: true,\n      shiftKey: null,\n      metaKey: null,\n      ctrlKey: null,\n      altKey: null,\n      format: ['indent', 'list'],\n      offset: 0,\n      handler(range, context) {\n        if (context.format.indent != null) {\n          this.quill.format('indent', '-1', _quill2.default.sources.USER);\n        } else if (context.format.list != null) {\n          this.quill.format('list', false, _quill2.default.sources.USER);\n        }\n      }\n    },\n    'indent code-block': makeCodeBlockHandler(true),\n    'outdent code-block': makeCodeBlockHandler(false),\n    'remove tab': {\n      key: 'Tab',\n      shiftKey: true,\n      collapsed: true,\n      prefix: /\\t$/,\n      handler(range) {\n        this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);\n      }\n    },\n    tab: {\n      key: 'Tab',\n      handler(range, context) {\n        if (context.format.table) return true;\n        this.quill.history.cutoff();\n        const delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert('\\t');\n        this.quill.updateContents(delta, _quill2.default.sources.USER);\n        this.quill.history.cutoff();\n        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n        return false;\n      }\n    },\n    'blockquote empty enter': {\n      key: 'Enter',\n      collapsed: true,\n      format: ['blockquote'],\n      empty: true,\n      handler() {\n        this.quill.format('blockquote', false, _quill2.default.sources.USER);\n      }\n    },\n    'list empty enter': {\n      key: 'Enter',\n      collapsed: true,\n      format: ['list'],\n      empty: true,\n      handler(range, context) {\n        this.quill.format('list', false, _quill2.default.sources.USER);\n        if (context.format.indent) {\n          this.quill.format('indent', false, _quill2.default.sources.USER);\n        }\n      }\n    },\n    'checklist enter': {\n      key: 'Enter',\n      collapsed: true,\n      format: { list: 'checked' },\n      handler(range) {\n        var _quill$getLine3 = this.quill.getLine(range.index),\n            _quill$getLine4 = _slicedToArray(_quill$getLine3, 2);\n\n        const line = _quill$getLine4[0],\n              offset = _quill$getLine4[1];\n\n        const formats = (0, _extend2.default)({}, line.formats(), { list: 'checked' });\n        const delta = new _quillDelta2.default().retain(range.index).insert('\\n', formats).retain(line.length() - offset - 1).retain(1, { list: 'unchecked' });\n        this.quill.updateContents(delta, _quill2.default.sources.USER);\n        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n        this.quill.scrollIntoView();\n      }\n    },\n    'header enter': {\n      key: 'Enter',\n      collapsed: true,\n      format: ['header'],\n      suffix: /^$/,\n      handler(range, context) {\n        var _quill$getLine5 = this.quill.getLine(range.index),\n            _quill$getLine6 = _slicedToArray(_quill$getLine5, 2);\n\n        const line = _quill$getLine6[0],\n              offset = _quill$getLine6[1];\n\n        const delta = new _quillDelta2.default().retain(range.index).insert('\\n', context.format).retain(line.length() - offset - 1).retain(1, { header: null });\n        this.quill.updateContents(delta, _quill2.default.sources.USER);\n        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n        this.quill.scrollIntoView();\n      }\n    },\n    'table backspace': {\n      key: 'Backspace',\n      format: ['table'],\n      collapsed: true,\n      offset: 0,\n      handler() {}\n    },\n    'table delete': {\n      key: 'Delete',\n      format: ['table'],\n      collapsed: true,\n      suffix: /^$/,\n      handler() {}\n    },\n    'table enter': {\n      key: 'Enter',\n      shiftKey: null,\n      format: ['table'],\n      handler(range) {\n        const module = this.quill.getModule('table');\n        if (module) {\n          var _module$getTable = module.getTable(range),\n              _module$getTable2 = _slicedToArray(_module$getTable, 4);\n\n          const table = _module$getTable2[0],\n                row = _module$getTable2[1],\n                cell = _module$getTable2[2],\n                offset = _module$getTable2[3];\n\n          const shift = tableSide(table, row, cell, offset);\n          if (shift == null) return;\n          let index = table.offset();\n          if (shift < 0) {\n            const delta = new _quillDelta2.default().retain(index).insert('\\n');\n            this.quill.updateContents(delta, _quill2.default.sources.USER);\n            this.quill.setSelection(range.index + 1, range.length, _quill2.default.sources.SILENT);\n          } else if (shift > 0) {\n            index += table.length();\n            const delta = new _quillDelta2.default().retain(index).insert('\\n');\n            this.quill.updateContents(delta, _quill2.default.sources.USER);\n            this.quill.setSelection(index, _quill2.default.sources.USER);\n          }\n        }\n      }\n    },\n    'table tab': {\n      key: 'Tab',\n      shiftKey: null,\n      format: ['table'],\n      handler(range, context) {\n        const event = context.event,\n              cell = context.line;\n\n        const offset = cell.offset(this.quill.scroll);\n        if (event.shiftKey) {\n          this.quill.setSelection(offset - 1, _quill2.default.sources.USER);\n        } else {\n          this.quill.setSelection(offset + cell.length(), _quill2.default.sources.USER);\n        }\n      }\n    },\n    'list autofill': {\n      key: ' ',\n      collapsed: true,\n      format: {\n        list: false,\n        'code-block': false,\n        blockquote: false,\n        header: false,\n        table: false\n      },\n      prefix: /^\\s*?(\\d+\\.|-|\\*|\\[ ?\\]|\\[x\\])$/,\n      handler(range, context) {\n        if (this.quill.scroll.query('list') == null) return true;\n        const length = context.prefix.length;\n\n        var _quill$getLine7 = this.quill.getLine(range.index),\n            _quill$getLine8 = _slicedToArray(_quill$getLine7, 2);\n\n        const line = _quill$getLine8[0],\n              offset = _quill$getLine8[1];\n\n        if (offset > length) return true;\n        let value;\n        switch (context.prefix.trim()) {\n          case '[]':\n          case '[ ]':\n            value = 'unchecked';\n            break;\n          case '[x]':\n            value = 'checked';\n            break;\n          case '-':\n          case '*':\n            value = 'bullet';\n            break;\n          default:\n            value = 'ordered';\n        }\n        this.quill.insertText(range.index, ' ', _quill2.default.sources.USER);\n        this.quill.history.cutoff();\n        const delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, { list: value });\n        this.quill.updateContents(delta, _quill2.default.sources.USER);\n        this.quill.history.cutoff();\n        this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);\n        return false;\n      }\n    },\n    'code exit': {\n      key: 'Enter',\n      collapsed: true,\n      format: ['code-block'],\n      prefix: /^$/,\n      suffix: /^\\s*$/,\n      handler(range) {\n        var _quill$getLine9 = this.quill.getLine(range.index),\n            _quill$getLine10 = _slicedToArray(_quill$getLine9, 2);\n\n        const line = _quill$getLine10[0],\n              offset = _quill$getLine10[1];\n\n        let numLines = 2;\n        let cur = line;\n        while (cur != null && cur.length() <= 1 && cur.formats()['code-block']) {\n          cur = cur.prev;\n          numLines -= 1;\n          // Requisite prev lines are empty\n          if (numLines <= 0) {\n            const delta = new _quillDelta2.default().retain(range.index + line.length() - offset - 2).retain(1, { 'code-block': null }).delete(1);\n            this.quill.updateContents(delta, _quill2.default.sources.USER);\n            this.quill.setSelection(range.index - 1, _quill2.default.sources.SILENT);\n            return false;\n          }\n        }\n        return true;\n      }\n    },\n    'embed left': makeEmbedArrowHandler('ArrowLeft', false),\n    'embed left shift': makeEmbedArrowHandler('ArrowLeft', true),\n    'embed right': makeEmbedArrowHandler('ArrowRight', false),\n    'embed right shift': makeEmbedArrowHandler('ArrowRight', true),\n    'table down': makeTableArrowHandler(false),\n    'table up': makeTableArrowHandler(true)\n  }\n};\n\nfunction handleBackspace(range, context) {\n  if (range.index === 0 || this.quill.getLength() <= 1) return;\n\n  var _quill$getLine11 = this.quill.getLine(range.index),\n      _quill$getLine12 = _slicedToArray(_quill$getLine11, 1);\n\n  const line = _quill$getLine12[0];\n\n  let formats = {};\n  if (context.offset === 0) {\n    var _quill$getLine13 = this.quill.getLine(range.index - 1),\n        _quill$getLine14 = _slicedToArray(_quill$getLine13, 1);\n\n    const prev = _quill$getLine14[0];\n\n    if (prev != null) {\n      if (prev.length() > 1 || prev.statics.blotName === 'table') {\n        const curFormats = line.formats();\n        const prevFormats = this.quill.getFormat(range.index - 1, 1);\n        formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};\n      }\n    }\n  }\n  // Check for astral symbols\n  const length = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]$/.test(context.prefix) ? 2 : 1;\n  this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);\n  if (Object.keys(formats).length > 0) {\n    this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);\n  }\n  this.quill.focus();\n}\n\nfunction handleDelete(range, context) {\n  // Check for astral symbols\n  const length = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/.test(context.suffix) ? 2 : 1;\n  if (range.index >= this.quill.getLength() - length) return;\n  let formats = {};\n  let nextLength = 0;\n\n  var _quill$getLine15 = this.quill.getLine(range.index),\n      _quill$getLine16 = _slicedToArray(_quill$getLine15, 1);\n\n  const line = _quill$getLine16[0];\n\n  if (context.offset >= line.length() - 1) {\n    var _quill$getLine17 = this.quill.getLine(range.index + 1),\n        _quill$getLine18 = _slicedToArray(_quill$getLine17, 1);\n\n    const next = _quill$getLine18[0];\n\n    if (next) {\n      const curFormats = line.formats();\n      const nextFormats = this.quill.getFormat(range.index, 1);\n      formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};\n      nextLength = next.length();\n    }\n  }\n  this.quill.deleteText(range.index, length, _quill2.default.sources.USER);\n  if (Object.keys(formats).length > 0) {\n    this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);\n  }\n}\n\nfunction handleDeleteRange(range) {\n  const lines = this.quill.getLines(range);\n  let formats = {};\n  if (lines.length > 1) {\n    const firstFormats = lines[0].formats();\n    const lastFormats = lines[lines.length - 1].formats();\n    formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};\n  }\n  this.quill.deleteText(range, _quill2.default.sources.USER);\n  if (Object.keys(formats).length > 0) {\n    this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);\n  }\n  this.quill.setSelection(range.index, _quill2.default.sources.SILENT);\n  this.quill.focus();\n}\n\n// TODO use just updateContents()\nfunction handleEnter(range, context) {\n  if (range.length > 0) {\n    this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change\n  }\n  const lineFormats = Object.keys(context.format).reduce((formats, format) => {\n    if (this.quill.scroll.query(format, _parchment.Scope.BLOCK) && !Array.isArray(context.format[format])) {\n      formats[format] = context.format[format];\n    }\n    return formats;\n  }, {});\n  this.quill.insertText(range.index, '\\n', lineFormats, _quill2.default.sources.USER);\n  // Earlier scroll.deleteAt might have messed up our selection,\n  // so insertText's built in selection preservation is not reliable\n  this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);\n  this.quill.focus();\n  Object.keys(context.format).forEach(name => {\n    if (lineFormats[name] != null) return;\n    if (Array.isArray(context.format[name])) return;\n    if (name === 'link') return;\n    this.quill.format(name, context.format[name], _quill2.default.sources.USER);\n  });\n}\n\nfunction makeCodeBlockHandler(indent) {\n  return {\n    key: 'Tab',\n    shiftKey: !indent,\n    format: { 'code-block': true },\n    handler(range) {\n      const CodeBlock = this.quill.scroll.query('code-block');\n      const lines = range.length === 0 ? this.quill.getLines(range.index, 1) : this.quill.getLines(range);\n      let index = range.index,\n          length = range.length;\n\n      lines.forEach((line, i) => {\n        if (indent) {\n          line.insertAt(0, CodeBlock.TAB);\n          if (i === 0) {\n            index += CodeBlock.TAB.length;\n          } else {\n            length += CodeBlock.TAB.length;\n          }\n        } else if (line.domNode.textContent.startsWith(CodeBlock.TAB)) {\n          line.deleteAt(0, CodeBlock.TAB.length);\n          if (i === 0) {\n            index -= CodeBlock.TAB.length;\n          } else {\n            length -= CodeBlock.TAB.length;\n          }\n        }\n      });\n      this.quill.update(_quill2.default.sources.USER);\n      this.quill.setSelection(index, length, _quill2.default.sources.SILENT);\n    }\n  };\n}\n\nfunction makeEmbedArrowHandler(key, shiftKey) {\n  const where = key === 'ArrowLeft' ? 'prefix' : 'suffix';\n  return {\n    key,\n    shiftKey,\n    altKey: null,\n    [where]: /^$/,\n    handler(range) {\n      let index = range.index;\n\n      if (key === 'ArrowRight') {\n        index += range.length + 1;\n      }\n\n      var _quill$getLeaf3 = this.quill.getLeaf(index),\n          _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1);\n\n      const leaf = _quill$getLeaf4[0];\n\n      if (!(leaf instanceof _parchment.EmbedBlot)) return true;\n      if (key === 'ArrowLeft') {\n        if (shiftKey) {\n          this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);\n        } else {\n          this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);\n        }\n      } else if (shiftKey) {\n        this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);\n      } else {\n        this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);\n      }\n      return false;\n    }\n  };\n}\n\nfunction makeFormatHandler(format) {\n  return {\n    key: format[0],\n    shortKey: true,\n    handler(range, context) {\n      this.quill.format(format, !context.format[format], _quill2.default.sources.USER);\n    }\n  };\n}\n\nfunction makeTableArrowHandler(up) {\n  return {\n    key: up ? 'ArrowUp' : 'ArrowDown',\n    collapsed: true,\n    format: ['table'],\n    handler(range, context) {\n      // TODO move to table module\n      const key = up ? 'prev' : 'next';\n      const cell = context.line;\n      const targetRow = cell.parent[key];\n      if (targetRow != null) {\n        if (targetRow.statics.blotName === 'table-row') {\n          let targetCell = targetRow.children.head;\n          let cur = cell;\n          while (cur.prev != null) {\n            cur = cur.prev;\n            targetCell = targetCell.next;\n          }\n          const index = targetCell.offset(this.quill.scroll) + Math.min(context.offset, targetCell.length() - 1);\n          this.quill.setSelection(index, 0, _quill2.default.sources.USER);\n        }\n      } else {\n        const targetLine = cell.table()[key];\n        if (targetLine != null) {\n          if (up) {\n            this.quill.setSelection(targetLine.offset(this.quill.scroll) + targetLine.length() - 1, 0, _quill2.default.sources.USER);\n          } else {\n            this.quill.setSelection(targetLine.offset(this.quill.scroll), 0, _quill2.default.sources.USER);\n          }\n        }\n      }\n      return false;\n    }\n  };\n}\n\nfunction normalize(binding) {\n  if (typeof binding === 'string' || typeof binding === 'number') {\n    binding = { key: binding };\n  } else if (typeof binding === 'object') {\n    binding = (0, _clone2.default)(binding, false);\n  } else {\n    return null;\n  }\n  if (binding.shortKey) {\n    binding[SHORTKEY] = binding.shortKey;\n    delete binding.shortKey;\n  }\n  return binding;\n}\n\nfunction tableSide(table, row, cell, offset) {\n  if (row.prev == null && row.next == null) {\n    if (cell.prev == null && cell.next == null) {\n      return offset === 0 ? -1 : 1;\n    }\n    return cell.prev == null ? -1 : 1;\n  } else if (row.prev == null) {\n    return -1;\n  } else if (row.next == null) {\n    return 1;\n  }\n  return null;\n}\n\nexports.default = Keyboard;\nexports.SHORTKEY = SHORTKEY;\nexports.normalize = normalize;\n\n//# sourceURL=webpack://Quill/./modules/keyboard.js?");

	/***/ }),

	/***/ "./modules/syntax.js":
	/*!***************************!*\
	  !*** ./modules/syntax.js ***!
	  \***************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CodeToken = exports.CodeBlock = undefined;\n\nvar _quillDelta = __webpack_require__(/*! quill-delta */ \"./node_modules/quill-delta/lib/delta.js\");\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nvar _inline = __webpack_require__(/*! ../blots/inline */ \"./blots/inline.js\");\n\nvar _inline2 = _interopRequireDefault(_inline);\n\nvar _quill = __webpack_require__(/*! ../core/quill */ \"./core/quill.js\");\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nvar _module = __webpack_require__(/*! ../core/module */ \"./core/module.js\");\n\nvar _module2 = _interopRequireDefault(_module);\n\nvar _block = __webpack_require__(/*! ../blots/block */ \"./blots/block.js\");\n\nvar _break = __webpack_require__(/*! ../blots/break */ \"./blots/break.js\");\n\nvar _break2 = _interopRequireDefault(_break);\n\nvar _cursor = __webpack_require__(/*! ../blots/cursor */ \"./blots/cursor.js\");\n\nvar _cursor2 = _interopRequireDefault(_cursor);\n\nvar _text = __webpack_require__(/*! ../blots/text */ \"./blots/text.js\");\n\nvar _text2 = _interopRequireDefault(_text);\n\nvar _code = __webpack_require__(/*! ../formats/code */ \"./formats/code.js\");\n\nvar _code2 = _interopRequireDefault(_code);\n\nvar _clipboard = __webpack_require__(/*! ../modules/clipboard */ \"./modules/clipboard.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst TokenAttributor = new _parchment.ClassAttributor('code-token', 'hljs', {\n  scope: _parchment.Scope.INLINE\n});\nclass CodeToken extends _inline2.default {\n  static formats(node, scroll) {\n    while (node != null && node !== scroll.domNode) {\n      if (node.classList.contains(_code2.default.className)) {\n        return super.formats(node, scroll);\n      }\n      node = node.parentNode;\n    }\n    return undefined;\n  }\n\n  constructor(scroll, domNode, value) {\n    super(scroll, domNode, value);\n    TokenAttributor.add(this.domNode, value);\n  }\n\n  format(format, value) {\n    if (format !== CodeToken.blotName) {\n      super.format(format, value);\n    } else if (value) {\n      TokenAttributor.add(this.domNode, value);\n    } else {\n      TokenAttributor.remove(this.domNode);\n      this.domNode.classList.remove(this.statics.className);\n    }\n  }\n\n  optimize(...args) {\n    super.optimize(...args);\n    if (!TokenAttributor.value(this.domNode)) {\n      this.unwrap();\n    }\n  }\n}\nCodeToken.blotName = 'code-token';\nCodeToken.className = 'ql-token';\n\nclass SyntaxCodeBlock extends _code2.default {\n  static create(value) {\n    const domNode = super.create(value);\n    if (typeof value === 'string') {\n      domNode.setAttribute('data-language', value);\n    }\n    return domNode;\n  }\n\n  static formats(domNode) {\n    return domNode.getAttribute('data-language') || 'plain';\n  }\n\n  static register() {} // Syntax module will register\n\n  delta() {\n    if (this.cache.delta == null) {\n      const delta = super.delta();\n      this.cache.delta = delta.compose(new _quillDelta2.default().retain(delta.length(), {\n        [CodeToken.blotName]: null\n      }));\n    }\n    return this.cache.delta;\n  }\n\n  format(name, value) {\n    if (name === this.statics.blotName && value) {\n      this.domNode.setAttribute('data-language', value);\n    } else {\n      super.format(name, value);\n    }\n  }\n\n  replaceWith(name, value) {\n    this.formatAt(0, this.length(), CodeToken.blotName, false);\n    return super.replaceWith(name, value);\n  }\n}\n\nclass SyntaxCodeBlockContainer extends _code.CodeBlockContainer {\n  attach() {\n    super.attach();\n    this.forceNext = false;\n    this.scroll.emitMount(this);\n  }\n\n  format(name, value) {\n    if (name === SyntaxCodeBlock.blotName) {\n      this.forceNext = true;\n      this.children.forEach(child => {\n        child.format(name, value);\n      });\n    }\n  }\n\n  formatAt(index, length, name, value) {\n    if (name === SyntaxCodeBlock.blotName) {\n      this.forceNext = true;\n    }\n    super.formatAt(index, length, name, value);\n  }\n\n  highlight(highlight, forced = false) {\n    if (this.children.head == null) return;\n    const nodes = Array.from(this.domNode.childNodes).filter(node => node !== this.uiNode);\n    const text = `${nodes.map(node => node.textContent).join('\\n')}\\n`;\n    const language = SyntaxCodeBlock.formats(this.children.head.domNode);\n    if (forced || this.forceNext || this.cachedText !== text) {\n      if (text.trim().length > 0 || this.cachedText == null) {\n        const oldDelta = this.children.reduce((delta, child) => {\n          return delta.concat((0, _block.blockDelta)(child));\n        }, new _quillDelta2.default());\n        const delta = highlight(text, language);\n        oldDelta.diff(delta).reduce((index, { retain, attributes }) => {\n          // Should be all retains\n          if (!retain) return index;\n          if (attributes) {\n            Object.keys(attributes).forEach(format => {\n              if ([SyntaxCodeBlock.blotName, CodeToken.blotName].includes(format)) {\n                this.formatAt(index, retain, format, attributes[format]);\n              }\n            });\n          }\n          return index + retain;\n        }, 0);\n      }\n      this.cachedText = text;\n      this.forceNext = false;\n    }\n  }\n\n  optimize(context) {\n    super.optimize(context);\n    if (this.parent != null && this.children.head != null && this.uiNode != null) {\n      const language = SyntaxCodeBlock.formats(this.children.head.domNode);\n      if (language !== this.uiNode.value) {\n        this.uiNode.value = language;\n      }\n    }\n  }\n}\nSyntaxCodeBlockContainer.allowedChildren = [SyntaxCodeBlock];\nSyntaxCodeBlock.requiredContainer = SyntaxCodeBlockContainer;\nSyntaxCodeBlock.allowedChildren = [CodeToken, _cursor2.default, _text2.default, _break2.default];\n\nclass Syntax extends _module2.default {\n  static register() {\n    _quill2.default.register(CodeToken, true);\n    _quill2.default.register(SyntaxCodeBlock, true);\n    _quill2.default.register(SyntaxCodeBlockContainer, true);\n  }\n\n  constructor(quill, options) {\n    super(quill, options);\n    if (this.options.hljs == null) {\n      throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');\n    }\n    this.highlightBlot = this.highlightBlot.bind(this);\n    this.initListener();\n    this.initTimer();\n  }\n\n  initListener() {\n    this.quill.on(_quill2.default.events.SCROLL_BLOT_MOUNT, blot => {\n      if (!(blot instanceof SyntaxCodeBlockContainer)) return;\n      const select = this.quill.root.ownerDocument.createElement('select');\n      this.options.languages.forEach(({ key, label }) => {\n        const option = select.ownerDocument.createElement('option');\n        option.textContent = label;\n        option.setAttribute('value', key);\n        select.appendChild(option);\n      });\n      select.addEventListener('change', () => {\n        blot.format(SyntaxCodeBlock.blotName, select.value);\n        this.quill.root.focus(); // Prevent scrolling\n        this.highlight(blot, true);\n      });\n      if (blot.uiNode == null) {\n        blot.attachUI(select);\n        if (blot.children.head) {\n          select.value = SyntaxCodeBlock.formats(blot.children.head.domNode);\n        }\n      }\n    });\n  }\n\n  initTimer() {\n    let timer = null;\n    this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, () => {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        this.highlight();\n        timer = null;\n      }, this.options.interval);\n    });\n  }\n\n  highlight(blot = null, force = false) {\n    if (this.quill.selection.composing) return;\n    this.quill.update(_quill2.default.sources.USER);\n    const range = this.quill.getSelection();\n    const blots = blot == null ? this.quill.scroll.descendants(SyntaxCodeBlockContainer) : [blot];\n    blots.forEach(container => {\n      container.highlight(this.highlightBlot, force);\n    });\n    this.quill.update(_quill2.default.sources.SILENT);\n    if (range != null) {\n      this.quill.setSelection(range, _quill2.default.sources.SILENT);\n    }\n  }\n\n  highlightBlot(text, language = 'plain') {\n    if (language === 'plain') {\n      return text.replace(/[&<>\"']/g, s => {\n        // https://lodash.com/docs#escape\n        const entityMap = {\n          '&': '&amp;',\n          '<': '&lt;',\n          '>': '&gt;',\n          '\"': '&quot;',\n          \"'\": '&#39;'\n        };\n        return entityMap[s];\n      }).split('\\n').reduce((delta, line, i) => {\n        if (i !== 0) {\n          delta.insert('\\n', { [_code2.default.blotName]: language });\n        }\n        return delta.insert(line);\n      }, new _quillDelta2.default());\n    }\n    const container = this.quill.root.ownerDocument.createElement('div');\n    container.classList.add(_code2.default.className);\n    container.innerHTML = this.options.hljs.highlight(language, text).value;\n    return (0, _clipboard.traverse)(this.quill.scroll, container, [(node, delta) => {\n      const value = TokenAttributor.value(node);\n      if (value) {\n        return delta.compose(new _quillDelta2.default().retain(delta.length(), {\n          [CodeToken.blotName]: value\n        }));\n      }\n      return delta;\n    }], [(node, delta) => {\n      return node.data.split('\\n').reduce((memo, nodeText, i) => {\n        if (i !== 0) memo.insert('\\n', { [_code2.default.blotName]: language });\n        return memo.insert(nodeText);\n      }, delta);\n    }], new WeakMap());\n  }\n}\nSyntax.DEFAULTS = {\n  hljs: (() => {\n    return window.hljs;\n  })(),\n  interval: 1000,\n  languages: [{ key: 'plain', label: 'Plain' }, { key: 'bash', label: 'Bash' }, { key: 'cpp', label: 'C++' }, { key: 'cs', label: 'C#' }, { key: 'css', label: 'CSS' }, { key: 'diff', label: 'Diff' }, { key: 'xml', label: 'HTML/XML' }, { key: 'java', label: 'Java' }, { key: 'javascript', label: 'Javascript' }, { key: 'markdown', label: 'Markdown' }, { key: 'php', label: 'PHP' }, { key: 'python', label: 'Python' }, { key: 'ruby', label: 'Ruby' }, { key: 'sql', label: 'SQL' }]\n};\n\nexports.CodeBlock = SyntaxCodeBlock;\nexports.CodeToken = CodeToken;\nexports.default = Syntax;\n\n//# sourceURL=webpack://Quill/./modules/syntax.js?");

	/***/ }),

	/***/ "./modules/table.js":
	/*!**************************!*\
	  !*** ./modules/table.js ***!
	  \**************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _quillDelta = __webpack_require__(/*! quill-delta */ \"./node_modules/quill-delta/lib/delta.js\");\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _quill = __webpack_require__(/*! ../core/quill */ \"./core/quill.js\");\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nvar _module = __webpack_require__(/*! ../core/module */ \"./core/module.js\");\n\nvar _module2 = _interopRequireDefault(_module);\n\nvar _table = __webpack_require__(/*! ../formats/table */ \"./formats/table.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Table extends _module2.default {\n  static register() {\n    _quill2.default.register(_table.TableCell);\n    _quill2.default.register(_table.TableRow);\n    _quill2.default.register(_table.TableBody);\n    _quill2.default.register(_table.TableContainer);\n  }\n\n  constructor(...args) {\n    super(...args);\n    this.listenBalanceCells();\n  }\n\n  balanceTables() {\n    this.quill.scroll.descendants(_table.TableContainer).forEach(table => {\n      table.balanceCells();\n    });\n  }\n\n  deleteColumn() {\n    var _getTable = this.getTable(),\n        _getTable2 = _slicedToArray(_getTable, 3);\n\n    const table = _getTable2[0],\n          row = _getTable2[1],\n          cell = _getTable2[2];\n\n    if (cell == null) return;\n    const column = row.children.indexOf(cell);\n    table.deleteColumn(column);\n    this.quill.update(_quill2.default.sources.USER);\n  }\n\n  deleteRow() {\n    var _getTable3 = this.getTable(),\n        _getTable4 = _slicedToArray(_getTable3, 2);\n\n    const row = _getTable4[1];\n\n    if (row == null) return;\n    row.remove();\n    this.quill.update(_quill2.default.sources.USER);\n  }\n\n  deleteTable() {\n    var _getTable5 = this.getTable(),\n        _getTable6 = _slicedToArray(_getTable5, 1);\n\n    const table = _getTable6[0];\n\n    if (table == null) return;\n    const offset = table.offset();\n    table.remove();\n    this.quill.update(_quill2.default.sources.USER);\n    this.quill.setSelection(offset, _quill2.default.sources.SILENT);\n  }\n\n  getTable(range = this.quill.getSelection()) {\n    if (range == null) return [null, null, null, -1];\n\n    var _quill$getLine = this.quill.getLine(range.index),\n        _quill$getLine2 = _slicedToArray(_quill$getLine, 2);\n\n    const cell = _quill$getLine2[0],\n          offset = _quill$getLine2[1];\n\n    if (cell == null || cell.statics.blotName !== _table.TableCell.blotName) {\n      return [null, null, null, -1];\n    }\n    const row = cell.parent;\n    const table = row.parent.parent;\n    return [table, row, cell, offset];\n  }\n\n  insertColumn(offset) {\n    const range = this.quill.getSelection();\n\n    var _getTable7 = this.getTable(range),\n        _getTable8 = _slicedToArray(_getTable7, 3);\n\n    const table = _getTable8[0],\n          row = _getTable8[1],\n          cell = _getTable8[2];\n\n    if (cell == null) return;\n    const column = row.children.offset(cell);\n    table.insertColumn(column + offset);\n    this.quill.update(_quill2.default.sources.USER);\n    let shift = row.parent.children.indexOf(row);\n    if (offset === 0) {\n      shift += 1;\n    }\n    this.quill.setSelection(range.index + shift, range.length, _quill2.default.sources.SILENT);\n  }\n\n  insertColumnLeft() {\n    this.insertColumn(0);\n  }\n\n  insertColumnRight() {\n    this.insertColumn(1);\n  }\n\n  insertRow(offset) {\n    const range = this.quill.getSelection();\n\n    var _getTable9 = this.getTable(range),\n        _getTable10 = _slicedToArray(_getTable9, 3);\n\n    const table = _getTable10[0],\n          row = _getTable10[1],\n          cell = _getTable10[2];\n\n    if (cell == null) return;\n    const index = row.parent.children.indexOf(row);\n    table.insertRow(index + offset);\n    this.quill.update(_quill2.default.sources.USER);\n    if (offset > 0) {\n      this.quill.setSelection(range, _quill2.default.sources.SILENT);\n    } else {\n      this.quill.setSelection(range.index + row.children.length, range.length, _quill2.default.sources.SILENT);\n    }\n  }\n\n  insertRowAbove() {\n    this.insertRow(0);\n  }\n\n  insertRowBelow() {\n    this.insertRow(1);\n  }\n\n  insertTable(rows, columns) {\n    const range = this.quill.getSelection();\n    if (range == null) return;\n    const delta = new Array(rows).fill(0).reduce(memo => {\n      const text = new Array(columns).fill('\\n').join('');\n      return memo.insert(text, { table: (0, _table.tableId)() });\n    }, new _quillDelta2.default().retain(range.index));\n    this.quill.updateContents(delta, _quill2.default.sources.USER);\n    this.quill.setSelection(range.index, _quill2.default.sources.SILENT);\n    this.balanceTables();\n  }\n\n  listenBalanceCells() {\n    this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, mutations => {\n      mutations.some(mutation => {\n        if (mutation.target.tagName === 'TABLE') {\n          this.quill.once(_quill2.default.events.TEXT_CHANGE, (delta, old, source) => {\n            if (source !== _quill2.default.sources.USER) return;\n            this.balanceTables();\n          });\n          return true;\n        }\n        return false;\n      });\n    });\n  }\n}\n\nexports.default = Table;\n\n//# sourceURL=webpack://Quill/./modules/table.js?");

	/***/ }),

	/***/ "./modules/toolbar.js":
	/*!****************************!*\
	  !*** ./modules/toolbar.js ***!
	  \****************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addControls = exports.default = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _quillDelta = __webpack_require__(/*! quill-delta */ \"./node_modules/quill-delta/lib/delta.js\");\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _parchment = __webpack_require__(/*! parchment */ \"./node_modules/parchment/src/parchment.ts\");\n\nvar _quill = __webpack_require__(/*! ../core/quill */ \"./core/quill.js\");\n\nvar _quill2 = _interopRequireDefault(_quill);\n\nvar _logger = __webpack_require__(/*! ../core/logger */ \"./core/logger.js\");\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar _module = __webpack_require__(/*! ../core/module */ \"./core/module.js\");\n\nvar _module2 = _interopRequireDefault(_module);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst debug = (0, _logger2.default)('quill:toolbar');\n\nclass Toolbar extends _module2.default {\n  constructor(quill, options) {\n    super(quill, options);\n    if (Array.isArray(this.options.container)) {\n      const container = document.createElement('div');\n      addControls(container, this.options.container);\n      quill.container.parentNode.insertBefore(container, quill.container);\n      this.container = container;\n    } else if (typeof this.options.container === 'string') {\n      this.container = document.querySelector(this.options.container);\n    } else {\n      this.container = this.options.container;\n    }\n    if (!(this.container instanceof HTMLElement)) {\n      return debug.error('Container required for toolbar', this.options);\n    }\n    this.container.classList.add('ql-toolbar');\n    this.controls = [];\n    this.handlers = {};\n    Object.keys(this.options.handlers).forEach(format => {\n      this.addHandler(format, this.options.handlers[format]);\n    });\n    Array.from(this.container.querySelectorAll('button, select')).forEach(input => {\n      this.attach(input);\n    });\n    this.quill.on(_quill2.default.events.EDITOR_CHANGE, (type, range) => {\n      if (type === _quill2.default.events.SELECTION_CHANGE) {\n        this.update(range);\n      }\n    });\n    this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, () => {\n      var _quill$selection$getR = this.quill.selection.getRange(),\n          _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1);\n\n      const range = _quill$selection$getR2[0]; // quill.getSelection triggers update\n\n      this.update(range);\n    });\n  }\n\n  addHandler(format, handler) {\n    this.handlers[format] = handler;\n  }\n\n  attach(input) {\n    let format = Array.from(input.classList).find(className => {\n      return className.indexOf('ql-') === 0;\n    });\n    if (!format) return;\n    format = format.slice('ql-'.length);\n    if (input.tagName === 'BUTTON') {\n      input.setAttribute('type', 'button');\n    }\n    if (this.handlers[format] == null && this.quill.scroll.query(format) == null) {\n      debug.warn('ignoring attaching to nonexistent format', format, input);\n      return;\n    }\n    const eventName = input.tagName === 'SELECT' ? 'change' : 'click';\n    input.addEventListener(eventName, e => {\n      let value;\n      if (input.tagName === 'SELECT') {\n        if (input.selectedIndex < 0) return;\n        const selected = input.options[input.selectedIndex];\n        if (selected.hasAttribute('selected')) {\n          value = false;\n        } else {\n          value = selected.value || false;\n        }\n      } else {\n        if (input.classList.contains('ql-active')) {\n          value = false;\n        } else {\n          value = input.value || !input.hasAttribute('value');\n        }\n        e.preventDefault();\n      }\n      this.quill.focus();\n\n      var _quill$selection$getR3 = this.quill.selection.getRange(),\n          _quill$selection$getR4 = _slicedToArray(_quill$selection$getR3, 1);\n\n      const range = _quill$selection$getR4[0];\n\n      if (this.handlers[format] != null) {\n        this.handlers[format].call(this, value);\n      } else if (this.quill.scroll.query(format).prototype instanceof _parchment.EmbedBlot) {\n        value = prompt(`Enter ${format}`); // eslint-disable-line no-alert\n        if (!value) return;\n        this.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({ [format]: value }), _quill2.default.sources.USER);\n      } else {\n        this.quill.format(format, value, _quill2.default.sources.USER);\n      }\n      this.update(range);\n    });\n    this.controls.push([format, input]);\n  }\n\n  update(range) {\n    const formats = range == null ? {} : this.quill.getFormat(range);\n    this.controls.forEach(pair => {\n      var _pair = _slicedToArray(pair, 2);\n\n      const format = _pair[0],\n            input = _pair[1];\n\n      if (input.tagName === 'SELECT') {\n        let option;\n        if (range == null) {\n          option = null;\n        } else if (formats[format] == null) {\n          option = input.querySelector('option[selected]');\n        } else if (!Array.isArray(formats[format])) {\n          let value = formats[format];\n          if (typeof value === 'string') {\n            value = value.replace(/\"/g, '\\\\\"');\n          }\n          option = input.querySelector(`option[value=\"${value}\"]`);\n        }\n        if (option == null) {\n          input.value = ''; // TODO make configurable?\n          input.selectedIndex = -1;\n        } else {\n          option.selected = true;\n        }\n      } else if (range == null) {\n        input.classList.remove('ql-active');\n      } else if (input.hasAttribute('value')) {\n        // both being null should match (default values)\n        // '1' should match with 1 (headers)\n        const isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');\n        input.classList.toggle('ql-active', isActive);\n      } else {\n        input.classList.toggle('ql-active', formats[format] != null);\n      }\n    });\n  }\n}\nToolbar.DEFAULTS = {};\n\nfunction addButton(container, format, value) {\n  const input = document.createElement('button');\n  input.setAttribute('type', 'button');\n  input.classList.add(`ql-${format}`);\n  if (value != null) {\n    input.value = value;\n  }\n  container.appendChild(input);\n}\n\nfunction addControls(container, groups) {\n  if (!Array.isArray(groups[0])) {\n    groups = [groups];\n  }\n  groups.forEach(controls => {\n    const group = document.createElement('span');\n    group.classList.add('ql-formats');\n    controls.forEach(control => {\n      if (typeof control === 'string') {\n        addButton(group, control);\n      } else {\n        const format = Object.keys(control)[0];\n        const value = control[format];\n        if (Array.isArray(value)) {\n          addSelect(group, format, value);\n        } else {\n          addButton(group, format, value);\n        }\n      }\n    });\n    container.appendChild(group);\n  });\n}\n\nfunction addSelect(container, format, values) {\n  const input = document.createElement('select');\n  input.classList.add(`ql-${format}`);\n  values.forEach(value => {\n    const option = document.createElement('option');\n    if (value !== false) {\n      option.setAttribute('value', value);\n    } else {\n      option.setAttribute('selected', 'selected');\n    }\n    input.appendChild(option);\n  });\n  container.appendChild(input);\n}\n\nToolbar.DEFAULTS = {\n  container: null,\n  handlers: {\n    clean() {\n      const range = this.quill.getSelection();\n      if (range == null) return;\n      if (range.length === 0) {\n        const formats = this.quill.getFormat();\n        Object.keys(formats).forEach(name => {\n          // Clean functionality in existing apps only clean inline formats\n          if (this.quill.scroll.query(name, _parchment.Scope.INLINE) != null) {\n            this.quill.format(name, false, _quill2.default.sources.USER);\n          }\n        });\n      } else {\n        this.quill.removeFormat(range, _quill2.default.sources.USER);\n      }\n    },\n    direction(value) {\n      var _quill$getFormat = this.quill.getFormat();\n\n      const align = _quill$getFormat.align;\n\n      if (value === 'rtl' && align == null) {\n        this.quill.format('align', 'right', _quill2.default.sources.USER);\n      } else if (!value && align === 'right') {\n        this.quill.format('align', false, _quill2.default.sources.USER);\n      }\n      this.quill.format('direction', value, _quill2.default.sources.USER);\n    },\n    indent(value) {\n      const range = this.quill.getSelection();\n      const formats = this.quill.getFormat(range);\n      const indent = parseInt(formats.indent || 0, 10);\n      if (value === '+1' || value === '-1') {\n        let modifier = value === '+1' ? 1 : -1;\n        if (formats.direction === 'rtl') modifier *= -1;\n        this.quill.format('indent', indent + modifier, _quill2.default.sources.USER);\n      }\n    },\n    link(value) {\n      if (value === true) {\n        value = prompt('Enter link URL:'); // eslint-disable-line no-alert\n      }\n      this.quill.format('link', value, _quill2.default.sources.USER);\n    },\n    list(value) {\n      const range = this.quill.getSelection();\n      const formats = this.quill.getFormat(range);\n      if (value === 'check') {\n        if (formats.list === 'checked' || formats.list === 'unchecked') {\n          this.quill.format('list', false, _quill2.default.sources.USER);\n        } else {\n          this.quill.format('list', 'unchecked', _quill2.default.sources.USER);\n        }\n      } else {\n        this.quill.format('list', value, _quill2.default.sources.USER);\n      }\n    }\n  }\n};\n\nexports.default = Toolbar;\nexports.addControls = addControls;\n\n//# sourceURL=webpack://Quill/./modules/toolbar.js?");

	/***/ }),

	/***/ "./modules/uploader.js":
	/*!*****************************!*\
	  !*** ./modules/uploader.js ***!
	  \*****************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _quillDelta = __webpack_require__(/*! quill-delta */ \"./node_modules/quill-delta/lib/delta.js\");\n\nvar _quillDelta2 = _interopRequireDefault(_quillDelta);\n\nvar _emitter = __webpack_require__(/*! ../core/emitter */ \"./core/emitter.js\");\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nvar _module = __webpack_require__(/*! ../core/module */ \"./core/module.js\");\n\nvar _module2 = _interopRequireDefault(_module);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Uploader extends _module2.default {\n  constructor(quill, options) {\n    super(quill, options);\n    quill.root.addEventListener('drop', e => {\n      e.preventDefault();\n      let native;\n      if (document.caretRangeFromPoint) {\n        native = document.caretRangeFromPoint(e.clientX, e.clientY);\n      } else if (document.caretPositionFromPoint) {\n        const position = document.caretPositionFromPoint(e.clientX, e.clientY);\n        native = document.createRange();\n        native.setStart(position.offsetNode, position.offset);\n        native.setEnd(position.offsetNode, position.offset);\n      } else {\n        return;\n      }\n      const normalized = quill.selection.normalizeNative(native);\n      const range = quill.selection.normalizedToRange(normalized);\n      this.upload(range, e.dataTransfer.files);\n    });\n  }\n\n  upload(range, files) {\n    const uploads = [];\n    Array.from(files).forEach(file => {\n      if (file && this.options.mimetypes.includes(file.type)) {\n        uploads.push(file);\n      }\n    });\n    if (uploads.length > 0) {\n      this.options.handler.call(this, range, uploads);\n    }\n  }\n}\n\nUploader.DEFAULTS = {\n  mimetypes: ['image/png', 'image/jpeg'],\n  handler(range, files) {\n    const promises = files.map(file => {\n      return new Promise(resolve => {\n        const reader = new FileReader();\n        reader.onload = e => {\n          resolve(e.target.result);\n        };\n        reader.readAsDataURL(file);\n      });\n    });\n    Promise.all(promises).then(images => {\n      const update = images.reduce((delta, image) => {\n        return delta.insert({ image });\n      }, new _quillDelta2.default().retain(range.index).delete(range.length));\n      this.quill.updateContents(update, _emitter2.default.sources.USER);\n      this.quill.setSelection(range.index + images.length, _emitter2.default.sources.SILENT);\n    });\n  }\n};\n\nexports.default = Uploader;\n\n//# sourceURL=webpack://Quill/./modules/uploader.js?");

	/***/ }),

	/***/ "./node_modules/clone/clone.js":
	/*!*************************************!*\
	  !*** ./node_modules/clone/clone.js ***!
	  \*************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("var clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n\n\n//# sourceURL=webpack://Quill/./node_modules/clone/clone.js?");

	/***/ }),

	/***/ "./node_modules/deep-equal/index.js":
	/*!******************************************!*\
	  !*** ./node_modules/deep-equal/index.js ***!
	  \******************************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	eval("var pSlice = Array.prototype.slice;\nvar objectKeys = __webpack_require__(/*! ./lib/keys.js */ \"./node_modules/deep-equal/lib/keys.js\");\nvar isArguments = __webpack_require__(/*! ./lib/is_arguments.js */ \"./node_modules/deep-equal/lib/is_arguments.js\");\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n\n\n//# sourceURL=webpack://Quill/./node_modules/deep-equal/index.js?");

	/***/ }),

	/***/ "./node_modules/deep-equal/lib/is_arguments.js":
	/*!*****************************************************!*\
	  !*** ./node_modules/deep-equal/lib/is_arguments.js ***!
	  \*****************************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n\n\n//# sourceURL=webpack://Quill/./node_modules/deep-equal/lib/is_arguments.js?");

	/***/ }),

	/***/ "./node_modules/deep-equal/lib/keys.js":
	/*!*********************************************!*\
	  !*** ./node_modules/deep-equal/lib/keys.js ***!
	  \*********************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n\n\n//# sourceURL=webpack://Quill/./node_modules/deep-equal/lib/keys.js?");

	/***/ }),

	/***/ "./node_modules/eventemitter3/index.js":
	/*!*********************************************!*\
	  !*** ./node_modules/eventemitter3/index.js ***!
	  \*********************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n\n\n//# sourceURL=webpack://Quill/./node_modules/eventemitter3/index.js?");

	/***/ }),

	/***/ "./node_modules/extend/index.js":
	/*!**************************************!*\
	  !*** ./node_modules/extend/index.js ***!
	  \**************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n//# sourceURL=webpack://Quill/./node_modules/extend/index.js?");

	/***/ }),

	/***/ "./node_modules/fast-diff/diff.js":
	/*!****************************************!*\
	  !*** ./node_modules/fast-diff/diff.js ***!
	  \****************************************/
	/*! no static exports found */
	/***/ (function(module, exports) {

	eval("/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int} cursor_pos Expected edit position in text1 (optional)\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos) {\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  // Check cursor_pos within bounds\n  if (cursor_pos < 0 || text1.length < cursor_pos) {\n    cursor_pos = null;\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs);\n  if (cursor_pos != null) {\n    diffs = fix_cursor(diffs, cursor_pos);\n  }\n  diffs = fix_emoji(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n             [DIFF_EQUAL, shorttext],\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = diff_commonPrefix(longtext.substring(i),\n                                           shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(longtext.substring(0, i),\n                                           shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n */\nfunction diff_cleanupMerge(diffs) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL,\n                                    text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert,\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete,\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\n                [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert +\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs);\n  }\n};\n\n\nvar diff = diff_main;\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\nmodule.exports = diff;\n\n/*\n * Modify a diff such that the cursor position points to the start of a change:\n * E.g.\n *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)\n *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]\n *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)\n *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} A tuple [cursor location in the modified diff, modified diff]\n */\nfunction cursor_normalize_diff (diffs, cursor_pos) {\n  if (cursor_pos === 0) {\n    return [DIFF_EQUAL, diffs];\n  }\n  for (var current_pos = 0, i = 0; i < diffs.length; i++) {\n    var d = diffs[i];\n    if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {\n      var next_pos = current_pos + d[1].length;\n      if (cursor_pos === next_pos) {\n        return [i + 1, diffs];\n      } else if (cursor_pos < next_pos) {\n        // copy to prevent side effects\n        diffs = diffs.slice();\n        // split d into two diff changes\n        var split_pos = cursor_pos - current_pos;\n        var d_left = [d[0], d[1].slice(0, split_pos)];\n        var d_right = [d[0], d[1].slice(split_pos)];\n        diffs.splice(i, 1, d_left, d_right);\n        return [i + 1, diffs];\n      } else {\n        current_pos = next_pos;\n      }\n    }\n  }\n  throw new Error('cursor_pos is out of bounds!')\n}\n\n/*\n * Modify a diff such that the edit position is \"shifted\" to the proposed edit location (cursor_position).\n *\n * Case 1)\n *   Check if a naive shift is possible:\n *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)\n *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result\n * Case 2)\n *   Check if the following shifts are possible:\n *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']\n *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']\n *         ^            ^\n *         d          d_next\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} Array of diff tuples\n */\nfunction fix_cursor (diffs, cursor_pos) {\n  var norm = cursor_normalize_diff(diffs, cursor_pos);\n  var ndiffs = norm[1];\n  var cursor_pointer = norm[0];\n  var d = ndiffs[cursor_pointer];\n  var d_next = ndiffs[cursor_pointer + 1];\n\n  if (d == null) {\n    // Text was deleted from end of original string,\n    // cursor is now out of bounds in new string\n    return diffs;\n  } else if (d[0] !== DIFF_EQUAL) {\n    // A modification happened at the cursor location.\n    // This is the expected outcome, so we can return the original diff.\n    return diffs;\n  } else {\n    if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {\n      // Case 1)\n      // It is possible to perform a naive shift\n      ndiffs.splice(cursor_pointer, 2, d_next, d)\n      return merge_tuples(ndiffs, cursor_pointer, 2)\n    } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {\n      // Case 2)\n      // d[1] is a prefix of d_next[1]\n      // We can assume that d_next[0] !== 0, since d[0] === 0\n      // Shift edit locations..\n      ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);\n      var suffix = d_next[1].slice(d[1].length);\n      if (suffix.length > 0) {\n        ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);\n      }\n      return merge_tuples(ndiffs, cursor_pointer, 3)\n    } else {\n      // Not possible to perform any modification\n      return diffs;\n    }\n  }\n}\n\n/*\n * Check diff did not split surrogate pairs.\n * Ex. [0, '\\uD83D'], [-1, '\\uDC36'], [1, '\\uDC2F'] -> [-1, '\\uD83D\\uDC36'], [1, '\\uD83D\\uDC2F']\n *     '\\uD83D\\uDC36' === '🐶', '\\uD83D\\uDC2F' === '🐯'\n *\n * @param {Array} diffs Array of diff tuples\n * @return {Array} Array of diff tuples\n */\nfunction fix_emoji (diffs) {\n  var compact = false;\n  var starts_with_pair_end = function(str) {\n    return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;\n  }\n  var ends_with_pair_start = function(str) {\n    return str.charCodeAt(str.length-1) >= 0xD800 && str.charCodeAt(str.length-1) <= 0xDBFF;\n  }\n  for (var i = 2; i < diffs.length; i += 1) {\n    if (diffs[i-2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i-2][1]) &&\n        diffs[i-1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i-1][1]) &&\n        diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {\n      compact = true;\n\n      diffs[i-1][1] = diffs[i-2][1].slice(-1) + diffs[i-1][1];\n      diffs[i][1] = diffs[i-2][1].slice(-1) + diffs[i][1];\n\n      diffs[i-2][1] = diffs[i-2][1].slice(0, -1);\n    }\n  }\n  if (!compact) {\n    return diffs;\n  }\n  var fixed_diffs = [];\n  for (var i = 0; i < diffs.length; i += 1) {\n    if (diffs[i][1].length > 0) {\n      fixed_diffs.push(diffs[i]);\n    }\n  }\n  return fixed_diffs;\n}\n\n/*\n * Try to merge tuples with their neigbors in a given range.\n * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']\n *\n * @param {Array} diffs Array of diff tuples.\n * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).\n * @param {Int} length Number of consecutive elements to check.\n * @return {Array} Array of merged diff tuples.\n */\nfunction merge_tuples (diffs, start, length) {\n  // Check from (start-1) to (start+length).\n  for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {\n    if (i + 1 < diffs.length) {\n      var left_d = diffs[i];\n      var right_d = diffs[i+1];\n      if (left_d[0] === right_d[1]) {\n        diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);\n      }\n    }\n  }\n  return diffs;\n}\n\n\n//# sourceURL=webpack://Quill/./node_modules/fast-diff/diff.js?");

	/***/ }),

	/***/ "./node_modules/parchment/src/attributor/attributor.ts":
	/*!*************************************************************!*\
	  !*** ./node_modules/parchment/src/attributor/attributor.ts ***!
	  \*************************************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Attributor; });\n/* harmony import */ var _scope__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scope */ \"./node_modules/parchment/src/scope.ts\");\n\nclass Attributor {\n    static keys(node) {\n        return Array.from(node.attributes).map(function (item) {\n            return item.name;\n        });\n    }\n    constructor(attrName, keyName, options = {}) {\n        this.attrName = attrName;\n        this.keyName = keyName;\n        let attributeBit = _scope__WEBPACK_IMPORTED_MODULE_0__[\"default\"].TYPE & _scope__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ATTRIBUTE;\n        if (options.scope != null) {\n            // Ignore type bits, force attribute bit\n            this.scope = (options.scope & _scope__WEBPACK_IMPORTED_MODULE_0__[\"default\"].LEVEL) | attributeBit;\n        }\n        else {\n            this.scope = _scope__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ATTRIBUTE;\n        }\n        if (options.whitelist != null)\n            this.whitelist = options.whitelist;\n    }\n    add(node, value) {\n        if (!this.canAdd(node, value))\n            return false;\n        node.setAttribute(this.keyName, value);\n        return true;\n    }\n    canAdd(node, value) {\n        if (this.whitelist == null)\n            return true;\n        if (typeof value === 'string') {\n            return this.whitelist.indexOf(value.replace(/[\"']/g, '')) > -1;\n        }\n        else {\n            return this.whitelist.indexOf(value) > -1;\n        }\n    }\n    remove(node) {\n        node.removeAttribute(this.keyName);\n    }\n    value(node) {\n        let value = node.getAttribute(this.keyName);\n        if (this.canAdd(node, value) && value) {\n            return value;\n        }\n        return '';\n    }\n}\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/attributor/attributor.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/attributor/class.ts":
	/*!********************************************************!*\
	  !*** ./node_modules/parchment/src/attributor/class.ts ***!
	  \********************************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _attributor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./attributor */ \"./node_modules/parchment/src/attributor/attributor.ts\");\n\nfunction match(node, prefix) {\n    let className = node.getAttribute('class') || '';\n    return className.split(/\\s+/).filter(function (name) {\n        return name.indexOf(`${prefix}-`) === 0;\n    });\n}\nclass ClassAttributor extends _attributor__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    static keys(node) {\n        return (node.getAttribute('class') || '').split(/\\s+/).map(function (name) {\n            return name\n                .split('-')\n                .slice(0, -1)\n                .join('-');\n        });\n    }\n    add(node, value) {\n        if (!this.canAdd(node, value))\n            return false;\n        this.remove(node);\n        node.classList.add(`${this.keyName}-${value}`);\n        return true;\n    }\n    remove(node) {\n        let matches = match(node, this.keyName);\n        matches.forEach(function (name) {\n            node.classList.remove(name);\n        });\n        if (node.classList.length === 0) {\n            node.removeAttribute('class');\n        }\n    }\n    value(node) {\n        let result = match(node, this.keyName)[0] || '';\n        let value = result.slice(this.keyName.length + 1); // +1 for hyphen\n        return this.canAdd(node, value) ? value : '';\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (ClassAttributor);\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/attributor/class.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/attributor/store.ts":
	/*!********************************************************!*\
	  !*** ./node_modules/parchment/src/attributor/store.ts ***!
	  \********************************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _attributor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./attributor */ \"./node_modules/parchment/src/attributor/attributor.ts\");\n/* harmony import */ var _class__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./class */ \"./node_modules/parchment/src/attributor/class.ts\");\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./style */ \"./node_modules/parchment/src/attributor/style.ts\");\n/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../registry */ \"./node_modules/parchment/src/registry.ts\");\n/* harmony import */ var _scope__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scope */ \"./node_modules/parchment/src/scope.ts\");\n\n\n\n\n\nclass AttributorStore {\n    constructor(domNode) {\n        this.attributes = {};\n        this.domNode = domNode;\n        this.build();\n    }\n    attribute(attribute, value) {\n        // verb\n        if (value) {\n            if (attribute.add(this.domNode, value)) {\n                if (attribute.value(this.domNode) != null) {\n                    this.attributes[attribute.attrName] = attribute;\n                }\n                else {\n                    delete this.attributes[attribute.attrName];\n                }\n            }\n        }\n        else {\n            attribute.remove(this.domNode);\n            delete this.attributes[attribute.attrName];\n        }\n    }\n    build() {\n        this.attributes = {};\n        const blot = _registry__WEBPACK_IMPORTED_MODULE_3__[\"default\"].find(this.domNode);\n        if (blot == null)\n            return;\n        let attributes = _attributor__WEBPACK_IMPORTED_MODULE_0__[\"default\"].keys(this.domNode);\n        let classes = _class__WEBPACK_IMPORTED_MODULE_1__[\"default\"].keys(this.domNode);\n        let styles = _style__WEBPACK_IMPORTED_MODULE_2__[\"default\"].keys(this.domNode);\n        attributes\n            .concat(classes)\n            .concat(styles)\n            .forEach(name => {\n            let attr = blot.scroll.query(name, _scope__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ATTRIBUTE);\n            if (attr instanceof _attributor__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n                this.attributes[attr.attrName] = attr;\n            }\n        });\n    }\n    copy(target) {\n        Object.keys(this.attributes).forEach(key => {\n            let value = this.attributes[key].value(this.domNode);\n            target.format(key, value);\n        });\n    }\n    move(target) {\n        this.copy(target);\n        Object.keys(this.attributes).forEach(key => {\n            this.attributes[key].remove(this.domNode);\n        });\n        this.attributes = {};\n    }\n    values() {\n        return Object.keys(this.attributes).reduce((attributes, name) => {\n            attributes[name] = this.attributes[name].value(this.domNode);\n            return attributes;\n        }, {});\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (AttributorStore);\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/attributor/store.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/attributor/style.ts":
	/*!********************************************************!*\
	  !*** ./node_modules/parchment/src/attributor/style.ts ***!
	  \********************************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _attributor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./attributor */ \"./node_modules/parchment/src/attributor/attributor.ts\");\n\nfunction camelize(name) {\n    let parts = name.split('-');\n    let rest = parts\n        .slice(1)\n        .map(function (part) {\n        return part[0].toUpperCase() + part.slice(1);\n    })\n        .join('');\n    return parts[0] + rest;\n}\nclass StyleAttributor extends _attributor__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    static keys(node) {\n        return (node.getAttribute('style') || '').split(';').map(function (value) {\n            let arr = value.split(':');\n            return arr[0].trim();\n        });\n    }\n    add(node, value) {\n        if (!this.canAdd(node, value))\n            return false;\n        // @ts-ignore\n        node.style[camelize(this.keyName)] = value;\n        return true;\n    }\n    remove(node) {\n        // @ts-ignore\n        node.style[camelize(this.keyName)] = '';\n        if (!node.getAttribute('style')) {\n            node.removeAttribute('style');\n        }\n    }\n    value(node) {\n        // @ts-ignore\n        let value = node.style[camelize(this.keyName)];\n        return this.canAdd(node, value) ? value : '';\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (StyleAttributor);\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/attributor/style.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/blot/abstract/container.ts":
	/*!***************************************************************!*\
	  !*** ./node_modules/parchment/src/blot/abstract/container.ts ***!
	  \***************************************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _parent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parent */ \"./node_modules/parchment/src/blot/abstract/parent.ts\");\n/* harmony import */ var _scope__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../scope */ \"./node_modules/parchment/src/scope.ts\");\n\n\nclass ContainerBlot extends _parent__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    checkMerge() {\n        return (this.next !== null && this.next.statics.blotName === this.statics.blotName);\n    }\n    deleteAt(index, length) {\n        super.deleteAt(index, length);\n        this.enforceAllowedChildren();\n    }\n    formatAt(index, length, name, value) {\n        super.formatAt(index, length, name, value);\n        this.enforceAllowedChildren();\n    }\n    insertAt(index, value, def) {\n        super.insertAt(index, value, def);\n        this.enforceAllowedChildren();\n    }\n    optimize(context) {\n        super.optimize(context);\n        if (this.children.length > 0 && this.next != null && this.checkMerge()) {\n            this.next.moveChildren(this);\n            this.next.remove();\n        }\n    }\n}\nContainerBlot.blotName = 'container';\nContainerBlot.scope = _scope__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BLOCK_BLOT;\n/* harmony default export */ __webpack_exports__[\"default\"] = (ContainerBlot);\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/blot/abstract/container.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/blot/abstract/leaf.ts":
	/*!**********************************************************!*\
	  !*** ./node_modules/parchment/src/blot/abstract/leaf.ts ***!
	  \**********************************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _shadow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shadow */ \"./node_modules/parchment/src/blot/abstract/shadow.ts\");\n/* harmony import */ var _scope__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../scope */ \"./node_modules/parchment/src/scope.ts\");\n\n\nclass LeafBlot extends _shadow__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    static value(domNode) {\n        return true;\n    }\n    index(node, offset) {\n        if (this.domNode === node ||\n            this.domNode.compareDocumentPosition(node) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            return Math.min(offset, 1);\n        }\n        return -1;\n    }\n    position(index, inclusive) {\n        const childNodes = Array.from(this.parent.domNode.childNodes);\n        let offset = childNodes.indexOf(this.domNode);\n        if (index > 0)\n            offset += 1;\n        return [this.parent.domNode, offset];\n    }\n    value() {\n        return {\n            [this.statics.blotName]: this.statics.value(this.domNode) || true,\n        };\n    }\n}\nLeafBlot.scope = _scope__WEBPACK_IMPORTED_MODULE_1__[\"default\"].INLINE_BLOT;\n/* harmony default export */ __webpack_exports__[\"default\"] = (LeafBlot);\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/blot/abstract/leaf.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/blot/abstract/parent.ts":
	/*!************************************************************!*\
	  !*** ./node_modules/parchment/src/blot/abstract/parent.ts ***!
	  \************************************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _collection_linked_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../collection/linked-list */ \"./node_modules/parchment/src/collection/linked-list.ts\");\n/* harmony import */ var _shadow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shadow */ \"./node_modules/parchment/src/blot/abstract/shadow.ts\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error */ \"./node_modules/parchment/src/error.ts\");\n/* harmony import */ var _scope__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../scope */ \"./node_modules/parchment/src/scope.ts\");\n\n\n\n\nclass ParentBlot extends _shadow__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(scroll, domNode) {\n        super(scroll, domNode);\n        this.uiNode = null;\n        this.build();\n    }\n    appendChild(other) {\n        this.insertBefore(other);\n    }\n    attach() {\n        super.attach();\n        this.children.forEach(child => {\n            child.attach();\n        });\n    }\n    attachUI(node) {\n        if (this.uiNode != null) {\n            this.uiNode.remove();\n        }\n        this.uiNode = node;\n        this.uiNode.setAttribute('contenteditable', 'false');\n        this.domNode.insertBefore(this.uiNode, this.domNode.firstChild);\n    }\n    build() {\n        this.children = new _collection_linked_list__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        // Need to be reversed for if DOM nodes already in order\n        Array.from(this.domNode.childNodes)\n            .filter((node) => node !== this.uiNode)\n            .reverse()\n            .forEach((node) => {\n            try {\n                let child = makeAttachedBlot(node, this.scroll);\n                this.insertBefore(child, this.children.head || undefined);\n            }\n            catch (err) {\n                if (err instanceof _error__WEBPACK_IMPORTED_MODULE_2__[\"default\"])\n                    return;\n                else\n                    throw err;\n            }\n        });\n    }\n    deleteAt(index, length) {\n        if (index === 0 && length === this.length()) {\n            return this.remove();\n        }\n        this.children.forEachAt(index, length, function (child, offset, length) {\n            child.deleteAt(offset, length);\n        });\n    }\n    descendant(criteria, index = 0) {\n        let [child, offset] = this.children.find(index);\n        if ((criteria.blotName == null && criteria(child)) ||\n            (criteria.blotName != null && child instanceof criteria)) {\n            return [child, offset];\n        }\n        else if (child instanceof ParentBlot) {\n            return child.descendant(criteria, offset);\n        }\n        else {\n            return [null, -1];\n        }\n    }\n    descendants(criteria, index = 0, length = Number.MAX_VALUE) {\n        let descendants = [];\n        let lengthLeft = length;\n        this.children.forEachAt(index, length, function (child, index, length) {\n            if ((criteria.blotName == null && criteria(child)) ||\n                (criteria.blotName != null && child instanceof criteria)) {\n                descendants.push(child);\n            }\n            if (child instanceof ParentBlot) {\n                descendants = descendants.concat(child.descendants(criteria, index, lengthLeft));\n            }\n            lengthLeft -= length;\n        });\n        return descendants;\n    }\n    detach() {\n        this.children.forEach(function (child) {\n            child.detach();\n        });\n        super.detach();\n    }\n    enforceAllowedChildren() {\n        let done = false;\n        const children = this.children.forEach((child) => {\n            if (done)\n                return;\n            const allowed = this.statics.allowedChildren.some((def) => child instanceof def);\n            if (allowed)\n                return;\n            if (child.statics.scope === _scope__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BLOCK_BLOT) {\n                if (child.next != null) {\n                    this.splitAfter(child);\n                }\n                if (child.prev != null) {\n                    this.splitAfter(child.prev);\n                }\n                child.parent.unwrap();\n                done = true;\n            }\n            else if (child instanceof ParentBlot) {\n                child.unwrap();\n            }\n            else {\n                child.remove();\n            }\n        });\n    }\n    formatAt(index, length, name, value) {\n        this.children.forEachAt(index, length, function (child, offset, length) {\n            child.formatAt(offset, length, name, value);\n        });\n    }\n    insertAt(index, value, def) {\n        let [child, offset] = this.children.find(index);\n        if (child) {\n            child.insertAt(offset, value, def);\n        }\n        else {\n            let blot = def == null\n                ? this.scroll.create('text', value)\n                : this.scroll.create(value, def);\n            this.appendChild(blot);\n        }\n    }\n    insertBefore(childBlot, refBlot) {\n        if (childBlot.parent != null) {\n            childBlot.parent.children.remove(childBlot);\n        }\n        let refDomNode = null;\n        this.children.insertBefore(childBlot, refBlot || null);\n        if (refBlot != null) {\n            refDomNode = refBlot.domNode;\n        }\n        if (this.domNode.parentNode != childBlot.domNode ||\n            this.domNode.nextSibling != refDomNode) {\n            this.domNode.insertBefore(childBlot.domNode, refDomNode);\n        }\n        childBlot.parent = this;\n        childBlot.attach();\n    }\n    length() {\n        return this.children.reduce(function (memo, child) {\n            return memo + child.length();\n        }, 0);\n    }\n    moveChildren(targetParent, refNode) {\n        this.children.forEach(function (child) {\n            targetParent.insertBefore(child, refNode);\n        });\n    }\n    optimize(context) {\n        super.optimize(context);\n        this.enforceAllowedChildren();\n        if (this.uiNode != null && this.uiNode !== this.domNode.firstChild) {\n            this.domNode.insertBefore(this.uiNode, this.domNode.firstChild);\n        }\n        if (this.children.length === 0) {\n            if (this.statics.defaultChild != null) {\n                let child = this.scroll.create(this.statics.defaultChild.blotName);\n                this.appendChild(child);\n                // TODO double check if necessary\n                // child.optimize(context);\n            }\n            else {\n                this.remove();\n            }\n        }\n    }\n    path(index, inclusive = false) {\n        let [child, offset] = this.children.find(index, inclusive);\n        let position = [[this, index]];\n        if (child instanceof ParentBlot) {\n            return position.concat(child.path(offset, inclusive));\n        }\n        else if (child != null) {\n            position.push([child, offset]);\n        }\n        return position;\n    }\n    removeChild(child) {\n        this.children.remove(child);\n    }\n    replaceWith(name, value) {\n        const replacement = typeof name === 'string' ? this.scroll.create(name, value) : name;\n        if (replacement instanceof ParentBlot) {\n            this.moveChildren(replacement);\n        }\n        return super.replaceWith(replacement);\n    }\n    split(index, force = false) {\n        if (!force) {\n            if (index === 0)\n                return this;\n            if (index === this.length())\n                return this.next;\n        }\n        let after = this.clone();\n        if (this.parent) {\n            this.parent.insertBefore(after, this.next || undefined);\n        }\n        this.children.forEachAt(index, this.length(), function (child, offset, length) {\n            const split = child.split(offset, force);\n            if (split != null) {\n                after.appendChild(split);\n            }\n        });\n        return after;\n    }\n    splitAfter(child) {\n        let after = this.clone();\n        while (child.next != null) {\n            after.appendChild(child.next);\n        }\n        if (this.parent) {\n            this.parent.insertBefore(after, this.next || undefined);\n        }\n        return after;\n    }\n    unwrap() {\n        if (this.parent) {\n            this.moveChildren(this.parent, this.next || undefined);\n        }\n        this.remove();\n    }\n    update(mutations, context) {\n        let addedNodes = [];\n        let removedNodes = [];\n        mutations.forEach(mutation => {\n            if (mutation.target === this.domNode && mutation.type === 'childList') {\n                addedNodes.push.apply(addedNodes, mutation.addedNodes);\n                removedNodes.push.apply(removedNodes, mutation.removedNodes);\n            }\n        });\n        removedNodes.forEach((node) => {\n            // Check node has actually been removed\n            // One exception is Chrome does not immediately remove IFRAMEs\n            // from DOM but MutationRecord is correct in its reported removal\n            if (node.parentNode != null &&\n                // @ts-ignore\n                node.tagName !== 'IFRAME' &&\n                document.body.compareDocumentPosition(node) &\n                    Node.DOCUMENT_POSITION_CONTAINED_BY) {\n                return;\n            }\n            let blot = this.scroll.find(node);\n            if (blot == null)\n                return;\n            if (blot.domNode.parentNode == null ||\n                blot.domNode.parentNode === this.domNode) {\n                blot.detach();\n            }\n        });\n        addedNodes\n            .filter(node => {\n            return node.parentNode === this.domNode || node === this.uiNode;\n        })\n            .sort(function (a, b) {\n            if (a === b)\n                return 0;\n            if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {\n                return 1;\n            }\n            return -1;\n        })\n            .forEach(node => {\n            let refBlot = null;\n            if (node.nextSibling != null) {\n                refBlot = this.scroll.find(node.nextSibling);\n            }\n            let blot = makeAttachedBlot(node, this.scroll);\n            if (blot.next != refBlot || blot.next == null) {\n                if (blot.parent != null) {\n                    blot.parent.removeChild(this);\n                }\n                this.insertBefore(blot, refBlot || undefined);\n            }\n        });\n        this.enforceAllowedChildren();\n    }\n}\nfunction makeAttachedBlot(node, scroll) {\n    let blot = scroll.find(node);\n    if (blot == null) {\n        try {\n            blot = scroll.create(node);\n        }\n        catch (e) {\n            blot = scroll.create(_scope__WEBPACK_IMPORTED_MODULE_3__[\"default\"].INLINE);\n            Array.from(node.childNodes).forEach(function (child) {\n                // @ts-ignore\n                blot.domNode.appendChild(child);\n            });\n            if (node.parentNode) {\n                node.parentNode.replaceChild(blot.domNode, node);\n            }\n            blot.attach();\n        }\n    }\n    return blot;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (ParentBlot);\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/blot/abstract/parent.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/blot/abstract/shadow.ts":
	/*!************************************************************!*\
	  !*** ./node_modules/parchment/src/blot/abstract/shadow.ts ***!
	  \************************************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../error */ \"./node_modules/parchment/src/error.ts\");\n/* harmony import */ var _scope__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../scope */ \"./node_modules/parchment/src/scope.ts\");\n/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../registry */ \"./node_modules/parchment/src/registry.ts\");\n\n\n\nclass ShadowBlot {\n    constructor(scroll, domNode) {\n        this.scroll = scroll;\n        this.domNode = domNode;\n        _registry__WEBPACK_IMPORTED_MODULE_2__[\"default\"].blots.set(domNode, this);\n        this.prev = null;\n        this.next = null;\n    }\n    // Hack for accessing inherited static methods\n    get statics() {\n        return this.constructor;\n    }\n    static create(value) {\n        if (this.tagName == null) {\n            throw new _error__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('Blot definition missing tagName');\n        }\n        let node;\n        if (Array.isArray(this.tagName)) {\n            if (typeof value === 'string') {\n                value = value.toUpperCase();\n                if (parseInt(value).toString() === value) {\n                    value = parseInt(value);\n                }\n            }\n            if (typeof value === 'number') {\n                node = document.createElement(this.tagName[value - 1]);\n            }\n            else if (this.tagName.indexOf(value) > -1) {\n                node = document.createElement(value);\n            }\n            else {\n                node = document.createElement(this.tagName[0]);\n            }\n        }\n        else {\n            node = document.createElement(this.tagName);\n        }\n        if (this.className) {\n            node.classList.add(this.className);\n        }\n        return node;\n    }\n    attach() {\n        // Nothing to do\n    }\n    clone() {\n        let domNode = this.domNode.cloneNode(false);\n        return this.scroll.create(domNode);\n    }\n    detach() {\n        if (this.parent != null)\n            this.parent.removeChild(this);\n        _registry__WEBPACK_IMPORTED_MODULE_2__[\"default\"].blots.delete(this.domNode);\n    }\n    deleteAt(index, length) {\n        let blot = this.isolate(index, length);\n        blot.remove();\n    }\n    formatAt(index, length, name, value) {\n        let blot = this.isolate(index, length);\n        if (this.scroll.query(name, _scope__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BLOT) != null && value) {\n            blot.wrap(name, value);\n        }\n        else if (this.scroll.query(name, _scope__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ATTRIBUTE) != null) {\n            let parent = this.scroll.create(this.statics.scope);\n            blot.wrap(parent);\n            parent.format(name, value);\n        }\n    }\n    insertAt(index, value, def) {\n        let blot = def == null\n            ? this.scroll.create('text', value)\n            : this.scroll.create(value, def);\n        let ref = this.split(index);\n        this.parent.insertBefore(blot, ref || undefined);\n    }\n    isolate(index, length) {\n        let target = this.split(index);\n        if (target == null) {\n            throw new Error('Attempt to isolate at end');\n        }\n        target.split(length);\n        return target;\n    }\n    length() {\n        return 1;\n    }\n    offset(root = this.parent) {\n        if (this.parent == null || this == root)\n            return 0;\n        return this.parent.children.offset(this) + this.parent.offset(root);\n    }\n    optimize(context) {\n        if (this.statics.requiredContainer &&\n            !(this.parent instanceof this.statics.requiredContainer)) {\n            this.wrap(this.statics.requiredContainer.blotName);\n        }\n    }\n    remove() {\n        if (this.domNode.parentNode != null) {\n            this.domNode.parentNode.removeChild(this.domNode);\n        }\n        this.detach();\n    }\n    replaceWith(name, value) {\n        const replacement = typeof name === 'string' ? this.scroll.create(name, value) : name;\n        if (this.parent != null) {\n            this.parent.insertBefore(replacement, this.next || undefined);\n            this.remove();\n        }\n        return replacement;\n    }\n    split(index, force) {\n        return index === 0 ? this : this.next;\n    }\n    update(mutations, context) {\n        // Nothing to do by default\n    }\n    wrap(name, value) {\n        let wrapper = typeof name === 'string' ? this.scroll.create(name, value) : name;\n        if (this.parent != null) {\n            this.parent.insertBefore(wrapper, this.next || undefined);\n        }\n        wrapper.appendChild(this);\n        return wrapper;\n    }\n}\nShadowBlot.blotName = 'abstract';\n/* harmony default export */ __webpack_exports__[\"default\"] = (ShadowBlot);\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/blot/abstract/shadow.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/blot/block.ts":
	/*!**************************************************!*\
	  !*** ./node_modules/parchment/src/blot/block.ts ***!
	  \**************************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _attributor_attributor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../attributor/attributor */ \"./node_modules/parchment/src/attributor/attributor.ts\");\n/* harmony import */ var _attributor_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../attributor/store */ \"./node_modules/parchment/src/attributor/store.ts\");\n/* harmony import */ var _abstract_parent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/parent */ \"./node_modules/parchment/src/blot/abstract/parent.ts\");\n/* harmony import */ var _abstract_leaf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/leaf */ \"./node_modules/parchment/src/blot/abstract/leaf.ts\");\n/* harmony import */ var _inline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./inline */ \"./node_modules/parchment/src/blot/inline.ts\");\n/* harmony import */ var _scope__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../scope */ \"./node_modules/parchment/src/scope.ts\");\n\n\n\n\n\n\nclass BlockBlot extends _abstract_parent__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(scroll, domNode) {\n        super(scroll, domNode);\n        this.attributes = new _attributor_store__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.domNode);\n    }\n    static formats(domNode, scroll) {\n        const match = scroll.query(BlockBlot.blotName);\n        if (match != null && domNode.tagName === match.tagName) {\n            return undefined;\n        }\n        else if (typeof this.tagName === 'string') {\n            return true;\n        }\n        else if (Array.isArray(this.tagName)) {\n            return domNode.tagName.toLowerCase();\n        }\n    }\n    format(name, value) {\n        const format = this.scroll.query(name, _scope__WEBPACK_IMPORTED_MODULE_5__[\"default\"].BLOCK);\n        if (format == null) {\n            return;\n        }\n        else if (format instanceof _attributor_attributor__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n            this.attributes.attribute(format, value);\n        }\n        else if (name === this.statics.blotName && !value) {\n            this.replaceWith(BlockBlot.blotName);\n        }\n        else if (value &&\n            (name !== this.statics.blotName || this.formats()[name] !== value)) {\n            this.replaceWith(name, value);\n        }\n    }\n    formats() {\n        const formats = this.attributes.values();\n        const format = this.statics.formats(this.domNode, this.scroll);\n        if (format != null) {\n            formats[this.statics.blotName] = format;\n        }\n        return formats;\n    }\n    formatAt(index, length, name, value) {\n        if (this.scroll.query(name, _scope__WEBPACK_IMPORTED_MODULE_5__[\"default\"].BLOCK) != null) {\n            this.format(name, value);\n        }\n        else {\n            super.formatAt(index, length, name, value);\n        }\n    }\n    insertAt(index, value, def) {\n        if (def == null || this.scroll.query(value, _scope__WEBPACK_IMPORTED_MODULE_5__[\"default\"].INLINE) != null) {\n            // Insert text or inline\n            super.insertAt(index, value, def);\n        }\n        else {\n            const after = this.split(index);\n            if (after != null) {\n                const blot = this.scroll.create(value, def);\n                after.parent.insertBefore(blot, after);\n            }\n            else {\n                throw new Error('Attempt to insertAt after block boundaries');\n            }\n        }\n    }\n    replaceWith(name, value) {\n        const replacement = super.replaceWith(name, value);\n        this.attributes.copy(replacement);\n        return replacement;\n    }\n    update(mutations, context) {\n        super.update(mutations, context);\n        const attributeChanged = mutations.some(mutation => mutation.target === this.domNode && mutation.type === 'attributes');\n        if (attributeChanged) {\n            this.attributes.build();\n        }\n    }\n}\nBlockBlot.allowedChildren = [_inline__WEBPACK_IMPORTED_MODULE_4__[\"default\"], BlockBlot, _abstract_leaf__WEBPACK_IMPORTED_MODULE_3__[\"default\"]];\nBlockBlot.blotName = 'block';\nBlockBlot.scope = _scope__WEBPACK_IMPORTED_MODULE_5__[\"default\"].BLOCK_BLOT;\nBlockBlot.tagName = 'P';\n/* harmony default export */ __webpack_exports__[\"default\"] = (BlockBlot);\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/blot/block.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/blot/embed.ts":
	/*!**************************************************!*\
	  !*** ./node_modules/parchment/src/blot/embed.ts ***!
	  \**************************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _abstract_leaf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/leaf */ \"./node_modules/parchment/src/blot/abstract/leaf.ts\");\n\nclass EmbedBlot extends _abstract_leaf__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    static formats(domNode, scroll) {\n        return undefined;\n    }\n    format(name, value) {\n        // super.formatAt wraps, which is what we want in general,\n        // but this allows subclasses to overwrite for formats\n        // that just apply to particular embeds\n        super.formatAt(0, this.length(), name, value);\n    }\n    formatAt(index, length, name, value) {\n        if (index === 0 && length === this.length()) {\n            this.format(name, value);\n        }\n        else {\n            super.formatAt(index, length, name, value);\n        }\n    }\n    formats() {\n        return this.statics.formats(this.domNode, this.scroll);\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (EmbedBlot);\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/blot/embed.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/blot/inline.ts":
	/*!***************************************************!*\
	  !*** ./node_modules/parchment/src/blot/inline.ts ***!
	  \***************************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _attributor_attributor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../attributor/attributor */ \"./node_modules/parchment/src/attributor/attributor.ts\");\n/* harmony import */ var _attributor_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../attributor/store */ \"./node_modules/parchment/src/attributor/store.ts\");\n/* harmony import */ var _abstract_parent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/parent */ \"./node_modules/parchment/src/blot/abstract/parent.ts\");\n/* harmony import */ var _abstract_leaf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/leaf */ \"./node_modules/parchment/src/blot/abstract/leaf.ts\");\n/* harmony import */ var _scope__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scope */ \"./node_modules/parchment/src/scope.ts\");\n\n\n\n\n\n// Shallow object comparison\nfunction isEqual(obj1, obj2) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length)\n        return false;\n    // @ts-ignore\n    for (let prop in obj1) {\n        // @ts-ignore\n        if (obj1[prop] !== obj2[prop])\n            return false;\n    }\n    return true;\n}\nclass InlineBlot extends _abstract_parent__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(scroll, domNode) {\n        super(scroll, domNode);\n        this.attributes = new _attributor_store__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.domNode);\n    }\n    static formats(domNode, scroll) {\n        const match = scroll.query(InlineBlot.blotName);\n        if (match != null && domNode.tagName === match.tagName) {\n            return undefined;\n        }\n        else if (typeof this.tagName === 'string') {\n            return true;\n        }\n        else if (Array.isArray(this.tagName)) {\n            return domNode.tagName.toLowerCase();\n        }\n        return undefined;\n    }\n    format(name, value) {\n        if (name === this.statics.blotName && !value) {\n            this.children.forEach(child => {\n                if (!(child instanceof InlineBlot)) {\n                    child = child.wrap(InlineBlot.blotName, true);\n                }\n                this.attributes.copy(child);\n            });\n            this.unwrap();\n        }\n        else {\n            const format = this.scroll.query(name, _scope__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INLINE);\n            if (format == null)\n                return;\n            if (format instanceof _attributor_attributor__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n                this.attributes.attribute(format, value);\n            }\n            else if (value &&\n                (name !== this.statics.blotName || this.formats()[name] !== value)) {\n                this.replaceWith(name, value);\n            }\n        }\n    }\n    formats() {\n        let formats = this.attributes.values();\n        let format = this.statics.formats(this.domNode, this.scroll);\n        if (format != null) {\n            formats[this.statics.blotName] = format;\n        }\n        return formats;\n    }\n    formatAt(index, length, name, value) {\n        if (this.formats()[name] != null ||\n            this.scroll.query(name, _scope__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ATTRIBUTE)) {\n            let blot = this.isolate(index, length);\n            blot.format(name, value);\n        }\n        else {\n            super.formatAt(index, length, name, value);\n        }\n    }\n    optimize(context) {\n        super.optimize(context);\n        let formats = this.formats();\n        if (Object.keys(formats).length === 0) {\n            return this.unwrap(); // unformatted span\n        }\n        let next = this.next;\n        if (next instanceof InlineBlot &&\n            next.prev === this &&\n            isEqual(formats, next.formats())) {\n            next.moveChildren(this);\n            next.remove();\n        }\n    }\n    replaceWith(name, value) {\n        const replacement = super.replaceWith(name, value);\n        this.attributes.copy(replacement);\n        return replacement;\n    }\n    update(mutations, context) {\n        super.update(mutations, context);\n        const attributeChanged = mutations.some(mutation => mutation.target === this.domNode && mutation.type === 'attributes');\n        if (attributeChanged) {\n            this.attributes.build();\n        }\n    }\n    wrap(name, value) {\n        const wrapper = super.wrap(name, value);\n        if (wrapper instanceof InlineBlot) {\n            this.attributes.move(wrapper);\n        }\n        return wrapper;\n    }\n}\nInlineBlot.allowedChildren = [InlineBlot, _abstract_leaf__WEBPACK_IMPORTED_MODULE_3__[\"default\"]];\nInlineBlot.blotName = 'inline';\nInlineBlot.scope = _scope__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INLINE_BLOT;\nInlineBlot.tagName = 'SPAN';\n/* harmony default export */ __webpack_exports__[\"default\"] = (InlineBlot);\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/blot/inline.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/blot/scroll.ts":
	/*!***************************************************!*\
	  !*** ./node_modules/parchment/src/blot/scroll.ts ***!
	  \***************************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _abstract_parent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/parent */ \"./node_modules/parchment/src/blot/abstract/parent.ts\");\n/* harmony import */ var _abstract_container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abstract/container */ \"./node_modules/parchment/src/blot/abstract/container.ts\");\n/* harmony import */ var _block__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./block */ \"./node_modules/parchment/src/blot/block.ts\");\n/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../registry */ \"./node_modules/parchment/src/registry.ts\");\n/* harmony import */ var _scope__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scope */ \"./node_modules/parchment/src/scope.ts\");\n\n\n\n\n\nconst OBSERVER_CONFIG = {\n    attributes: true,\n    characterData: true,\n    characterDataOldValue: true,\n    childList: true,\n    subtree: true,\n};\nconst MAX_OPTIMIZE_ITERATIONS = 100;\nclass ScrollBlot extends _abstract_parent__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(registry, node) {\n        // @ts-ignore\n        super(null, node);\n        this.registry = registry;\n        this.scroll = this;\n        this.build();\n        this.observer = new MutationObserver((mutations) => {\n            this.update(mutations);\n        });\n        this.observer.observe(this.domNode, OBSERVER_CONFIG);\n        this.attach();\n    }\n    create(input, value) {\n        return this.registry.create(this, input, value);\n    }\n    find(node, bubble = false) {\n        return this.registry.find(node, bubble);\n    }\n    query(query, scope = _scope__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ANY) {\n        return this.registry.query(query, scope);\n    }\n    register(...Definitions) {\n        return this.registry.register(...Definitions);\n    }\n    build() {\n        if (this.scroll == null)\n            return;\n        super.build();\n    }\n    detach() {\n        super.detach();\n        this.observer.disconnect();\n    }\n    deleteAt(index, length) {\n        this.update();\n        if (index === 0 && length === this.length()) {\n            this.children.forEach(function (child) {\n                child.remove();\n            });\n        }\n        else {\n            super.deleteAt(index, length);\n        }\n    }\n    formatAt(index, length, name, value) {\n        this.update();\n        super.formatAt(index, length, name, value);\n    }\n    insertAt(index, value, def) {\n        this.update();\n        super.insertAt(index, value, def);\n    }\n    optimize(mutations = [], context = {}) {\n        super.optimize(context);\n        const mutationsMap = context.mutationsMap || new WeakMap();\n        // We must modify mutations directly, cannot make copy and then modify\n        let records = Array.from(this.observer.takeRecords());\n        // Array.push currently seems to be implemented by a non-tail recursive function\n        // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());\n        while (records.length > 0)\n            mutations.push(records.pop());\n        let mark = (blot, markParent = true) => {\n            if (blot == null || blot === this)\n                return;\n            if (blot.domNode.parentNode == null)\n                return;\n            if (!mutationsMap.has(blot.domNode)) {\n                mutationsMap.set(blot.domNode, []);\n            }\n            if (markParent)\n                mark(blot.parent);\n        };\n        let optimize = function (blot) {\n            // Post-order traversal\n            if (!mutationsMap.has(blot.domNode))\n                return;\n            if (blot instanceof _abstract_parent__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n                blot.children.forEach(optimize);\n            }\n            mutationsMap.delete(blot.domNode);\n            blot.optimize(context);\n        };\n        let remaining = mutations;\n        for (let i = 0; remaining.length > 0; i += 1) {\n            if (i >= MAX_OPTIMIZE_ITERATIONS) {\n                throw new Error('[Parchment] Maximum optimize iterations reached');\n            }\n            remaining.forEach((mutation) => {\n                let blot = this.find(mutation.target, true);\n                if (blot == null)\n                    return;\n                if (blot.domNode === mutation.target) {\n                    if (mutation.type === 'childList') {\n                        mark(this.find(mutation.previousSibling, false));\n                        Array.from(mutation.addedNodes).forEach((node) => {\n                            const child = this.find(node, false);\n                            mark(child, false);\n                            if (child instanceof _abstract_parent__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n                                child.children.forEach(function (grandChild) {\n                                    mark(grandChild, false);\n                                });\n                            }\n                        });\n                    }\n                    else if (mutation.type === 'attributes') {\n                        mark(blot.prev);\n                    }\n                }\n                mark(blot);\n            });\n            this.children.forEach(optimize);\n            remaining = Array.from(this.observer.takeRecords());\n            records = remaining.slice();\n            while (records.length > 0)\n                mutations.push(records.pop());\n        }\n    }\n    update(mutations, context = {}) {\n        mutations = mutations || this.observer.takeRecords();\n        const mutationsMap = new WeakMap();\n        mutations\n            .map((mutation) => {\n            let blot = _registry__WEBPACK_IMPORTED_MODULE_3__[\"default\"].find(mutation.target, true);\n            if (blot == null)\n                return null;\n            if (mutationsMap.has(blot.domNode)) {\n                mutationsMap.get(blot.domNode).push(mutation);\n                return null;\n            }\n            else {\n                mutationsMap.set(blot.domNode, [mutation]);\n                return blot;\n            }\n        })\n            .forEach((blot) => {\n            if (blot != null && blot !== this && mutationsMap.has(blot.domNode)) {\n                blot.update(mutationsMap.get(blot.domNode) || [], context);\n            }\n        });\n        context.mutationsMap = mutationsMap;\n        if (mutationsMap.has(this.domNode)) {\n            super.update(mutationsMap.get(this.domNode), context);\n        }\n        this.optimize(mutations, context);\n    }\n}\nScrollBlot.blotName = 'scroll';\nScrollBlot.defaultChild = _block__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\nScrollBlot.allowedChildren = [_block__WEBPACK_IMPORTED_MODULE_2__[\"default\"], _abstract_container__WEBPACK_IMPORTED_MODULE_1__[\"default\"]];\nScrollBlot.scope = _scope__WEBPACK_IMPORTED_MODULE_4__[\"default\"].BLOCK_BLOT;\nScrollBlot.tagName = 'DIV';\n/* harmony default export */ __webpack_exports__[\"default\"] = (ScrollBlot);\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/blot/scroll.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/blot/text.ts":
	/*!*************************************************!*\
	  !*** ./node_modules/parchment/src/blot/text.ts ***!
	  \*************************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _abstract_leaf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/leaf */ \"./node_modules/parchment/src/blot/abstract/leaf.ts\");\n/* harmony import */ var _scope__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scope */ \"./node_modules/parchment/src/scope.ts\");\n\n\nclass TextBlot extends _abstract_leaf__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(scroll, node) {\n        super(scroll, node);\n        this.text = this.statics.value(this.domNode);\n    }\n    static create(value) {\n        return document.createTextNode(value);\n    }\n    static value(domNode) {\n        let text = domNode.data;\n        // @ts-ignore\n        if (text['normalize'])\n            text = text['normalize']();\n        return text;\n    }\n    deleteAt(index, length) {\n        this.domNode.data = this.text =\n            this.text.slice(0, index) + this.text.slice(index + length);\n    }\n    index(node, offset) {\n        if (this.domNode === node) {\n            return offset;\n        }\n        return -1;\n    }\n    insertAt(index, value, def) {\n        if (def == null) {\n            this.text = this.text.slice(0, index) + value + this.text.slice(index);\n            this.domNode.data = this.text;\n        }\n        else {\n            super.insertAt(index, value, def);\n        }\n    }\n    length() {\n        return this.text.length;\n    }\n    optimize(context) {\n        super.optimize(context);\n        this.text = this.statics.value(this.domNode);\n        if (this.text.length === 0) {\n            this.remove();\n        }\n        else if (this.next instanceof TextBlot && this.next.prev === this) {\n            this.insertAt(this.length(), this.next.value());\n            this.next.remove();\n        }\n    }\n    position(index, inclusive = false) {\n        return [this.domNode, index];\n    }\n    split(index, force = false) {\n        if (!force) {\n            if (index === 0)\n                return this;\n            if (index === this.length())\n                return this.next;\n        }\n        let after = this.scroll.create(this.domNode.splitText(index));\n        this.parent.insertBefore(after, this.next || undefined);\n        this.text = this.statics.value(this.domNode);\n        return after;\n    }\n    update(mutations, context) {\n        if (mutations.some(mutation => {\n            return (mutation.type === 'characterData' && mutation.target === this.domNode);\n        })) {\n            this.text = this.statics.value(this.domNode);\n        }\n    }\n    value() {\n        return this.text;\n    }\n}\nTextBlot.blotName = 'text';\nTextBlot.scope = _scope__WEBPACK_IMPORTED_MODULE_1__[\"default\"].INLINE_BLOT;\n/* harmony default export */ __webpack_exports__[\"default\"] = (TextBlot);\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/blot/text.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/collection/linked-list.ts":
	/*!**************************************************************!*\
	  !*** ./node_modules/parchment/src/collection/linked-list.ts ***!
	  \**************************************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\nclass LinkedList {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n    append(...nodes) {\n        this.insertBefore(nodes[0], null);\n        if (nodes.length > 1) {\n            this.append.apply(this, nodes.slice(1));\n        }\n    }\n    at(index) {\n        let cur, next = this.iterator();\n        while ((cur = next()) && index > 0) {\n            index -= 1;\n        }\n        return cur;\n    }\n    contains(node) {\n        let cur, next = this.iterator();\n        while ((cur = next())) {\n            if (cur === node)\n                return true;\n        }\n        return false;\n    }\n    indexOf(node) {\n        let cur, next = this.iterator(), index = 0;\n        while ((cur = next())) {\n            if (cur === node)\n                return index;\n            index += 1;\n        }\n        return -1;\n    }\n    insertBefore(node, refNode) {\n        if (!node)\n            return;\n        node.next = refNode;\n        if (refNode != null) {\n            node.prev = refNode.prev;\n            if (refNode.prev != null) {\n                refNode.prev.next = node;\n            }\n            refNode.prev = node;\n            if (refNode === this.head) {\n                this.head = node;\n            }\n        }\n        else if (this.tail != null) {\n            this.tail.next = node;\n            node.prev = this.tail;\n            this.tail = node;\n        }\n        else {\n            node.prev = null;\n            this.head = this.tail = node;\n        }\n        this.length += 1;\n    }\n    offset(target) {\n        let index = 0, cur = this.head;\n        while (cur != null) {\n            if (cur === target)\n                return index;\n            index += cur.length();\n            cur = cur.next;\n        }\n        return -1;\n    }\n    remove(node) {\n        if (!this.contains(node))\n            return;\n        if (node.prev != null)\n            node.prev.next = node.next;\n        if (node.next != null)\n            node.next.prev = node.prev;\n        if (node === this.head)\n            this.head = node.next;\n        if (node === this.tail)\n            this.tail = node.prev;\n        this.length -= 1;\n    }\n    iterator(curNode = this.head) {\n        // TODO use yield when we can\n        return function () {\n            let ret = curNode;\n            if (curNode != null)\n                curNode = curNode.next;\n            return ret;\n        };\n    }\n    find(index, inclusive = false) {\n        let cur, next = this.iterator();\n        while ((cur = next())) {\n            let length = cur.length();\n            if (index < length ||\n                (inclusive &&\n                    index === length &&\n                    (cur.next == null || cur.next.length() !== 0))) {\n                return [cur, index];\n            }\n            index -= length;\n        }\n        return [null, 0];\n    }\n    forEach(callback) {\n        let cur, next = this.iterator();\n        while ((cur = next())) {\n            callback(cur);\n        }\n    }\n    forEachAt(index, length, callback) {\n        if (length <= 0)\n            return;\n        let [startNode, offset] = this.find(index);\n        let cur, curIndex = index - offset, next = this.iterator(startNode);\n        while ((cur = next()) && curIndex < index + length) {\n            let curLength = cur.length();\n            if (index > curIndex) {\n                callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));\n            }\n            else {\n                callback(cur, 0, Math.min(curLength, index + length - curIndex));\n            }\n            curIndex += curLength;\n        }\n    }\n    map(callback) {\n        return this.reduce(function (memo, cur) {\n            memo.push(callback(cur));\n            return memo;\n        }, []);\n    }\n    reduce(callback, memo) {\n        let cur, next = this.iterator();\n        while ((cur = next())) {\n            memo = callback(memo, cur);\n        }\n        return memo;\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (LinkedList);\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/collection/linked-list.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/error.ts":
	/*!*********************************************!*\
	  !*** ./node_modules/parchment/src/error.ts ***!
	  \*********************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ParchmentError; });\nclass ParchmentError extends Error {\n    constructor(message) {\n        message = '[Parchment] ' + message;\n        super(message);\n        this.message = message;\n        this.name = this.constructor.name;\n    }\n}\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/error.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/parchment.ts":
	/*!*************************************************!*\
	  !*** ./node_modules/parchment/src/parchment.ts ***!
	  \*************************************************/
	/*! exports provided: ParentBlot, ContainerBlot, LeafBlot, EmbedBlot, ScrollBlot, BlockBlot, InlineBlot, TextBlot, Attributor, ClassAttributor, StyleAttributor, AttributorStore, Registry, Scope */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _blot_abstract_container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blot/abstract/container */ \"./node_modules/parchment/src/blot/abstract/container.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ContainerBlot\", function() { return _blot_abstract_container__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _blot_abstract_parent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blot/abstract/parent */ \"./node_modules/parchment/src/blot/abstract/parent.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ParentBlot\", function() { return _blot_abstract_parent__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _blot_abstract_leaf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./blot/abstract/leaf */ \"./node_modules/parchment/src/blot/abstract/leaf.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"LeafBlot\", function() { return _blot_abstract_leaf__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _blot_scroll__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./blot/scroll */ \"./node_modules/parchment/src/blot/scroll.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ScrollBlot\", function() { return _blot_scroll__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _blot_inline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./blot/inline */ \"./node_modules/parchment/src/blot/inline.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"InlineBlot\", function() { return _blot_inline__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n/* harmony import */ var _blot_block__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./blot/block */ \"./node_modules/parchment/src/blot/block.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BlockBlot\", function() { return _blot_block__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; });\n\n/* harmony import */ var _blot_embed__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./blot/embed */ \"./node_modules/parchment/src/blot/embed.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"EmbedBlot\", function() { return _blot_embed__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; });\n\n/* harmony import */ var _blot_text__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./blot/text */ \"./node_modules/parchment/src/blot/text.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TextBlot\", function() { return _blot_text__WEBPACK_IMPORTED_MODULE_7__[\"default\"]; });\n\n/* harmony import */ var _attributor_attributor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./attributor/attributor */ \"./node_modules/parchment/src/attributor/attributor.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Attributor\", function() { return _attributor_attributor__WEBPACK_IMPORTED_MODULE_8__[\"default\"]; });\n\n/* harmony import */ var _attributor_class__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./attributor/class */ \"./node_modules/parchment/src/attributor/class.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ClassAttributor\", function() { return _attributor_class__WEBPACK_IMPORTED_MODULE_9__[\"default\"]; });\n\n/* harmony import */ var _attributor_style__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./attributor/style */ \"./node_modules/parchment/src/attributor/style.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"StyleAttributor\", function() { return _attributor_style__WEBPACK_IMPORTED_MODULE_10__[\"default\"]; });\n\n/* harmony import */ var _attributor_store__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./attributor/store */ \"./node_modules/parchment/src/attributor/store.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"AttributorStore\", function() { return _attributor_store__WEBPACK_IMPORTED_MODULE_11__[\"default\"]; });\n\n/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./registry */ \"./node_modules/parchment/src/registry.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Registry\", function() { return _registry__WEBPACK_IMPORTED_MODULE_12__[\"default\"]; });\n\n/* harmony import */ var _scope__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./scope */ \"./node_modules/parchment/src/scope.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Scope\", function() { return _scope__WEBPACK_IMPORTED_MODULE_13__[\"default\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/parchment.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/registry.ts":
	/*!************************************************!*\
	  !*** ./node_modules/parchment/src/registry.ts ***!
	  \************************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Registry; });\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"./node_modules/parchment/src/error.ts\");\n/* harmony import */ var _scope__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scope */ \"./node_modules/parchment/src/scope.ts\");\n\n\nclass Registry {\n    constructor() {\n        this.attributes = {};\n        this.classes = {};\n        this.tags = {};\n        this.types = {};\n    }\n    static find(node, bubble = false) {\n        if (node == null)\n            return null;\n        if (this.blots.has(node))\n            return this.blots.get(node) || null;\n        if (bubble)\n            return this.find(node.parentNode, bubble);\n        return null;\n    }\n    create(scroll, input, value) {\n        const match = this.query(input);\n        if (match == null) {\n            throw new _error__WEBPACK_IMPORTED_MODULE_0__[\"default\"](`Unable to create ${input} blot`);\n        }\n        const BlotClass = match;\n        const node = \n        // @ts-ignore\n        input instanceof Node || input['nodeType'] === Node.TEXT_NODE\n            ? input\n            : BlotClass.create(value);\n        const blot = new BlotClass(scroll, node, value);\n        Registry.blots.set(blot.domNode, blot);\n        return blot;\n    }\n    find(node, bubble = false) {\n        return Registry.find(node, bubble);\n    }\n    query(query, scope = _scope__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ANY) {\n        let match;\n        if (typeof query === 'string') {\n            match = this.types[query] || this.attributes[query];\n            // @ts-ignore\n        }\n        else if (query instanceof Text || query['nodeType'] === Node.TEXT_NODE) {\n            match = this.types['text'];\n        }\n        else if (typeof query === 'number') {\n            if (query & _scope__WEBPACK_IMPORTED_MODULE_1__[\"default\"].LEVEL & _scope__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BLOCK) {\n                match = this.types['block'];\n            }\n            else if (query & _scope__WEBPACK_IMPORTED_MODULE_1__[\"default\"].LEVEL & _scope__WEBPACK_IMPORTED_MODULE_1__[\"default\"].INLINE) {\n                match = this.types['inline'];\n            }\n        }\n        else if (query instanceof HTMLElement) {\n            let names = (query.getAttribute('class') || '').split(/\\s+/);\n            for (let i in names) {\n                match = this.classes[names[i]];\n                if (match)\n                    break;\n            }\n            match = match || this.tags[query.tagName];\n        }\n        if (match == null)\n            return null;\n        // @ts-ignore\n        if (scope & _scope__WEBPACK_IMPORTED_MODULE_1__[\"default\"].LEVEL & match.scope && scope & _scope__WEBPACK_IMPORTED_MODULE_1__[\"default\"].TYPE & match.scope)\n            return match;\n        return null;\n    }\n    register(...Definitions) {\n        if (Definitions.length > 1) {\n            return Definitions.map(d => {\n                return this.register(d);\n            });\n        }\n        let Definition = Definitions[0];\n        if (typeof Definition.blotName !== 'string' &&\n            typeof Definition.attrName !== 'string') {\n            throw new _error__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('Invalid definition');\n        }\n        else if (Definition.blotName === 'abstract') {\n            throw new _error__WEBPACK_IMPORTED_MODULE_0__[\"default\"]('Cannot register abstract class');\n        }\n        this.types[Definition.blotName || Definition.attrName] = Definition;\n        if (typeof Definition.keyName === 'string') {\n            this.attributes[Definition.keyName] = Definition;\n        }\n        else {\n            if (Definition.className != null) {\n                this.classes[Definition.className] = Definition;\n            }\n            if (Definition.tagName != null) {\n                if (Array.isArray(Definition.tagName)) {\n                    Definition.tagName = Definition.tagName.map(function (tagName) {\n                        return tagName.toUpperCase();\n                    });\n                }\n                else {\n                    Definition.tagName = Definition.tagName.toUpperCase();\n                }\n                let tagNames = Array.isArray(Definition.tagName)\n                    ? Definition.tagName\n                    : [Definition.tagName];\n                tagNames.forEach((tag) => {\n                    if (this.tags[tag] == null || Definition.className == null) {\n                        this.tags[tag] = Definition;\n                    }\n                });\n            }\n        }\n        return Definition;\n    }\n}\nRegistry.blots = new WeakMap();\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/registry.ts?");

	/***/ }),

	/***/ "./node_modules/parchment/src/scope.ts":
	/*!*********************************************!*\
	  !*** ./node_modules/parchment/src/scope.ts ***!
	  \*********************************************/
	/*! exports provided: default */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {
	eval("__webpack_require__.r(__webpack_exports__);\nvar Scope;\n(function (Scope) {\n    Scope[Scope[\"TYPE\"] = 3] = \"TYPE\";\n    Scope[Scope[\"LEVEL\"] = 12] = \"LEVEL\";\n    Scope[Scope[\"ATTRIBUTE\"] = 13] = \"ATTRIBUTE\";\n    Scope[Scope[\"BLOT\"] = 14] = \"BLOT\";\n    Scope[Scope[\"INLINE\"] = 7] = \"INLINE\";\n    Scope[Scope[\"BLOCK\"] = 11] = \"BLOCK\";\n    Scope[Scope[\"BLOCK_BLOT\"] = 10] = \"BLOCK_BLOT\";\n    Scope[Scope[\"INLINE_BLOT\"] = 6] = \"INLINE_BLOT\";\n    Scope[Scope[\"BLOCK_ATTRIBUTE\"] = 9] = \"BLOCK_ATTRIBUTE\";\n    Scope[Scope[\"INLINE_ATTRIBUTE\"] = 5] = \"INLINE_ATTRIBUTE\";\n    Scope[Scope[\"ANY\"] = 15] = \"ANY\";\n})(Scope || (Scope = {}));\n/* harmony default export */ __webpack_exports__[\"default\"] = (Scope);\n\n\n//# sourceURL=webpack://Quill/./node_modules/parchment/src/scope.ts?");

	/***/ }),

	/***/ "./node_modules/quill-delta/lib/delta.js":
	/*!***********************************************!*\
	  !*** ./node_modules/quill-delta/lib/delta.js ***!
	  \***********************************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	eval("var diff = __webpack_require__(/*! fast-diff */ \"./node_modules/fast-diff/diff.js\");\nvar equal = __webpack_require__(/*! deep-equal */ \"./node_modules/deep-equal/index.js\");\nvar extend = __webpack_require__(/*! extend */ \"./node_modules/extend/index.js\");\nvar op = __webpack_require__(/*! ./op */ \"./node_modules/quill-delta/lib/op.js\");\n\n\nvar NULL_CHARACTER = String.fromCharCode(0);  // Placeholder char for embed in diff()\n\n\nvar Delta = function (ops) {\n  // Assume we are given a well formed ops\n  if (Array.isArray(ops)) {\n    this.ops = ops;\n  } else if (ops != null && Array.isArray(ops.ops)) {\n    this.ops = ops.ops;\n  } else {\n    this.ops = [];\n  }\n};\n\n\nDelta.prototype.insert = function (text, attributes) {\n  var newOp = {};\n  if (text.length === 0) return this;\n  newOp.insert = text;\n  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {\n    newOp.attributes = attributes;\n  }\n  return this.push(newOp);\n};\n\nDelta.prototype['delete'] = function (length) {\n  if (length <= 0) return this;\n  return this.push({ 'delete': length });\n};\n\nDelta.prototype.retain = function (length, attributes) {\n  if (length <= 0) return this;\n  var newOp = { retain: length };\n  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {\n    newOp.attributes = attributes;\n  }\n  return this.push(newOp);\n};\n\nDelta.prototype.push = function (newOp) {\n  var index = this.ops.length;\n  var lastOp = this.ops[index - 1];\n  newOp = extend(true, {}, newOp);\n  if (typeof lastOp === 'object') {\n    if (typeof newOp['delete'] === 'number' && typeof lastOp['delete'] === 'number') {\n      this.ops[index - 1] = { 'delete': lastOp['delete'] + newOp['delete'] };\n      return this;\n    }\n    // Since it does not matter if we insert before or after deleting at the same index,\n    // always prefer to insert first\n    if (typeof lastOp['delete'] === 'number' && newOp.insert != null) {\n      index -= 1;\n      lastOp = this.ops[index - 1];\n      if (typeof lastOp !== 'object') {\n        this.ops.unshift(newOp);\n        return this;\n      }\n    }\n    if (equal(newOp.attributes, lastOp.attributes)) {\n      if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {\n        this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };\n        if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes\n        return this;\n      } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {\n        this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };\n        if (typeof newOp.attributes === 'object') this.ops[index - 1].attributes = newOp.attributes\n        return this;\n      }\n    }\n  }\n  if (index === this.ops.length) {\n    this.ops.push(newOp);\n  } else {\n    this.ops.splice(index, 0, newOp);\n  }\n  return this;\n};\n\nDelta.prototype.chop = function () {\n  var lastOp = this.ops[this.ops.length - 1];\n  if (lastOp && lastOp.retain && !lastOp.attributes) {\n    this.ops.pop();\n  }\n  return this;\n};\n\nDelta.prototype.filter = function (predicate) {\n  return this.ops.filter(predicate);\n};\n\nDelta.prototype.forEach = function (predicate) {\n  this.ops.forEach(predicate);\n};\n\nDelta.prototype.map = function (predicate) {\n  return this.ops.map(predicate);\n};\n\nDelta.prototype.partition = function (predicate) {\n  var passed = [], failed = [];\n  this.forEach(function(op) {\n    var target = predicate(op) ? passed : failed;\n    target.push(op);\n  });\n  return [passed, failed];\n};\n\nDelta.prototype.reduce = function (predicate, initial) {\n  return this.ops.reduce(predicate, initial);\n};\n\nDelta.prototype.changeLength = function () {\n  return this.reduce(function (length, elem) {\n    if (elem.insert) {\n      return length + op.length(elem);\n    } else if (elem.delete) {\n      return length - elem.delete;\n    }\n    return length;\n  }, 0);\n};\n\nDelta.prototype.length = function () {\n  return this.reduce(function (length, elem) {\n    return length + op.length(elem);\n  }, 0);\n};\n\nDelta.prototype.slice = function (start, end) {\n  start = start || 0;\n  if (typeof end !== 'number') end = Infinity;\n  var ops = [];\n  var iter = op.iterator(this.ops);\n  var index = 0;\n  while (index < end && iter.hasNext()) {\n    var nextOp;\n    if (index < start) {\n      nextOp = iter.next(start - index);\n    } else {\n      nextOp = iter.next(end - index);\n      ops.push(nextOp);\n    }\n    index += op.length(nextOp);\n  }\n  return new Delta(ops);\n};\n\n\nDelta.prototype.compose = function (other) {\n  var thisIter = op.iterator(this.ops);\n  var otherIter = op.iterator(other.ops);\n  var delta = new Delta();\n  while (thisIter.hasNext() || otherIter.hasNext()) {\n    if (otherIter.peekType() === 'insert') {\n      delta.push(otherIter.next());\n    } else if (thisIter.peekType() === 'delete') {\n      delta.push(thisIter.next());\n    } else {\n      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n      var thisOp = thisIter.next(length);\n      var otherOp = otherIter.next(length);\n      if (typeof otherOp.retain === 'number') {\n        var newOp = {};\n        if (typeof thisOp.retain === 'number') {\n          newOp.retain = length;\n        } else {\n          newOp.insert = thisOp.insert;\n        }\n        // Preserve null when composing with a retain, otherwise remove it for inserts\n        var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');\n        if (attributes) newOp.attributes = attributes;\n        delta.push(newOp);\n      // Other op should be delete, we could be an insert or retain\n      // Insert + delete cancels out\n      } else if (typeof otherOp['delete'] === 'number' && typeof thisOp.retain === 'number') {\n        delta.push(otherOp);\n      }\n    }\n  }\n  return delta.chop();\n};\n\nDelta.prototype.concat = function (other) {\n  var delta = new Delta(this.ops.slice());\n  if (other.ops.length > 0) {\n    delta.push(other.ops[0]);\n    delta.ops = delta.ops.concat(other.ops.slice(1));\n  }\n  return delta;\n};\n\nDelta.prototype.diff = function (other, index) {\n  if (this.ops === other.ops) {\n    return new Delta();\n  }\n  var strings = [this, other].map(function (delta) {\n    return delta.map(function (op) {\n      if (op.insert != null) {\n        return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;\n      }\n      var prep = (delta === other) ? 'on' : 'with';\n      throw new Error('diff() called ' + prep + ' non-document');\n    }).join('');\n  });\n  var delta = new Delta();\n  var diffResult = diff(strings[0], strings[1], index);\n  var thisIter = op.iterator(this.ops);\n  var otherIter = op.iterator(other.ops);\n  diffResult.forEach(function (component) {\n    var length = component[1].length;\n    while (length > 0) {\n      var opLength = 0;\n      switch (component[0]) {\n        case diff.INSERT:\n          opLength = Math.min(otherIter.peekLength(), length);\n          delta.push(otherIter.next(opLength));\n          break;\n        case diff.DELETE:\n          opLength = Math.min(length, thisIter.peekLength());\n          thisIter.next(opLength);\n          delta['delete'](opLength);\n          break;\n        case diff.EQUAL:\n          opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);\n          var thisOp = thisIter.next(opLength);\n          var otherOp = otherIter.next(opLength);\n          if (equal(thisOp.insert, otherOp.insert)) {\n            delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));\n          } else {\n            delta.push(otherOp)['delete'](opLength);\n          }\n          break;\n      }\n      length -= opLength;\n    }\n  });\n  return delta.chop();\n};\n\nDelta.prototype.eachLine = function (predicate, newline) {\n  newline = newline || '\\n';\n  var iter = op.iterator(this.ops);\n  var line = new Delta();\n  var i = 0;\n  while (iter.hasNext()) {\n    if (iter.peekType() !== 'insert') return;\n    var thisOp = iter.peek();\n    var start = op.length(thisOp) - iter.peekLength();\n    var index = typeof thisOp.insert === 'string' ?\n      thisOp.insert.indexOf(newline, start) - start : -1;\n    if (index < 0) {\n      line.push(iter.next());\n    } else if (index > 0) {\n      line.push(iter.next(index));\n    } else {\n      if (predicate(line, iter.next(1).attributes || {}, i) === false) {\n        return;\n      }\n      i += 1;\n      line = new Delta();\n    }\n  }\n  if (line.length() > 0) {\n    predicate(line, {}, i);\n  }\n};\n\nDelta.prototype.transform = function (other, priority) {\n  priority = !!priority;\n  if (typeof other === 'number') {\n    return this.transformPosition(other, priority);\n  }\n  var thisIter = op.iterator(this.ops);\n  var otherIter = op.iterator(other.ops);\n  var delta = new Delta();\n  while (thisIter.hasNext() || otherIter.hasNext()) {\n    if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {\n      delta.retain(op.length(thisIter.next()));\n    } else if (otherIter.peekType() === 'insert') {\n      delta.push(otherIter.next());\n    } else {\n      var length = Math.min(thisIter.peekLength(), otherIter.peekLength());\n      var thisOp = thisIter.next(length);\n      var otherOp = otherIter.next(length);\n      if (thisOp['delete']) {\n        // Our delete either makes their delete redundant or removes their retain\n        continue;\n      } else if (otherOp['delete']) {\n        delta.push(otherOp);\n      } else {\n        // We retain either their retain or insert\n        delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));\n      }\n    }\n  }\n  return delta.chop();\n};\n\nDelta.prototype.transformPosition = function (index, priority) {\n  priority = !!priority;\n  var thisIter = op.iterator(this.ops);\n  var offset = 0;\n  while (thisIter.hasNext() && offset <= index) {\n    var length = thisIter.peekLength();\n    var nextType = thisIter.peekType();\n    thisIter.next();\n    if (nextType === 'delete') {\n      index -= Math.min(length, index - offset);\n      continue;\n    } else if (nextType === 'insert' && (offset < index || !priority)) {\n      index += length;\n    }\n    offset += length;\n  }\n  return index;\n};\n\n\nmodule.exports = Delta;\n\n\n//# sourceURL=webpack://Quill/./node_modules/quill-delta/lib/delta.js?");

	/***/ }),

	/***/ "./node_modules/quill-delta/lib/op.js":
	/*!********************************************!*\
	  !*** ./node_modules/quill-delta/lib/op.js ***!
	  \********************************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	eval("var equal = __webpack_require__(/*! deep-equal */ \"./node_modules/deep-equal/index.js\");\nvar extend = __webpack_require__(/*! extend */ \"./node_modules/extend/index.js\");\n\n\nvar lib = {\n  attributes: {\n    compose: function (a, b, keepNull) {\n      if (typeof a !== 'object') a = {};\n      if (typeof b !== 'object') b = {};\n      var attributes = extend(true, {}, b);\n      if (!keepNull) {\n        attributes = Object.keys(attributes).reduce(function (copy, key) {\n          if (attributes[key] != null) {\n            copy[key] = attributes[key];\n          }\n          return copy;\n        }, {});\n      }\n      for (var key in a) {\n        if (a[key] !== undefined && b[key] === undefined) {\n          attributes[key] = a[key];\n        }\n      }\n      return Object.keys(attributes).length > 0 ? attributes : undefined;\n    },\n\n    diff: function(a, b) {\n      if (typeof a !== 'object') a = {};\n      if (typeof b !== 'object') b = {};\n      var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attributes, key) {\n        if (!equal(a[key], b[key])) {\n          attributes[key] = b[key] === undefined ? null : b[key];\n        }\n        return attributes;\n      }, {});\n      return Object.keys(attributes).length > 0 ? attributes : undefined;\n    },\n\n    transform: function (a, b, priority) {\n      if (typeof a !== 'object') return b;\n      if (typeof b !== 'object') return undefined;\n      if (!priority) return b;  // b simply overwrites us without priority\n      var attributes = Object.keys(b).reduce(function (attributes, key) {\n        if (a[key] === undefined) attributes[key] = b[key];  // null is a valid value\n        return attributes;\n      }, {});\n      return Object.keys(attributes).length > 0 ? attributes : undefined;\n    }\n  },\n\n  iterator: function (ops) {\n    return new Iterator(ops);\n  },\n\n  length: function (op) {\n    if (typeof op['delete'] === 'number') {\n      return op['delete'];\n    } else if (typeof op.retain === 'number') {\n      return op.retain;\n    } else {\n      return typeof op.insert === 'string' ? op.insert.length : 1;\n    }\n  }\n};\n\n\nfunction Iterator(ops) {\n  this.ops = ops;\n  this.index = 0;\n  this.offset = 0;\n};\n\nIterator.prototype.hasNext = function () {\n  return this.peekLength() < Infinity;\n};\n\nIterator.prototype.next = function (length) {\n  if (!length) length = Infinity;\n  var nextOp = this.ops[this.index];\n  if (nextOp) {\n    var offset = this.offset;\n    var opLength = lib.length(nextOp)\n    if (length >= opLength - offset) {\n      length = opLength - offset;\n      this.index += 1;\n      this.offset = 0;\n    } else {\n      this.offset += length;\n    }\n    if (typeof nextOp['delete'] === 'number') {\n      return { 'delete': length };\n    } else {\n      var retOp = {};\n      if (nextOp.attributes) {\n        retOp.attributes = nextOp.attributes;\n      }\n      if (typeof nextOp.retain === 'number') {\n        retOp.retain = length;\n      } else if (typeof nextOp.insert === 'string') {\n        retOp.insert = nextOp.insert.substr(offset, length);\n      } else {\n        // offset should === 0, length should === 1\n        retOp.insert = nextOp.insert;\n      }\n      return retOp;\n    }\n  } else {\n    return { retain: Infinity };\n  }\n};\n\nIterator.prototype.peek = function () {\n  return this.ops[this.index];\n};\n\nIterator.prototype.peekLength = function () {\n  if (this.ops[this.index]) {\n    // Should never return 0 if our index is being managed correctly\n    return lib.length(this.ops[this.index]) - this.offset;\n  } else {\n    return Infinity;\n  }\n};\n\nIterator.prototype.peekType = function () {\n  if (this.ops[this.index]) {\n    if (typeof this.ops[this.index]['delete'] === 'number') {\n      return 'delete';\n    } else if (typeof this.ops[this.index].retain === 'number') {\n      return 'retain';\n    } else {\n      return 'insert';\n    }\n  }\n  return 'retain';\n};\n\n\nmodule.exports = lib;\n\n\n//# sourceURL=webpack://Quill/./node_modules/quill-delta/lib/op.js?");

	/***/ }),

	/***/ "./quill.js":
	/*!******************!*\
	  !*** ./quill.js ***!
	  \******************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _core = __webpack_require__(/*! ./core */ \"./core.js\");\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _align = __webpack_require__(/*! ./formats/align */ \"./formats/align.js\");\n\nvar _direction = __webpack_require__(/*! ./formats/direction */ \"./formats/direction.js\");\n\nvar _indent = __webpack_require__(/*! ./formats/indent */ \"./formats/indent.js\");\n\nvar _indent2 = _interopRequireDefault(_indent);\n\nvar _blockquote = __webpack_require__(/*! ./formats/blockquote */ \"./formats/blockquote.js\");\n\nvar _blockquote2 = _interopRequireDefault(_blockquote);\n\nvar _header = __webpack_require__(/*! ./formats/header */ \"./formats/header.js\");\n\nvar _header2 = _interopRequireDefault(_header);\n\nvar _list = __webpack_require__(/*! ./formats/list */ \"./formats/list.js\");\n\nvar _list2 = _interopRequireDefault(_list);\n\nvar _background = __webpack_require__(/*! ./formats/background */ \"./formats/background.js\");\n\nvar _color = __webpack_require__(/*! ./formats/color */ \"./formats/color.js\");\n\nvar _font = __webpack_require__(/*! ./formats/font */ \"./formats/font.js\");\n\nvar _size = __webpack_require__(/*! ./formats/size */ \"./formats/size.js\");\n\nvar _bold = __webpack_require__(/*! ./formats/bold */ \"./formats/bold.js\");\n\nvar _bold2 = _interopRequireDefault(_bold);\n\nvar _italic = __webpack_require__(/*! ./formats/italic */ \"./formats/italic.js\");\n\nvar _italic2 = _interopRequireDefault(_italic);\n\nvar _link = __webpack_require__(/*! ./formats/link */ \"./formats/link.js\");\n\nvar _link2 = _interopRequireDefault(_link);\n\nvar _script = __webpack_require__(/*! ./formats/script */ \"./formats/script.js\");\n\nvar _script2 = _interopRequireDefault(_script);\n\nvar _strike = __webpack_require__(/*! ./formats/strike */ \"./formats/strike.js\");\n\nvar _strike2 = _interopRequireDefault(_strike);\n\nvar _underline = __webpack_require__(/*! ./formats/underline */ \"./formats/underline.js\");\n\nvar _underline2 = _interopRequireDefault(_underline);\n\nvar _formula = __webpack_require__(/*! ./formats/formula */ \"./formats/formula.js\");\n\nvar _formula2 = _interopRequireDefault(_formula);\n\nvar _image = __webpack_require__(/*! ./formats/image */ \"./formats/image.js\");\n\nvar _image2 = _interopRequireDefault(_image);\n\nvar _video = __webpack_require__(/*! ./formats/video */ \"./formats/video.js\");\n\nvar _video2 = _interopRequireDefault(_video);\n\nvar _code = __webpack_require__(/*! ./formats/code */ \"./formats/code.js\");\n\nvar _code2 = _interopRequireDefault(_code);\n\nvar _syntax = __webpack_require__(/*! ./modules/syntax */ \"./modules/syntax.js\");\n\nvar _syntax2 = _interopRequireDefault(_syntax);\n\nvar _table = __webpack_require__(/*! ./modules/table */ \"./modules/table.js\");\n\nvar _table2 = _interopRequireDefault(_table);\n\nvar _toolbar = __webpack_require__(/*! ./modules/toolbar */ \"./modules/toolbar.js\");\n\nvar _toolbar2 = _interopRequireDefault(_toolbar);\n\nvar _icons = __webpack_require__(/*! ./ui/icons */ \"./ui/icons.js\");\n\nvar _icons2 = _interopRequireDefault(_icons);\n\nvar _picker = __webpack_require__(/*! ./ui/picker */ \"./ui/picker.js\");\n\nvar _picker2 = _interopRequireDefault(_picker);\n\nvar _colorPicker = __webpack_require__(/*! ./ui/color-picker */ \"./ui/color-picker.js\");\n\nvar _colorPicker2 = _interopRequireDefault(_colorPicker);\n\nvar _iconPicker = __webpack_require__(/*! ./ui/icon-picker */ \"./ui/icon-picker.js\");\n\nvar _iconPicker2 = _interopRequireDefault(_iconPicker);\n\nvar _tooltip = __webpack_require__(/*! ./ui/tooltip */ \"./ui/tooltip.js\");\n\nvar _tooltip2 = _interopRequireDefault(_tooltip);\n\nvar _bubble = __webpack_require__(/*! ./themes/bubble */ \"./themes/bubble.js\");\n\nvar _bubble2 = _interopRequireDefault(_bubble);\n\nvar _snow = __webpack_require__(/*! ./themes/snow */ \"./themes/snow.js\");\n\nvar _snow2 = _interopRequireDefault(_snow);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_core2.default.register({\n  'attributors/attribute/direction': _direction.DirectionAttribute,\n\n  'attributors/class/align': _align.AlignClass,\n  'attributors/class/background': _background.BackgroundClass,\n  'attributors/class/color': _color.ColorClass,\n  'attributors/class/direction': _direction.DirectionClass,\n  'attributors/class/font': _font.FontClass,\n  'attributors/class/size': _size.SizeClass,\n\n  'attributors/style/align': _align.AlignStyle,\n  'attributors/style/background': _background.BackgroundStyle,\n  'attributors/style/color': _color.ColorStyle,\n  'attributors/style/direction': _direction.DirectionStyle,\n  'attributors/style/font': _font.FontStyle,\n  'attributors/style/size': _size.SizeStyle\n}, true);\n\n_core2.default.register({\n  'formats/align': _align.AlignClass,\n  'formats/direction': _direction.DirectionClass,\n  'formats/indent': _indent2.default,\n\n  'formats/background': _background.BackgroundStyle,\n  'formats/color': _color.ColorStyle,\n  'formats/font': _font.FontClass,\n  'formats/size': _size.SizeClass,\n\n  'formats/blockquote': _blockquote2.default,\n  'formats/code-block': _code2.default,\n  'formats/header': _header2.default,\n  'formats/list': _list2.default,\n\n  'formats/bold': _bold2.default,\n  'formats/code': _code.Code,\n  'formats/italic': _italic2.default,\n  'formats/link': _link2.default,\n  'formats/script': _script2.default,\n  'formats/strike': _strike2.default,\n  'formats/underline': _underline2.default,\n\n  'formats/formula': _formula2.default,\n  'formats/image': _image2.default,\n  'formats/video': _video2.default,\n\n  'modules/syntax': _syntax2.default,\n  'modules/table': _table2.default,\n  'modules/toolbar': _toolbar2.default,\n\n  'themes/bubble': _bubble2.default,\n  'themes/snow': _snow2.default,\n\n  'ui/icons': _icons2.default,\n  'ui/picker': _picker2.default,\n  'ui/icon-picker': _iconPicker2.default,\n  'ui/color-picker': _colorPicker2.default,\n  'ui/tooltip': _tooltip2.default\n}, true);\n\nexports.default = _core2.default;\n\n//# sourceURL=webpack://Quill/./quill.js?");

	/***/ }),

	/***/ "./themes/base.js":
	/*!************************!*\
	  !*** ./themes/base.js ***!
	  \************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.BaseTooltip = undefined;\n\nvar _extend = __webpack_require__(/*! extend */ \"./node_modules/extend/index.js\");\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _emitter = __webpack_require__(/*! ../core/emitter */ \"./core/emitter.js\");\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nvar _theme = __webpack_require__(/*! ../core/theme */ \"./core/theme.js\");\n\nvar _theme2 = _interopRequireDefault(_theme);\n\nvar _colorPicker = __webpack_require__(/*! ../ui/color-picker */ \"./ui/color-picker.js\");\n\nvar _colorPicker2 = _interopRequireDefault(_colorPicker);\n\nvar _iconPicker = __webpack_require__(/*! ../ui/icon-picker */ \"./ui/icon-picker.js\");\n\nvar _iconPicker2 = _interopRequireDefault(_iconPicker);\n\nvar _picker = __webpack_require__(/*! ../ui/picker */ \"./ui/picker.js\");\n\nvar _picker2 = _interopRequireDefault(_picker);\n\nvar _tooltip = __webpack_require__(/*! ../ui/tooltip */ \"./ui/tooltip.js\");\n\nvar _tooltip2 = _interopRequireDefault(_tooltip);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst ALIGNS = [false, 'center', 'right', 'justify'];\n\nconst COLORS = ['#000000', '#e60000', '#ff9900', '#ffff00', '#008a00', '#0066cc', '#9933ff', '#ffffff', '#facccc', '#ffebcc', '#ffffcc', '#cce8cc', '#cce0f5', '#ebd6ff', '#bbbbbb', '#f06666', '#ffc266', '#ffff66', '#66b966', '#66a3e0', '#c285ff', '#888888', '#a10000', '#b26b00', '#b2b200', '#006100', '#0047b2', '#6b24b2', '#444444', '#5c0000', '#663d00', '#666600', '#003700', '#002966', '#3d1466'];\n\nconst FONTS = [false, 'serif', 'monospace'];\n\nconst HEADERS = ['1', '2', '3', false];\n\nconst SIZES = ['small', false, 'large', 'huge'];\n\nclass BaseTheme extends _theme2.default {\n  constructor(quill, options) {\n    super(quill, options);\n    const listener = e => {\n      if (!document.body.contains(quill.root)) {\n        document.body.removeEventListener('click', listener);\n        return;\n      }\n      if (this.tooltip != null && !this.tooltip.root.contains(e.target) && document.activeElement !== this.tooltip.textbox && !this.quill.hasFocus()) {\n        this.tooltip.hide();\n      }\n      if (this.pickers != null) {\n        this.pickers.forEach(picker => {\n          if (!picker.container.contains(e.target)) {\n            picker.close();\n          }\n        });\n      }\n    };\n    quill.emitter.listenDOM('click', document.body, listener);\n  }\n\n  addModule(name) {\n    const module = super.addModule(name);\n    if (name === 'toolbar') {\n      this.extendToolbar(module);\n    }\n    return module;\n  }\n\n  buildButtons(buttons, icons) {\n    Array.from(buttons).forEach(button => {\n      const className = button.getAttribute('class') || '';\n      className.split(/\\s+/).forEach(name => {\n        if (!name.startsWith('ql-')) return;\n        name = name.slice('ql-'.length);\n        if (icons[name] == null) return;\n        if (name === 'direction') {\n          button.innerHTML = icons[name][''] + icons[name].rtl;\n        } else if (typeof icons[name] === 'string') {\n          button.innerHTML = icons[name];\n        } else {\n          const value = button.value || '';\n          if (value != null && icons[name][value]) {\n            button.innerHTML = icons[name][value];\n          }\n        }\n      });\n    });\n  }\n\n  buildPickers(selects, icons) {\n    this.pickers = Array.from(selects).map(select => {\n      if (select.classList.contains('ql-align')) {\n        if (select.querySelector('option') == null) {\n          fillSelect(select, ALIGNS);\n        }\n        return new _iconPicker2.default(select, icons.align);\n      } else if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {\n        const format = select.classList.contains('ql-background') ? 'background' : 'color';\n        if (select.querySelector('option') == null) {\n          fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');\n        }\n        return new _colorPicker2.default(select, icons[format]);\n      }\n      if (select.querySelector('option') == null) {\n        if (select.classList.contains('ql-font')) {\n          fillSelect(select, FONTS);\n        } else if (select.classList.contains('ql-header')) {\n          fillSelect(select, HEADERS);\n        } else if (select.classList.contains('ql-size')) {\n          fillSelect(select, SIZES);\n        }\n      }\n      return new _picker2.default(select);\n    });\n    const update = () => {\n      this.pickers.forEach(picker => {\n        picker.update();\n      });\n    };\n    this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);\n  }\n}\nBaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {\n  modules: {\n    toolbar: {\n      handlers: {\n        formula() {\n          this.quill.theme.tooltip.edit('formula');\n        },\n        image() {\n          let fileInput = this.container.querySelector('input.ql-image[type=file]');\n          if (fileInput == null) {\n            fileInput = document.createElement('input');\n            fileInput.setAttribute('type', 'file');\n            fileInput.setAttribute('accept', this.quill.uploader.options.mimetypes.join(', '));\n            fileInput.classList.add('ql-image');\n            fileInput.addEventListener('change', () => {\n              const range = this.quill.getSelection(true);\n              this.quill.uploader.upload(range, fileInput.files);\n              fileInput.value = '';\n            });\n            this.container.appendChild(fileInput);\n          }\n          fileInput.click();\n        },\n        video() {\n          this.quill.theme.tooltip.edit('video');\n        }\n      }\n    }\n  }\n});\n\nclass BaseTooltip extends _tooltip2.default {\n  constructor(quill, boundsContainer) {\n    super(quill, boundsContainer);\n    this.textbox = this.root.querySelector('input[type=\"text\"]');\n    this.listen();\n  }\n\n  listen() {\n    this.textbox.addEventListener('keydown', event => {\n      if (event.key === 'Enter') {\n        this.save();\n        event.preventDefault();\n      } else if (event.key === 'Escape') {\n        this.cancel();\n        event.preventDefault();\n      }\n    });\n  }\n\n  cancel() {\n    this.hide();\n  }\n\n  edit(mode = 'link', preview = null) {\n    this.root.classList.remove('ql-hidden');\n    this.root.classList.add('ql-editing');\n    if (preview != null) {\n      this.textbox.value = preview;\n    } else if (mode !== this.root.getAttribute('data-mode')) {\n      this.textbox.value = '';\n    }\n    this.position(this.quill.getBounds(this.quill.selection.savedRange));\n    this.textbox.select();\n    this.textbox.setAttribute('placeholder', this.textbox.getAttribute(`data-${mode}`) || '');\n    this.root.setAttribute('data-mode', mode);\n  }\n\n  restoreFocus() {\n    const scrollTop = this.quill.scrollingContainer.scrollTop;\n\n    this.quill.focus();\n    this.quill.scrollingContainer.scrollTop = scrollTop;\n  }\n\n  save() {\n    let value = this.textbox.value;\n\n    switch (this.root.getAttribute('data-mode')) {\n      case 'link':\n        {\n          const scrollTop = this.quill.root.scrollTop;\n\n          if (this.linkRange) {\n            this.quill.formatText(this.linkRange, 'link', value, _emitter2.default.sources.USER);\n            delete this.linkRange;\n          } else {\n            this.restoreFocus();\n            this.quill.format('link', value, _emitter2.default.sources.USER);\n          }\n          this.quill.root.scrollTop = scrollTop;\n          break;\n        }\n      case 'video':\n        {\n          value = extractVideoUrl(value);\n        } // eslint-disable-next-line no-fallthrough\n      case 'formula':\n        {\n          if (!value) break;\n          const range = this.quill.getSelection(true);\n          if (range != null) {\n            const index = range.index + range.length;\n            this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, _emitter2.default.sources.USER);\n            if (this.root.getAttribute('data-mode') === 'formula') {\n              this.quill.insertText(index + 1, ' ', _emitter2.default.sources.USER);\n            }\n            this.quill.setSelection(index + 2, _emitter2.default.sources.USER);\n          }\n          break;\n        }\n      default:\n    }\n    this.textbox.value = '';\n    this.hide();\n  }\n}\n\nfunction extractVideoUrl(url) {\n  let match = url.match(/^(?:(https?):\\/\\/)?(?:(?:www|m)\\.)?youtube\\.com\\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\\/\\/)?(?:(?:www|m)\\.)?youtu\\.be\\/([a-zA-Z0-9_-]+)/);\n  if (match) {\n    return `${match[1] || 'https'}://www.youtube.com/embed/${match[2]}?showinfo=0`;\n  }\n  // eslint-disable-next-line no-cond-assign\n  if (match = url.match(/^(?:(https?):\\/\\/)?(?:www\\.)?vimeo\\.com\\/(\\d+)/)) {\n    return `${match[1] || 'https'}://player.vimeo.com/video/${match[2]}/`;\n  }\n  return url;\n}\n\nfunction fillSelect(select, values, defaultValue = false) {\n  values.forEach(value => {\n    const option = document.createElement('option');\n    if (value === defaultValue) {\n      option.setAttribute('selected', 'selected');\n    } else {\n      option.setAttribute('value', value);\n    }\n    select.appendChild(option);\n  });\n}\n\nexports.BaseTooltip = BaseTooltip;\nexports.default = BaseTheme;\n\n//# sourceURL=webpack://Quill/./themes/base.js?");

	/***/ }),

	/***/ "./themes/bubble.js":
	/*!**************************!*\
	  !*** ./themes/bubble.js ***!
	  \**************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.BubbleTooltip = undefined;\n\nvar _extend = __webpack_require__(/*! extend */ \"./node_modules/extend/index.js\");\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _emitter = __webpack_require__(/*! ../core/emitter */ \"./core/emitter.js\");\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nvar _base = __webpack_require__(/*! ./base */ \"./themes/base.js\");\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _selection = __webpack_require__(/*! ../core/selection */ \"./core/selection.js\");\n\nvar _icons = __webpack_require__(/*! ../ui/icons */ \"./ui/icons.js\");\n\nvar _icons2 = _interopRequireDefault(_icons);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{ header: 1 }, { header: 2 }, 'blockquote']];\n\nclass BubbleTooltip extends _base.BaseTooltip {\n  constructor(quill, bounds) {\n    super(quill, bounds);\n    this.quill.on(_emitter2.default.events.EDITOR_CHANGE, (type, range, oldRange, source) => {\n      if (type !== _emitter2.default.events.SELECTION_CHANGE) return;\n      if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {\n        this.show();\n        // Lock our width so we will expand beyond our offsetParent boundaries\n        this.root.style.left = '0px';\n        this.root.style.width = '';\n        this.root.style.width = `${this.root.offsetWidth}px`;\n        const lines = this.quill.getLines(range.index, range.length);\n        if (lines.length === 1) {\n          this.position(this.quill.getBounds(range));\n        } else {\n          const lastLine = lines[lines.length - 1];\n          const index = this.quill.getIndex(lastLine);\n          const length = Math.min(lastLine.length() - 1, range.index + range.length - index);\n          const indexBounds = this.quill.getBounds(new _selection.Range(index, length));\n          this.position(indexBounds);\n        }\n      } else if (document.activeElement !== this.textbox && this.quill.hasFocus()) {\n        this.hide();\n      }\n    });\n  }\n\n  listen() {\n    super.listen();\n    this.root.querySelector('.ql-close').addEventListener('click', () => {\n      this.root.classList.remove('ql-editing');\n    });\n    this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, () => {\n      // Let selection be restored by toolbar handlers before repositioning\n      setTimeout(() => {\n        if (this.root.classList.contains('ql-hidden')) return;\n        const range = this.quill.getSelection();\n        if (range != null) {\n          this.position(this.quill.getBounds(range));\n        }\n      }, 1);\n    });\n  }\n\n  cancel() {\n    this.show();\n  }\n\n  position(reference) {\n    const shift = super.position(reference);\n    const arrow = this.root.querySelector('.ql-tooltip-arrow');\n    arrow.style.marginLeft = '';\n    if (shift !== 0) {\n      arrow.style.marginLeft = `${-1 * shift - arrow.offsetWidth / 2}px`;\n    }\n    return shift;\n  }\n}\nBubbleTooltip.TEMPLATE = ['<span class=\"ql-tooltip-arrow\"></span>', '<div class=\"ql-tooltip-editor\">', '<input type=\"text\" data-formula=\"e=mc^2\" data-link=\"https://quilljs.com\" data-video=\"Embed URL\">', '<a class=\"ql-close\"></a>', '</div>'].join('');\n\nclass BubbleTheme extends _base2.default {\n  constructor(quill, options) {\n    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {\n      options.modules.toolbar.container = TOOLBAR_CONFIG;\n    }\n    super(quill, options);\n    this.quill.container.classList.add('ql-bubble');\n  }\n\n  extendToolbar(toolbar) {\n    this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);\n    this.tooltip.root.appendChild(toolbar.container);\n    this.buildButtons(toolbar.container.querySelectorAll('button'), _icons2.default);\n    this.buildPickers(toolbar.container.querySelectorAll('select'), _icons2.default);\n  }\n}\nBubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {\n  modules: {\n    toolbar: {\n      handlers: {\n        link(value) {\n          if (!value) {\n            this.quill.format('link', false);\n          } else {\n            this.quill.theme.tooltip.edit();\n          }\n        }\n      }\n    }\n  }\n});\n\nexports.BubbleTooltip = BubbleTooltip;\nexports.default = BubbleTheme;\n\n//# sourceURL=webpack://Quill/./themes/bubble.js?");

	/***/ }),

	/***/ "./themes/snow.js":
	/*!************************!*\
	  !*** ./themes/snow.js ***!
	  \************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _extend = __webpack_require__(/*! extend */ \"./node_modules/extend/index.js\");\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _emitter = __webpack_require__(/*! ../core/emitter */ \"./core/emitter.js\");\n\nvar _emitter2 = _interopRequireDefault(_emitter);\n\nvar _base = __webpack_require__(/*! ./base */ \"./themes/base.js\");\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _link = __webpack_require__(/*! ../formats/link */ \"./formats/link.js\");\n\nvar _link2 = _interopRequireDefault(_link);\n\nvar _selection = __webpack_require__(/*! ../core/selection */ \"./core/selection.js\");\n\nvar _icons = __webpack_require__(/*! ../ui/icons */ \"./ui/icons.js\");\n\nvar _icons2 = _interopRequireDefault(_icons);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst TOOLBAR_CONFIG = [[{ header: ['1', '2', '3', false] }], ['bold', 'italic', 'underline', 'link'], [{ list: 'ordered' }, { list: 'bullet' }], ['clean']];\n\nclass SnowTooltip extends _base.BaseTooltip {\n  constructor(quill, bounds) {\n    super(quill, bounds);\n    this.preview = this.root.querySelector('a.ql-preview');\n  }\n\n  listen() {\n    super.listen();\n    this.root.querySelector('a.ql-action').addEventListener('click', event => {\n      if (this.root.classList.contains('ql-editing')) {\n        this.save();\n      } else {\n        this.edit('link', this.preview.textContent);\n      }\n      event.preventDefault();\n    });\n    this.root.querySelector('a.ql-remove').addEventListener('click', event => {\n      if (this.linkRange != null) {\n        const range = this.linkRange;\n        this.restoreFocus();\n        this.quill.formatText(range, 'link', false, _emitter2.default.sources.USER);\n        delete this.linkRange;\n      }\n      event.preventDefault();\n      this.hide();\n    });\n    this.quill.on(_emitter2.default.events.SELECTION_CHANGE, (range, oldRange, source) => {\n      if (range == null) return;\n      if (range.length === 0 && source === _emitter2.default.sources.USER) {\n        var _quill$scroll$descend = this.quill.scroll.descendant(_link2.default, range.index),\n            _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2);\n\n        const link = _quill$scroll$descend2[0],\n              offset = _quill$scroll$descend2[1];\n\n        if (link != null) {\n          this.linkRange = new _selection.Range(range.index - offset, link.length());\n          const preview = _link2.default.formats(link.domNode);\n          this.preview.textContent = preview;\n          this.preview.setAttribute('href', preview);\n          this.show();\n          this.position(this.quill.getBounds(this.linkRange));\n          return;\n        }\n      } else {\n        delete this.linkRange;\n      }\n      this.hide();\n    });\n  }\n\n  show() {\n    super.show();\n    this.root.removeAttribute('data-mode');\n  }\n}\nSnowTooltip.TEMPLATE = ['<a class=\"ql-preview\" target=\"_blank\" href=\"about:blank\"></a>', '<input type=\"text\" data-formula=\"e=mc^2\" data-link=\"https://quilljs.com\" data-video=\"Embed URL\">', '<a class=\"ql-action\"></a>', '<a class=\"ql-remove\"></a>'].join('');\n\nclass SnowTheme extends _base2.default {\n  constructor(quill, options) {\n    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {\n      options.modules.toolbar.container = TOOLBAR_CONFIG;\n    }\n    super(quill, options);\n    this.quill.container.classList.add('ql-snow');\n  }\n\n  extendToolbar(toolbar) {\n    toolbar.container.classList.add('ql-snow');\n    this.buildButtons(toolbar.container.querySelectorAll('button'), _icons2.default);\n    this.buildPickers(toolbar.container.querySelectorAll('select'), _icons2.default);\n    this.tooltip = new SnowTooltip(this.quill, this.options.bounds);\n    if (toolbar.container.querySelector('.ql-link')) {\n      this.quill.keyboard.addBinding({ key: 'k', shortKey: true }, (range, context) => {\n        toolbar.handlers.link.call(toolbar, !context.format.link);\n      });\n    }\n  }\n}\nSnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {\n  modules: {\n    toolbar: {\n      handlers: {\n        link(value) {\n          if (value) {\n            const range = this.quill.getSelection();\n            if (range == null || range.length === 0) return;\n            let preview = this.quill.getText(range);\n            if (/^\\S+@\\S+\\.\\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {\n              preview = `mailto:${preview}`;\n            }\n            const tooltip = this.quill.theme.tooltip;\n\n            tooltip.edit('link', preview);\n          } else {\n            this.quill.format('link', false);\n          }\n        }\n      }\n    }\n  }\n});\n\nexports.default = SnowTheme;\n\n//# sourceURL=webpack://Quill/./themes/snow.js?");

	/***/ }),

	/***/ "./ui/color-picker.js":
	/*!****************************!*\
	  !*** ./ui/color-picker.js ***!
	  \****************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _picker = __webpack_require__(/*! ./picker */ \"./ui/picker.js\");\n\nvar _picker2 = _interopRequireDefault(_picker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass ColorPicker extends _picker2.default {\n  constructor(select, label) {\n    super(select);\n    this.label.innerHTML = label;\n    this.container.classList.add('ql-color-picker');\n    Array.from(this.container.querySelectorAll('.ql-picker-item')).slice(0, 7).forEach(item => {\n      item.classList.add('ql-primary');\n    });\n  }\n\n  buildItem(option) {\n    const item = super.buildItem(option);\n    item.style.backgroundColor = option.getAttribute('value') || '';\n    return item;\n  }\n\n  selectItem(item, trigger) {\n    super.selectItem(item, trigger);\n    const colorLabel = this.label.querySelector('.ql-color-label');\n    const value = item ? item.getAttribute('data-value') || '' : '';\n    if (colorLabel) {\n      if (colorLabel.tagName === 'line') {\n        colorLabel.style.stroke = value;\n      } else {\n        colorLabel.style.fill = value;\n      }\n    }\n  }\n}\n\nexports.default = ColorPicker;\n\n//# sourceURL=webpack://Quill/./ui/color-picker.js?");

	/***/ }),

	/***/ "./ui/icon-picker.js":
	/*!***************************!*\
	  !*** ./ui/icon-picker.js ***!
	  \***************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _picker = __webpack_require__(/*! ./picker */ \"./ui/picker.js\");\n\nvar _picker2 = _interopRequireDefault(_picker);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass IconPicker extends _picker2.default {\n  constructor(select, icons) {\n    super(select);\n    this.container.classList.add('ql-icon-picker');\n    Array.from(this.container.querySelectorAll('.ql-picker-item')).forEach(item => {\n      item.innerHTML = icons[item.getAttribute('data-value') || ''];\n    });\n    this.defaultItem = this.container.querySelector('.ql-selected');\n    this.selectItem(this.defaultItem);\n  }\n\n  selectItem(target, trigger) {\n    super.selectItem(target, trigger);\n    const item = target || this.defaultItem;\n    this.label.innerHTML = item.innerHTML;\n  }\n}\n\nexports.default = IconPicker;\n\n//# sourceURL=webpack://Quill/./ui/icon-picker.js?");

	/***/ }),

	/***/ "./ui/icons.js":
	/*!*********************!*\
	  !*** ./ui/icons.js ***!
	  \*********************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nvar _alignLeft = __webpack_require__(/*! ../assets/icons/align-left.svg */ \"./assets/icons/align-left.svg\");\n\nvar _alignLeft2 = _interopRequireDefault(_alignLeft);\n\nvar _alignCenter = __webpack_require__(/*! ../assets/icons/align-center.svg */ \"./assets/icons/align-center.svg\");\n\nvar _alignCenter2 = _interopRequireDefault(_alignCenter);\n\nvar _alignRight = __webpack_require__(/*! ../assets/icons/align-right.svg */ \"./assets/icons/align-right.svg\");\n\nvar _alignRight2 = _interopRequireDefault(_alignRight);\n\nvar _alignJustify = __webpack_require__(/*! ../assets/icons/align-justify.svg */ \"./assets/icons/align-justify.svg\");\n\nvar _alignJustify2 = _interopRequireDefault(_alignJustify);\n\nvar _background = __webpack_require__(/*! ../assets/icons/background.svg */ \"./assets/icons/background.svg\");\n\nvar _background2 = _interopRequireDefault(_background);\n\nvar _blockquote = __webpack_require__(/*! ../assets/icons/blockquote.svg */ \"./assets/icons/blockquote.svg\");\n\nvar _blockquote2 = _interopRequireDefault(_blockquote);\n\nvar _bold = __webpack_require__(/*! ../assets/icons/bold.svg */ \"./assets/icons/bold.svg\");\n\nvar _bold2 = _interopRequireDefault(_bold);\n\nvar _clean = __webpack_require__(/*! ../assets/icons/clean.svg */ \"./assets/icons/clean.svg\");\n\nvar _clean2 = _interopRequireDefault(_clean);\n\nvar _code = __webpack_require__(/*! ../assets/icons/code.svg */ \"./assets/icons/code.svg\");\n\nvar _code2 = _interopRequireDefault(_code);\n\nvar _color = __webpack_require__(/*! ../assets/icons/color.svg */ \"./assets/icons/color.svg\");\n\nvar _color2 = _interopRequireDefault(_color);\n\nvar _directionLtr = __webpack_require__(/*! ../assets/icons/direction-ltr.svg */ \"./assets/icons/direction-ltr.svg\");\n\nvar _directionLtr2 = _interopRequireDefault(_directionLtr);\n\nvar _directionRtl = __webpack_require__(/*! ../assets/icons/direction-rtl.svg */ \"./assets/icons/direction-rtl.svg\");\n\nvar _directionRtl2 = _interopRequireDefault(_directionRtl);\n\nvar _formula = __webpack_require__(/*! ../assets/icons/formula.svg */ \"./assets/icons/formula.svg\");\n\nvar _formula2 = _interopRequireDefault(_formula);\n\nvar _header = __webpack_require__(/*! ../assets/icons/header.svg */ \"./assets/icons/header.svg\");\n\nvar _header2 = _interopRequireDefault(_header);\n\nvar _header3 = __webpack_require__(/*! ../assets/icons/header-2.svg */ \"./assets/icons/header-2.svg\");\n\nvar _header4 = _interopRequireDefault(_header3);\n\nvar _italic = __webpack_require__(/*! ../assets/icons/italic.svg */ \"./assets/icons/italic.svg\");\n\nvar _italic2 = _interopRequireDefault(_italic);\n\nvar _image = __webpack_require__(/*! ../assets/icons/image.svg */ \"./assets/icons/image.svg\");\n\nvar _image2 = _interopRequireDefault(_image);\n\nvar _indent = __webpack_require__(/*! ../assets/icons/indent.svg */ \"./assets/icons/indent.svg\");\n\nvar _indent2 = _interopRequireDefault(_indent);\n\nvar _outdent = __webpack_require__(/*! ../assets/icons/outdent.svg */ \"./assets/icons/outdent.svg\");\n\nvar _outdent2 = _interopRequireDefault(_outdent);\n\nvar _link = __webpack_require__(/*! ../assets/icons/link.svg */ \"./assets/icons/link.svg\");\n\nvar _link2 = _interopRequireDefault(_link);\n\nvar _listBullet = __webpack_require__(/*! ../assets/icons/list-bullet.svg */ \"./assets/icons/list-bullet.svg\");\n\nvar _listBullet2 = _interopRequireDefault(_listBullet);\n\nvar _listCheck = __webpack_require__(/*! ../assets/icons/list-check.svg */ \"./assets/icons/list-check.svg\");\n\nvar _listCheck2 = _interopRequireDefault(_listCheck);\n\nvar _listOrdered = __webpack_require__(/*! ../assets/icons/list-ordered.svg */ \"./assets/icons/list-ordered.svg\");\n\nvar _listOrdered2 = _interopRequireDefault(_listOrdered);\n\nvar _subscript = __webpack_require__(/*! ../assets/icons/subscript.svg */ \"./assets/icons/subscript.svg\");\n\nvar _subscript2 = _interopRequireDefault(_subscript);\n\nvar _superscript = __webpack_require__(/*! ../assets/icons/superscript.svg */ \"./assets/icons/superscript.svg\");\n\nvar _superscript2 = _interopRequireDefault(_superscript);\n\nvar _strike = __webpack_require__(/*! ../assets/icons/strike.svg */ \"./assets/icons/strike.svg\");\n\nvar _strike2 = _interopRequireDefault(_strike);\n\nvar _table = __webpack_require__(/*! ../assets/icons/table.svg */ \"./assets/icons/table.svg\");\n\nvar _table2 = _interopRequireDefault(_table);\n\nvar _underline = __webpack_require__(/*! ../assets/icons/underline.svg */ \"./assets/icons/underline.svg\");\n\nvar _underline2 = _interopRequireDefault(_underline);\n\nvar _video = __webpack_require__(/*! ../assets/icons/video.svg */ \"./assets/icons/video.svg\");\n\nvar _video2 = _interopRequireDefault(_video);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = {\n  align: {\n    '': _alignLeft2.default,\n    center: _alignCenter2.default,\n    right: _alignRight2.default,\n    justify: _alignJustify2.default\n  },\n  background: _background2.default,\n  blockquote: _blockquote2.default,\n  bold: _bold2.default,\n  clean: _clean2.default,\n  code: _code2.default,\n  'code-block': _code2.default,\n  color: _color2.default,\n  direction: {\n    '': _directionLtr2.default,\n    rtl: _directionRtl2.default\n  },\n  formula: _formula2.default,\n  header: {\n    '1': _header2.default,\n    '2': _header4.default\n  },\n  italic: _italic2.default,\n  image: _image2.default,\n  indent: {\n    '+1': _indent2.default,\n    '-1': _outdent2.default\n  },\n  link: _link2.default,\n  list: {\n    bullet: _listBullet2.default,\n    check: _listCheck2.default,\n    ordered: _listOrdered2.default\n  },\n  script: {\n    sub: _subscript2.default,\n    super: _superscript2.default\n  },\n  strike: _strike2.default,\n  table: _table2.default,\n  underline: _underline2.default,\n  video: _video2.default\n};\n\n//# sourceURL=webpack://Quill/./ui/icons.js?");

	/***/ }),

	/***/ "./ui/picker.js":
	/*!**********************!*\
	  !*** ./ui/picker.js ***!
	  \**********************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _dropdown = __webpack_require__(/*! ../assets/icons/dropdown.svg */ \"./assets/icons/dropdown.svg\");\n\nvar _dropdown2 = _interopRequireDefault(_dropdown);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet optionsCounter = 0;\n\nfunction toggleAriaAttribute(element, attribute) {\n  element.setAttribute(attribute, !(element.getAttribute(attribute) === 'true'));\n}\n\nclass Picker {\n  constructor(select) {\n    this.select = select;\n    this.container = document.createElement('span');\n    this.buildPicker();\n    this.select.style.display = 'none';\n    this.select.parentNode.insertBefore(this.container, this.select);\n\n    this.label.addEventListener('mousedown', () => {\n      this.togglePicker();\n    });\n    this.label.addEventListener('keydown', event => {\n      switch (event.key) {\n        case 'Enter':\n          this.togglePicker();\n          break;\n        case 'Escape':\n          this.escape();\n          event.preventDefault();\n          break;\n        default:\n      }\n    });\n    this.select.addEventListener('change', this.update.bind(this));\n  }\n\n  togglePicker() {\n    this.container.classList.toggle('ql-expanded');\n    // Toggle aria-expanded and aria-hidden to make the picker accessible\n    toggleAriaAttribute(this.label, 'aria-expanded');\n    toggleAriaAttribute(this.options, 'aria-hidden');\n  }\n\n  buildItem(option) {\n    const item = document.createElement('span');\n    item.tabIndex = '0';\n    item.setAttribute('role', 'button');\n    item.classList.add('ql-picker-item');\n    if (option.hasAttribute('value')) {\n      item.setAttribute('data-value', option.getAttribute('value'));\n    }\n    if (option.textContent) {\n      item.setAttribute('data-label', option.textContent);\n    }\n    item.addEventListener('click', () => {\n      this.selectItem(item, true);\n    });\n    item.addEventListener('keydown', event => {\n      switch (event.key) {\n        case 'Enter':\n          this.selectItem(item, true);\n          event.preventDefault();\n          break;\n        case 'Escape':\n          this.escape();\n          event.preventDefault();\n          break;\n        default:\n      }\n    });\n\n    return item;\n  }\n\n  buildLabel() {\n    const label = document.createElement('span');\n    label.classList.add('ql-picker-label');\n    label.innerHTML = _dropdown2.default;\n    label.tabIndex = '0';\n    label.setAttribute('role', 'button');\n    label.setAttribute('aria-expanded', 'false');\n    this.container.appendChild(label);\n    return label;\n  }\n\n  buildOptions() {\n    const options = document.createElement('span');\n    options.classList.add('ql-picker-options');\n\n    // Don't want screen readers to read this until options are visible\n    options.setAttribute('aria-hidden', 'true');\n    options.tabIndex = '-1';\n\n    // Need a unique id for aria-controls\n    options.id = `ql-picker-options-${optionsCounter}`;\n    optionsCounter += 1;\n    this.label.setAttribute('aria-controls', options.id);\n\n    this.options = options;\n\n    Array.from(this.select.options).forEach(option => {\n      const item = this.buildItem(option);\n      options.appendChild(item);\n      if (option.selected === true) {\n        this.selectItem(item);\n      }\n    });\n    this.container.appendChild(options);\n  }\n\n  buildPicker() {\n    Array.from(this.select.attributes).forEach(item => {\n      this.container.setAttribute(item.name, item.value);\n    });\n    this.container.classList.add('ql-picker');\n    this.label = this.buildLabel();\n    this.buildOptions();\n  }\n\n  escape() {\n    // Close menu and return focus to trigger label\n    this.close();\n    // Need setTimeout for accessibility to ensure that the browser executes\n    // focus on the next process thread and after any DOM content changes\n    setTimeout(() => this.label.focus(), 1);\n  }\n\n  close() {\n    this.container.classList.remove('ql-expanded');\n    this.label.setAttribute('aria-expanded', 'false');\n    this.options.setAttribute('aria-hidden', 'true');\n  }\n\n  selectItem(item, trigger = false) {\n    const selected = this.container.querySelector('.ql-selected');\n    if (item === selected) return;\n    if (selected != null) {\n      selected.classList.remove('ql-selected');\n    }\n    if (item == null) return;\n    item.classList.add('ql-selected');\n    this.select.selectedIndex = Array.from(item.parentNode.children).indexOf(item);\n    if (item.hasAttribute('data-value')) {\n      this.label.setAttribute('data-value', item.getAttribute('data-value'));\n    } else {\n      this.label.removeAttribute('data-value');\n    }\n    if (item.hasAttribute('data-label')) {\n      this.label.setAttribute('data-label', item.getAttribute('data-label'));\n    } else {\n      this.label.removeAttribute('data-label');\n    }\n    if (trigger) {\n      this.select.dispatchEvent(new Event('change'));\n      this.close();\n    }\n  }\n\n  update() {\n    let option;\n    if (this.select.selectedIndex > -1) {\n      const item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];\n      option = this.select.options[this.select.selectedIndex];\n      this.selectItem(item);\n    } else {\n      this.selectItem(null);\n    }\n    const isActive = option != null && option !== this.select.querySelector('option[selected]');\n    this.label.classList.toggle('ql-active', isActive);\n  }\n}\n\nexports.default = Picker;\n\n//# sourceURL=webpack://Quill/./ui/picker.js?");

	/***/ }),

	/***/ "./ui/tooltip.js":
	/*!***********************!*\
	  !*** ./ui/tooltip.js ***!
	  \***********************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {
	eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nclass Tooltip {\n  constructor(quill, boundsContainer) {\n    this.quill = quill;\n    this.boundsContainer = boundsContainer || document.body;\n    this.root = quill.addContainer('ql-tooltip');\n    this.root.innerHTML = this.constructor.TEMPLATE;\n    if (this.quill.root === this.quill.scrollingContainer) {\n      this.quill.root.addEventListener('scroll', () => {\n        this.root.style.marginTop = `${-1 * this.quill.root.scrollTop}px`;\n      });\n    }\n    this.hide();\n  }\n\n  hide() {\n    this.root.classList.add('ql-hidden');\n  }\n\n  position(reference) {\n    const left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;\n    // root.scrollTop should be 0 if scrollContainer !== root\n    const top = reference.bottom + this.quill.root.scrollTop;\n    this.root.style.left = `${left}px`;\n    this.root.style.top = `${top}px`;\n    this.root.classList.remove('ql-flip');\n    const containerBounds = this.boundsContainer.getBoundingClientRect();\n    const rootBounds = this.root.getBoundingClientRect();\n    let shift = 0;\n    if (rootBounds.right > containerBounds.right) {\n      shift = containerBounds.right - rootBounds.right;\n      this.root.style.left = `${left + shift}px`;\n    }\n    if (rootBounds.left < containerBounds.left) {\n      shift = containerBounds.left - rootBounds.left;\n      this.root.style.left = `${left + shift}px`;\n    }\n    if (rootBounds.bottom > containerBounds.bottom) {\n      const height = rootBounds.bottom - rootBounds.top;\n      const verticalShift = reference.bottom - reference.top + height;\n      this.root.style.top = `${top - verticalShift}px`;\n      this.root.classList.add('ql-flip');\n    }\n    return shift;\n  }\n\n  show() {\n    this.root.classList.remove('ql-editing');\n    this.root.classList.remove('ql-hidden');\n  }\n}\n\nexports.default = Tooltip;\n\n//# sourceURL=webpack://Quill/./ui/tooltip.js?");

	/***/ }),

	/***/ 0:
	/*!************************!*\
	  !*** multi ./quill.js ***!
	  \************************/
	/*! no static exports found */
	/***/ (function(module, exports, __webpack_require__) {

	eval("module.exports = __webpack_require__(/*! ./quill.js */\"./quill.js\");\n\n\n//# sourceURL=webpack://Quill/multi_./quill.js?");

	/***/ })

	/******/ })["default"];
	});
	});

	var Quill = unwrapExports(quill);

	// replace <p> tag with <div>
	var Block = Quill.import('blots/block');
	Block.tagName = 'DIV';
	Quill.register(Block, true);

	var CodeBlockContainer = Quill.import('formats/code-block-container');
	CodeBlockContainer.tagName = 'PRE';
	Quill.register(CodeBlockContainer, true);

	// table
	var Table = Quill.import('formats/table-container');
	var superCreate = Table.create.bind(Table);
	Table.create = function (value) {
		var node = superCreate(value);
		node.classList.add('table');
		node.classList.add('table-bordered');
		return node;
	};
	Quill.register(Table, true);

	// link without href
	var Link = Quill.import('formats/link');

	class MyLink extends Link {
		static create(value) {
			var node = super.create(value);
			value = this.sanitize(value);
			node.setAttribute('href', value);
			if(value.startsWith('/') || value.indexOf(window.location.host)) {
				// no href if internal link
				node.removeAttribute('target');
			}
			return node;
		}
	}

	Quill.register(MyLink, true);

	// image uploader
	var Uploader = Quill.import('modules/uploader');
	Uploader.DEFAULTS.mimetypes.push('image/gif');

	// inline style
	var BackgroundStyle = Quill.import('attributors/style/background');
	var ColorStyle = Quill.import('attributors/style/color');
	var FontStyle = Quill.import('attributors/style/font');
	var AlignStyle = Quill.import('attributors/style/align');
	var DirectionStyle = Quill.import('attributors/style/direction');
	Quill.register(BackgroundStyle, true);
	Quill.register(ColorStyle, true);
	Quill.register(FontStyle, true);
	Quill.register(AlignStyle, true);
	Quill.register(DirectionStyle, true);

	frappe.ui.form.ControlTextEditor = frappe.ui.form.ControlCode.extend({
		make_wrapper: function make_wrapper() {
			this._super();
			this.$wrapper.find(".like-disabled-input").addClass('text-editor-print');
		},

		make_input: function make_input() {
			this.has_input = true;
			this.make_quill_editor();
		},

		make_quill_editor: function make_quill_editor() {
			if (this.quill) { return; }
			this.quill_container = $('<div>').appendTo(this.input_area);
			this.quill = new Quill(this.quill_container[0], this.get_quill_options());
			this.bind_events();
		},

		bind_events: function bind_events() {
			var this$1 = this;

			this.quill.on('text-change', frappe.utils.debounce(function (delta, oldDelta, source) {
				if (!this$1.is_quill_dirty(source)) { return; }

				var input_value = this$1.get_input_value();
				this$1.parse_validate_and_set_in_model(input_value);
			}, 300));

			$(this.quill.root).on('keydown', function (e) {
				var key = frappe.ui.keys.get_key(e);
				if (['ctrl+b', 'meta+b'].includes(key)) {
					e.stopPropagation();
				}
			});

			$(this.quill.root).on('drop', function (e) {
				e.stopPropagation();
			});

			// table commands
			this.$wrapper.on('click', '.ql-table .ql-picker-item', function (e) {
				var $target = $(e.currentTarget);
				var action = $target.data().value;
				e.preventDefault();

				var table = this$1.quill.getModule('table');
				if (action === 'insert-table') {
					table.insertTable(2, 2);
				} else if (action === 'insert-row-above') {
					table.insertRowAbove();
				} else if (action === 'insert-row-below') {
					table.insertRowBelow();
				} else if (action === 'insert-column-left') {
					table.insertColumnLeft();
				} else if (action === 'insert-column-right') {
					table.insertColumnRight();
				} else if (action === 'delete-row') {
					table.deleteRow();
				} else if (action === 'delete-column') {
					table.deleteColumn();
				} else if (action === 'delete-table') {
					table.deleteTable();
				}

				if (action !== 'delete-row') {
					table.balanceTables();
				}

				e.preventDefault();
			});
		},

		is_quill_dirty: function is_quill_dirty(source) {
			if (source === 'api') { return false; }
			var input_value = this.get_input_value();
			return this.value !== input_value;
		},

		get_quill_options: function get_quill_options() {
			return {
				modules: {
					toolbar: this.get_toolbar_options(),
					table: true
				},
				theme: 'snow'
			};
		},

		get_toolbar_options: function get_toolbar_options() {
			return [
				[{ 'header': [1, 2, 3, false] }],
				['bold', 'italic', 'underline'],
				[{ 'color': [] }, { 'background': [] }],
				['blockquote', 'code-block'],
				['link', 'image'],
				[{ 'list': 'ordered' }, { 'list': 'bullet' }, { 'list': 'check' }],
				[{ 'align': [] }],
				[{ 'indent': '-1'}, { 'indent': '+1' }],
				[{'table': [
					'insert-table',
					'insert-row-above',
					'insert-row-below',
					'insert-column-right',
					'insert-column-left',
					'delete-row',
					'delete-column',
					'delete-table' ]}],
				['clean']
			];
		},

		parse: function parse(value) {
			if (value == null) {
				value = "";
			}
			return frappe.dom.remove_script_and_style(value);
		},

		set_formatted_input: function set_formatted_input(value) {
			if (!this.quill) { return; }
			if (value === this.get_input_value()) { return; }
			if (!value) {
				// clear contents for falsy values like '', undefined or null
				this.quill.setText('');
				return;
			}

			// set html without triggering a focus
			var delta = this.quill.clipboard.convert({ html: value, text: '' });
			this.quill.setContents(delta);
		},

		get_input_value: function get_input_value() {
			var value = this.quill ? this.quill.root.innerHTML : '';
			// quill keeps ol as a common container for both type of lists
			// and uses css for appearances, this is not semantic
			// so we convert ol to ul if it is unordered
			var $value = $(("<div>" + value + "</div>"));
			$value.find('ol li[data-list=bullet]:first-child').each(function (i, li) {
				var $li = $(li);
				var $parent = $li.parent();
				var $children = $parent.children();
				var $ul = $('<ul>').append($children);
				$parent.replaceWith($ul);
			});
			value = this.convertLists($value.html());
			return value;
		},

		// hack
		// https://github.com/quilljs/quill/issues/979
		convertLists: function convertLists(richtext) {
			var this$1 = this;

			var tempEl = window.document.createElement('div');
			tempEl.setAttribute('style', 'display: none;');
			tempEl.innerHTML = richtext;
			var startLi = '::startli::';
			var endLi = '::endli::';

			['ul','ol'].forEach(function (type) {
				var startTag = "::start" + type + "::";
				var endTag = "::end" + type + "::";

				// Grab each list, and work on it in turn
				Array.from(tempEl.querySelectorAll(type)).forEach(function (outerListEl) {
					var listChildren = Array.from(outerListEl.children).filter(function (el) { return el.tagName === 'LI'; });

					var lastLiLevel = 0;
					var currentLiLevel = 0;
					var difference = 0;

					// Now work through each li in this list
					for (var i = 0; i < listChildren.length; i++) {
						var currentLi = listChildren[i];
						lastLiLevel = currentLiLevel;
						currentLiLevel = this$1.getListLevel(currentLi);
						difference = currentLiLevel - lastLiLevel;

						// we only need to add tags if the level is changing
						if (difference > 0) {
							currentLi.before((startLi + startTag).repeat(difference));
						} else if (difference < 0) {
							currentLi.before((endTag + endLi).repeat(-difference));
						}

						if (i === listChildren.length - 1) {
							// last li, account for the fact that it might not be at level 0
							currentLi.after((endTag + endLi).repeat(currentLiLevel));
						}
					}
				});
			});

			//  Get the content in the element and replace the temporary tags with new ones
			var newContent = tempEl.innerHTML;

			newContent = newContent.replace(/::startul::/g, '<ul>');
			newContent = newContent.replace(/::endul::/g, '</ul>');
			newContent = newContent.replace(/::startol::/g, '<ol>');
			newContent = newContent.replace(/::endol::/g, '</ol>');
			newContent = newContent.replace(/::startli::/g, '<li>');
			newContent = newContent.replace(/::endli::/g, '</li>');

			// remove quill classes
			newContent = newContent.replace(/data-list=.bullet./g, '');
			newContent = newContent.replace(/class=.ql-indent-../g, '');

			// ul/ol should not be inside another li
			newContent = newContent.replace(/<\/li><li><ul>/g, '<ul>');
			newContent = newContent.replace(/<\/li><li><ol>/g, '<ol>');
			tempEl.remove();

			return newContent;
		},

		getListLevel: function getListLevel(el) {
			var className = el.className || '0';
			return +className.replace(/[^\d]/g, '');
		},

		set_focus: function set_focus() {
			this.quill.focus();
		}
	});

	/* eslint-disable */
	var Keys = {
	  TAB: 'Tab',
	  ENTER: 'Enter',
	  ESCAPE: 27,
	  UP: 'ArrowUp',
	  DOWN: 'ArrowDown',
	};

	// ignored /home/bharath/frappe-bench/apps/frappe/frappe/public/js/frappe/form/controls/quill-mention/quill.mention.css

	/* eslint-disable */

	var Embed = Quill.import('blots/embed');


	class MentionBlot extends Embed {
	  static create(data) {
	    var node = super.create();
	    var denotationChar = document.createElement('span');
	    denotationChar.className = 'ql-mention-denotation-char';
	    denotationChar.innerHTML = data.denotationChar;
	    node.appendChild(denotationChar);
	    node.innerHTML += data.value;
	    node.dataset.id = data.id;
	    node.dataset.value = data.value;
	    node.dataset.denotationChar = data.denotationChar;
	    if (data.link) {
	      node.dataset.link = data.link;
	    }
	    return node;
	  }

	  static value(domNode) {
	    return {
	      id: domNode.dataset.id,
	      value: domNode.dataset.value,
	      link: domNode.dataset.link || null,
	      denotationChar: domNode.dataset.denotationChar,
	    };
	  }
	}

	MentionBlot.blotName = 'mention';
	MentionBlot.tagName = 'span';
	MentionBlot.className = 'mention';

	Quill.register(MentionBlot, true);

	/* eslint-disable */


	class Mention {
	  constructor(quill, options) {
	    this.isOpen = false;
	    this.itemIndex = 0;
	    this.mentionCharPos = null;
	    this.cursorPos = null;
	    this.values = [];
	    this.suspendMouseEnter = false;

	    this.quill = quill;

	    this.options = {
	      source: null,
	      renderItem: function renderItem(item, searchTerm) {
	        return ("" + (item.value));
	      },
	      mentionDenotationChars: ['@'],
	      allowedChars: /^[a-zA-Z0-9_]*$/,
	      minChars: 0,
	      maxChars: 31,
	      offsetTop: 2,
	      offsetLeft: 0,
	      isolateCharacter: false,
	      fixMentionsToQuill: false,
	      defaultMenuOrientation: 'bottom',
	    };

	    Object.assign(this.options, options);

	    this.mentionContainer = document.createElement('div');
	    this.mentionContainer.className = 'ql-mention-list-container';
	    this.mentionContainer.style.cssText = 'display: none; position: absolute;';
	    this.mentionContainer.onmousemove = this.onContainerMouseMove.bind(this);

	    if (this.options.fixMentionsToQuill) {
	      this.mentionContainer.style.width = 'auto';
	    }

	    this.mentionList = document.createElement('ul');
	    this.mentionList.className = 'ql-mention-list';
	    this.mentionContainer.appendChild(this.mentionList);

	    this.quill.container.appendChild(this.mentionContainer);

	    quill.on('text-change', this.onTextChange.bind(this));
	    quill.on('selection-change', this.onSelectionChange.bind(this));

	    quill.keyboard.addBinding({
	      key: Keys.TAB,
	    }, this.selectHandler.bind(this));
	    quill.keyboard.bindings[Keys.TAB].unshift(quill.keyboard.bindings[Keys.TAB].pop());

	    quill.keyboard.addBinding({
	      key: Keys.ENTER,
	    }, this.selectHandler.bind(this));
	    quill.keyboard.bindings[Keys.ENTER].unshift(quill.keyboard.bindings[Keys.ENTER].pop());

	    quill.keyboard.addBinding({
	      key: Keys.ESCAPE,
	    }, this.escapeHandler.bind(this));

	    quill.keyboard.addBinding({
	      key: Keys.UP,
	    }, this.upHandler.bind(this));

	    quill.keyboard.addBinding({
	      key: Keys.DOWN,
	    }, this.downHandler.bind(this));
	  }

	  selectHandler() {
	    if (this.isOpen) {
	      this.selectItem();
	      return false;
	    }
	    return true;
	  }

	  escapeHandler() {
	    if (this.isOpen) {
	      this.hideMentionList();
	      return false;
	    }
	    return true;
	  }

	  upHandler() {
	    if (this.isOpen) {
	      this.prevItem();
	      return false;
	    }
	    return true;
	  }

	  downHandler() {
	    if (this.isOpen) {
	      this.nextItem();
	      return false;
	    }
	    return true;
	  }

	  showMentionList() {
	    this.mentionContainer.style.visibility = 'hidden';
	    this.mentionContainer.style.display = '';
	    this.setMentionContainerPosition();
	    this.isOpen = true;
	  }

	  hideMentionList() {
	    this.mentionContainer.style.display = 'none';
	    this.isOpen = false;
	  }

	  highlightItem(scrollItemInView) {
	    if ( scrollItemInView === void 0 ) scrollItemInView = true;

	    for (var i = 0; i < this.mentionList.childNodes.length; i += 1) {
	      this.mentionList.childNodes[i].classList.remove('selected');
	    }
	    this.mentionList.childNodes[this.itemIndex].classList.add('selected');

	    if (scrollItemInView) {
	      var itemHeight = this.mentionList.childNodes[this.itemIndex].offsetHeight;
	      var itemPos = this.itemIndex * itemHeight;
	      var containerTop = this.mentionContainer.scrollTop;
	      var containerBottom = containerTop + this.mentionContainer.offsetHeight;

	      if (itemPos < containerTop) {
	        // Scroll up if the item is above the top of the container
	        this.mentionContainer.scrollTop = itemPos;
	      } else if (itemPos > (containerBottom - itemHeight)) {
	        // scroll down if any part of the element is below the bottom of the container
	        this.mentionContainer.scrollTop += (itemPos - containerBottom) + itemHeight;
	      }
	    }
	  }

	  getItemData() {
	    var itemLink = this.mentionList.childNodes[this.itemIndex].dataset.link;
	    return {
	      id: this.mentionList.childNodes[this.itemIndex].dataset.id,
	      value: itemLink ?
	        ("<a href=\"" + itemLink + "\" target=\"_blank\">" + (this.mentionList.childNodes[this.itemIndex].dataset.value)) :
	        this.mentionList.childNodes[this.itemIndex].dataset.value,
	      link: itemLink || null,
	      denotationChar: this.mentionList.childNodes[this.itemIndex].dataset.denotationChar,
	    };
	  }

	  onContainerMouseMove() {
	    this.suspendMouseEnter = false;
	  }

	  selectItem() {
	    var data = this.getItemData();
	    this.quill
	      .deleteText(this.mentionCharPos, this.cursorPos - this.mentionCharPos, Quill.sources.API);
	    this.quill.insertEmbed(this.mentionCharPos, 'mention', data, Quill.sources.API);
	    this.quill.insertText(this.mentionCharPos + 1, ' ', Quill.sources.API);
	    this.quill.setSelection(this.mentionCharPos + 2, Quill.sources.API);
	    this.hideMentionList();
	  }

	  onItemMouseEnter(e) {
	    if (this.suspendMouseEnter) {
	      return;
	    }

	    var index = Number(e.target.dataset.index);

	    if (!Number.isNaN(index) && index !== this.itemIndex) {
	      this.itemIndex = index;
	      this.highlightItem(false);
	    }
	  }

	  onItemClick(e) {
	    e.stopImmediatePropagation();
	    e.preventDefault();
	    this.itemIndex = e.currentTarget.dataset.index;
	    this.highlightItem();
	    this.selectItem();
	  }

	  renderList(mentionChar, data, searchTerm) {
	    if (data && data.length > 0) {
	      this.values = data;
	      this.mentionList.innerHTML = '';
	      for (var i = 0; i < data.length; i += 1) {
	        var li = document.createElement('li');
	        li.className = 'ql-mention-list-item';
	        li.dataset.index = i;
	        li.dataset.id = data[i].id;
	        li.dataset.value = data[i].value;
	        li.dataset.denotationChar = mentionChar;
	        if (data[i].link) {
	          li.dataset.link = data[i].link;
	        }
	        li.innerHTML = this.options.renderItem(data[i], searchTerm);
	        li.onmouseenter = this.onItemMouseEnter.bind(this);
	        li.onclick = this.onItemClick.bind(this);
	        this.mentionList.appendChild(li);
	      }
	      this.itemIndex = 0;
	      this.highlightItem();
	      this.showMentionList();
	    } else {
	      this.hideMentionList();
	    }
	  }

	  nextItem() {
	    this.itemIndex = (this.itemIndex + 1) % this.values.length;
	    this.suspendMouseEnter = true;
	    this.highlightItem();
	  }

	  prevItem() {
	    this.itemIndex = ((this.itemIndex + this.values.length) - 1) % this.values.length;
	    this.suspendMouseEnter = true;
	    this.highlightItem();
	  }

	  hasValidChars(s) {
	    return this.options.allowedChars.test(s);
	  }

	  containerBottomIsNotVisible(topPos, containerPos) {
	    var mentionContainerBottom = topPos + this.mentionContainer.offsetHeight + containerPos.top;
	    return mentionContainerBottom > window.pageYOffset + window.innerHeight;
	  }

	  containerRightIsNotVisible(leftPos, containerPos) {
	    if (this.options.fixMentionsToQuill) {
	      return false;
	    }

	    var rightPos = leftPos + this.mentionContainer.offsetWidth + containerPos.left;
	    var browserWidth = window.pageXOffset + document.documentElement.clientWidth;
	    return rightPos > browserWidth;
	  }

	  setMentionContainerPosition() {
	    var containerPos = this.quill.container.getBoundingClientRect();
	    var mentionCharPos = this.quill.getBounds(this.mentionCharPos);
	    var containerHeight = this.mentionContainer.offsetHeight;

	    var topPos = this.options.offsetTop;
	    var leftPos = this.options.offsetLeft;

	    // handle horizontal positioning
	    if (this.options.fixMentionsToQuill) {
	      var rightPos = 0;
	      this.mentionContainer.style.right = rightPos + "px";
	    } else {
	      leftPos += mentionCharPos.left;
	    }

	    if (this.containerRightIsNotVisible(leftPos, containerPos)) {
	      var containerWidth = this.mentionContainer.offsetWidth + this.options.offsetLeft;
	      var quillWidth = containerPos.width;
	      leftPos = quillWidth - containerWidth;
	    }

	    // handle vertical positioning
	    if (this.options.defaultMenuOrientation === 'top') {
	      // Attempt to align the mention container with the top of the quill editor
	      if (this.options.fixMentionsToQuill) {
	        topPos = -1 * (containerHeight + this.options.offsetTop);
	      } else {
	        topPos = mentionCharPos.top - (containerHeight + this.options.offsetTop);
	      }

	      // default to bottom if the top is not visible
	      if (topPos + containerPos.top <= 0) {
	        var overMentionCharPos = this.options.offsetTop;

	        if (this.options.fixMentionsToQuill) {
	          overMentionCharPos += containerPos.height;
	        } else {
	          overMentionCharPos += mentionCharPos.bottom;
	        }

	        topPos = overMentionCharPos;
	      }
	    } else {
	      // Attempt to align the mention container with the bottom of the quill editor
	      if (this.options.fixMentionsToQuill) {
	        topPos += containerPos.height;
	      } else {
	        topPos += mentionCharPos.bottom;
	      }

	      // default to the top if the bottom is not visible
	      if (this.containerBottomIsNotVisible(topPos, containerPos)) {
	        var overMentionCharPos$1 = this.options.offsetTop * -1;

	        if (!this.options.fixMentionsToQuill) {
	          overMentionCharPos$1 += mentionCharPos.top;
	        }

	        topPos = overMentionCharPos$1 - containerHeight;
	      }
	    }

	    this.mentionContainer.style.top = topPos + "px";
	    this.mentionContainer.style.left = leftPos + "px";

	    this.mentionContainer.style.visibility = 'visible';
	  }

	  onSomethingChange() {
	    var range = this.quill.getSelection();
	    if (range == null) { return; }
	    this.cursorPos = range.index;
	    var startPos = Math.max(0, this.cursorPos - this.options.maxChars);
	    var beforeCursorPos = this.quill.getText(startPos, this.cursorPos - startPos);
	    var mentionCharIndex = this.options.mentionDenotationChars.reduce(function (prev, cur) {
	      var previousIndex = prev;
	      var mentionIndex = beforeCursorPos.lastIndexOf(cur);

	      return mentionIndex > previousIndex ? mentionIndex : previousIndex;
	    }, -1);
	    if (mentionCharIndex > -1) {
	      if (this.options.isolateCharacter && !(mentionCharIndex == 0 || !!beforeCursorPos[mentionCharIndex - 1].match(/\s/g))) {
	        this.hideMentionList();
	        return;
	      }
	      var mentionCharPos = this.cursorPos - (beforeCursorPos.length - mentionCharIndex);
	      this.mentionCharPos = mentionCharPos;
	      var textAfter = beforeCursorPos.substring(mentionCharIndex + 1);
	      if (textAfter.length >= this.options.minChars && this.hasValidChars(textAfter)) {
	        var mentionChar = beforeCursorPos[mentionCharIndex];
	        this.options.source(textAfter, this.renderList.bind(this, mentionChar), mentionChar);
	      } else {
	        this.hideMentionList();
	      }
	    } else {
	      this.hideMentionList();
	    }
	  }

	  onTextChange(delta, oldDelta, source) {
	    if (source === 'user') {
	      this.onSomethingChange();
	    }
	  }

	  onSelectionChange(range) {
	    if (range && range.length === 0) {
	      this.onSomethingChange();
	    } else {
	      this.hideMentionList();
	    }
	  }
	}

	Quill.register('modules/mention', Mention, true);

	Quill.register('modules/mention', Mention, true);

	frappe.ui.form.ControlComment = frappe.ui.form.ControlTextEditor.extend({
		make_wrapper: function make_wrapper() {
			this.comment_wrapper = !this.no_wrapper ? $(("\n\t\t\t\t<div class=\"comment-input-wrapper\">\n\t\t\t\t\t<div class=\"comment-input-header\">\n\t\t\t\t\t<span class=\"small text-muted\">" + (__("Add a comment")) + "</span>\n\t\t\t\t\t<button class=\"btn btn-default btn-comment btn-xs pull-right\">\n\t\t\t\t\t\t" + (__("Comment")) + "\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"comment-input-container\">\n\t\t\t\t\t<div class=\"frappe-control\"></div>\n\t\t\t\t\t<div class=\"text-muted small\">\n\t\t\t\t\t\t" + (__("Ctrl+Enter to add comment")) + "\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t")) : $('<div class="frappe-control"></div>');

			this.comment_wrapper.appendTo(this.parent);

			// wrapper should point to frappe-control
			this.$wrapper = !this.no_wrapper
				? this.comment_wrapper.find('.frappe-control')
				: this.comment_wrapper;

			this.wrapper = this.$wrapper;

			this.button = this.comment_wrapper.find('.btn-comment');
		},

		bind_events: function bind_events() {
			var this$1 = this;

			this._super();

			this.button.click(function () {
				this$1.submit();
			});

			this.$wrapper.on('keydown', function (e) {
				var key = frappe.ui.keys.get_key(e);
				if (key === 'ctrl+enter') {
					e.preventDefault();
					this$1.submit();
				}
			});

			this.quill.on('text-change', frappe.utils.debounce(function () {
				this$1.update_state();
			}, 300));
		},

		submit: function submit() {
			this.on_submit && this.on_submit(this.get_value());
		},

		update_state: function update_state() {
			var value = this.get_value();
			if (strip_html(value).trim() != "") {
				this.button.removeClass('btn-default').addClass('btn-primary');
			} else {
				this.button.addClass('btn-default').removeClass('btn-primary');
			}
		},

		get_quill_options: function get_quill_options() {
			var options = this._super();
			return Object.assign(options, {
				theme: 'bubble',
				modules: Object.assign(options.modules, {
					mention: this.get_mention_options()
				})
			});
		},

		get_mention_options: function get_mention_options() {
			if (!(this.mentions && this.mentions.length)) {
				return null;
			}

			var at_values = this.mentions.slice();

			return {
				allowedChars: /^[A-Za-z0-9_]*$/,
				mentionDenotationChars: ["@"],
				isolateCharacter: true,
				source: function (searchTerm, renderList, mentionChar) {
					var values;

					if (mentionChar === "@") {
						values = at_values;
					}

					if (searchTerm.length === 0) {
						renderList(values, searchTerm);
					} else {
						var matches = [];
						for (var i = 0; i < values.length; i++) {
							if (~values[i].value.toLowerCase().indexOf(searchTerm.toLowerCase())) {
								matches.push(values[i]);
							}
						}
						renderList(matches, searchTerm);
					}
				},
			};
		},

		get_toolbar_options: function get_toolbar_options() {
			return [
				['bold', 'italic', 'underline'],
				['blockquote', 'code-block'],
				['link', 'image'],
				[{ 'list': 'ordered' }, { 'list': 'bullet' }],
				['clean']
			];
		},

		clear: function clear() {
			this.quill.setText('');
		}
	});

	frappe.ui.form.ControlCheck = frappe.ui.form.ControlData.extend({
		input_type: "checkbox",
		make_wrapper: function() {
			this.$wrapper = $(("<div class=\"form-group frappe-control\">\n\t\t\t<div class=\"checkbox\">\n\t\t\t\t<label>\n\t\t\t\t\t<span class=\"input-area\"></span>\n\t\t\t\t\t<span class=\"disp-area\"></span>\n\t\t\t\t\t<span class=\"label-area " + (this.df.is_web_form ? "" : "small") + "\"></span>\n\t\t\t\t</label>\n\t\t\t\t<p class=\"help-box small text-muted\"></p>\n\t\t\t</div>\n\t\t</div>")).appendTo(this.parent);
		},
		set_input_areas: function() {
			this.label_area = this.label_span = this.$wrapper.find(".label-area").get(0);
			this.input_area = this.$wrapper.find(".input-area").get(0);
			this.disp_area = this.$wrapper.find(".disp-area").get(0);
		},
		make_input: function() {
			this._super();
			this.$input.removeClass("form-control");
		},
		get_input_value: function() {
			return this.input && this.input.checked ? 1 : 0;
		},
		validate: function(value) {
			return cint(value);
		},
		set_input: function(value) {
			value = cint(value);
			if(this.input) {
				this.input.checked = (value ? 1 : 0);
			}
			this.last_value = value;
			this.set_mandatory(value);
			this.set_disp_area(value);
		}
	});

	frappe.ui.form.ControlImage = frappe.ui.form.Control.extend({
		make: function() {
			this._super();
			this.$wrapper.css({"margin": "0px"});
			this.$body = $("<div></div>").appendTo(this.$wrapper)
				.css({"margin-bottom": "10px"});
			$('<div class="clearfix"></div>').appendTo(this.$wrapper);
		},
		refresh_input: function() {
			this.$body.empty();

			var doc = this.get_doc();
			if(doc && this.df.options && doc[this.df.options]) {
				this.$img = $("<img src='"+doc[this.df.options]+"' class='img-responsive'>")
					.appendTo(this.$body);
			} else {
				this.$buffer = $("<div class='missing-image'><i class='octicon octicon-circle-slash'></i></div>")
					.appendTo(this.$body);
			}
			return false;
		}
	});

	frappe.ui.form.ControlAttach = frappe.ui.form.ControlData.extend({
		make_input: function() {
			var me = this;
			this.$input = $('<button class="btn btn-default btn-sm btn-attach">')
				.html(__("Attach"))
				.prependTo(me.input_area)
				.on("click", function() {
					me.on_attach_click();
				});
			this.$value = $(
				("<div class=\"attached-file flex justify-between align-center\">\n\t\t\t\t<div class=\"ellipsis\">\n\t\t\t\t\t<i class=\"fa fa-paperclip\"></i>\n\t\t\t\t\t<a class=\"attached-file-link\" target=\"_blank\"></a>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<a class=\"btn btn-xs btn-default\" data-action=\"reload_attachment\">" + (__('Reload File')) + "</a>\n\t\t\t\t\t<a class=\"btn btn-xs btn-default\" data-action=\"clear_attachment\">" + (__('Clear')) + "</a>\n\t\t\t\t</div>\n\t\t\t</div>"))
				.prependTo(me.input_area)
				.toggle(false);
			this.input = this.$input.get(0);
			this.set_input_attributes();
			this.has_input = true;

			frappe.utils.bind_actions_with_object(this.$value, this);
			this.toggle_reload_button();
		},
		clear_attachment: function() {
			var me = this;
			if(this.frm) {
				me.parse_validate_and_set_in_model(null);
				me.refresh();
				me.frm.attachments.remove_attachment_by_filename(me.value, function() {
					me.parse_validate_and_set_in_model(null);
					me.refresh();
					me.frm.doc.docstatus == 1 ? me.frm.save('Update') : me.frm.save();
				});
			} else {
				this.dataurl = null;
				this.fileobj = null;
				this.set_input(null);
				this.parse_validate_and_set_in_model(null);
				this.refresh();
			}
		},
		reload_attachment: function reload_attachment() {
			if (this.file_uploader) {
				this.file_uploader.uploader.upload_files();
			}
		},
		on_attach_click: function on_attach_click() {
			this.set_upload_options();
			this.file_uploader = new frappe.ui.FileUploader(this.upload_options);
		},
		set_upload_options: function set_upload_options() {
			var this$1 = this;

			var options = {
				allow_multiple: false,
				on_success: function (file) {
					this$1.on_upload_complete(file);
					this$1.toggle_reload_button();
				}
			};

			if (this.frm) {
				options.doctype = this.frm.doctype;
				options.docname = this.frm.docname;
			}

			if (this.df.options) {
				Object.assign(options, this.df.options);
			}
			this.upload_options = options;
		},

		set_input: function(value, dataurl) {
			this.value = value;
			if(this.value) {
				this.$input.toggle(false);
				if(this.value.indexOf(",")!==-1) {
					var parts = this.value.split(",");
					var filename = parts[0];
					dataurl = parts[1];
				}
				this.$value.toggle(true).find(".attached-file-link")
					.html(filename || this.value)
					.attr("href", dataurl || this.value);
			} else {
				this.$input.toggle(true);
				this.$value.toggle(false);
			}
		},

		get_value: function() {
			return this.value || null;
		},

		on_upload_complete: function(attachment) {
			if(this.frm) {
				this.parse_validate_and_set_in_model(attachment.file_url);
				this.frm.attachments.update_attachment(attachment);
				this.frm.doc.docstatus == 1 ? this.frm.save('Update') : this.frm.save();
			}
			this.set_value(attachment.file_url);
		},

		toggle_reload_button: function toggle_reload_button() {
			this.$value.find('[data-action="reload_attachment"]')
				.toggle(this.file_uploader && this.file_uploader.uploader.files.length > 0);
		}
	});

	frappe.ui.form.ControlAttachImage = frappe.ui.form.ControlAttach.extend({
		make_input: function make_input() {
			var this$1 = this;

			this._super();

			var $file_link = this.$value.find('.attached-file-link');
			$file_link.popover({
				trigger: 'hover',
				placement: 'top',
				content: function () {
					return ("<div>\n\t\t\t\t\t<img src=\"" + (this$1.get_value()) + "\"\n\t\t\t\t\t\twidth=\"150px\"\n\t\t\t\t\t\tstyle=\"object-fit: contain;\"\n\t\t\t\t\t/>\n\t\t\t\t</div>");
				},
				html: true
			});
		},
		set_upload_options: function set_upload_options() {
			this._super();
			this.upload_options.restrictions = {};
			this.upload_options.restrictions.allowed_file_types = ['image/*'];
		}
	});

	class GridRowForm {
		constructor(opts) {
			$.extend(this, opts);
			this.wrapper = $('<div class="form-in-grid"></div>')
				.appendTo(this.row.wrapper);

		}
		render() {
			var me = this;
			this.make_form();
			this.form_area.empty();

			this.layout = new frappe.ui.form.Layout({
				fields: this.row.docfields,
				body: this.form_area,
				no_submit_on_enter: true,
				frm: this.row.frm,
			});
			this.layout.make();

			this.fields = this.layout.fields;
			this.fields_dict = this.layout.fields_dict;

			this.layout.refresh(this.row.doc);

			// copy get_query to fields
			for(var fieldname in (this.row.grid.fieldinfo || {})) {
				var fi = this.row.grid.fieldinfo[fieldname];
				$.extend(me.fields_dict[fieldname], fi);
			}

			this.toggle_add_delete_button_display(this.wrapper);

			this.row.grid.open_grid_row = this;

			this.set_focus();
		}
		make_form() {
			if(!this.form_area) {
				var template = "<div class=\"grid-form-heading\">\n\t\t\t\t<div class=\"toolbar grid-header-toolbar\">\n\t\t\t\t\t<span class=\"panel-title\">\n\t\t\t\t\t\t" + (__("Editing Row")) + " #<span class=\"grid-form-row-index\"></span></span>\n\t\t\t\t\t<button class=\"btn btn-default btn-xs pull-right\" style=\"margin-left: 7px;\">\n\t\t\t\t\t\t<i class=\"octicon octicon-check visible-xs\" style=\"padding-bottom: 2px;\"></i>\n\t\t\t\t\t\t<span class=\"hidden-xs octicon octicon-triangle-up\"></span></button>\n\t\t\t\t\t<span class=\"row-actions\">\n\t\t\t\t\t\t<button class=\"btn btn-default btn-xs pull-right grid-move-row hidden-xs\"\n\t\t\t\t\t\t\tstyle=\"margin-left: 7px;\">\n\t\t\t\t\t\t\t" + (__("Move")) + "</button>\n\t\t\t\t\t\t<button class=\"btn btn-default btn-xs pull-right grid-duplicate-row hidden-xs\"\n\t\t\t\t\t\t\tstyle=\"margin-left: 7px;\">\n\t\t\t\t\t\t\t" + (__("Duplicate")) + "</button>\n\t\t\t\t\t\t<button class=\"btn btn-default btn-xs pull-right grid-insert-row\"\n\t\t\t\t\t\t\tstyle=\"margin-left: 7px;\">\n\t\t\t\t\t\t\t" + (__("Insert Above")) + "</button>\n\t\t\t\t\t\t<button class=\"btn btn-default btn-xs pull-right grid-insert-row-below hidden-xs\"\n\t\t\t\t\t\t\tstyle=\"margin-left: 7px;\">\n\t\t\t\t\t\t\t" + (__("Insert Below")) + "</button>\n\t\t\t\t\t\t<button class=\"btn btn-danger btn-xs pull-right grid-delete-row\">\n\t\t\t\t\t\t\t<i class=\"octicon octicon-trashcan\"\n\t\t\t\t\t\t\t\tstyle=\"padding-bottom: 2px; margin-top: 1px;\"></i>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"grid-form-body\">\n\t\t\t\t<div class=\"form-area\"></div>\n\t\t\t\t<div class=\"grid-footer-toolbar clearfix hidden-xs\">\n\t\t\t\t\t<span class=\"text-muted\">\n\t\t\t\t\t\t<i class=\"octicon octicon-keyboard\"></i> &ndash;\n\t\t\t\t\t\t<kbd>" + (__("Ctrl + Up")) + "</kbd>, <kbd>" + (__("Ctrl + Down")) + "</kbd>, <kbd>" + (__("ESC")) + "</kbd>\n\t\t\t\t\t</span>\n\t\t\t\t\t<button class=\"btn btn-default btn-xs pull-right grid-append-row\"\n\t\t\t\t\t\tstyle=\"margin-left: 7px;\">\n\t\t\t\t\t\t" + (__("Insert Below")) + "</button>\n\t\t\t\t</div>\n\t\t\t</div>";

				$(template).appendTo(this.wrapper);
				this.form_area = this.wrapper.find(".form-area");
				this.row.set_row_index();
				this.set_form_events();
			}
		}
		set_form_events() {
			var me = this;
			this.wrapper.find(".grid-delete-row")
				.on('click', function() {
					me.row.remove(); return false;
				});
			this.wrapper.find(".grid-insert-row")
				.on('click', function() {
					me.row.insert(true); return false;
				});
			this.wrapper.find(".grid-insert-row-below")
				.on('click', function() {
					me.row.insert(true, true); return false;
				});
			this.wrapper.find(".grid-duplicate-row")
				.on('click', function() {
					me.row.insert(true, true, true); return false;
				});
			this.wrapper.find(".grid-move-row")
				.on('click', function() {
					me.row.move(); return false;
				});
			this.wrapper.find(".grid-append-row")
				.on('click', function() {
					me.row.toggle_view(false);
					me.row.grid.add_new_row(me.row.doc.idx+1, null, true);
					return false;
				});
			this.wrapper.find(".grid-form-heading, .grid-footer-toolbar").on("click", function() {
				me.row.toggle_view();
				return false;
			});
		}
		toggle_add_delete_button_display($parent) {
			$parent.find(".row-actions")
				.toggle(this.row.grid.is_editable());
		}
		refresh_field(fieldname) {
			if(this.fields_dict[fieldname]) {
				this.fields_dict[fieldname].refresh();
				this.layout && this.layout.refresh_dependency();
			}
		}
		set_focus() {
			// wait for animation and then focus on the first row
			var me = this;
			setTimeout(function() {
				if(me.row.frm && me.row.frm.doc.docstatus===0 || !me.row.frm) {
					var first = me.form_area.find("input:first");
					if(first.length && !in_list(["Date", "Datetime", "Time"], first.attr("data-fieldtype"))) {
						try {
							first.get(0).focus();
						} catch(e) {
							//
						}
					}
				}
			}, 500);
		}
	}

	class GridRow {
		constructor(opts) {
			this.on_grid_fields_dict = {};
			this.on_grid_fields = [];
			this.columns = {};
			this.columns_list = [];
			$.extend(this, opts);
			this.row_check_html = '<input type="checkbox" class="grid-row-check pull-left">';
			this.make();
		}
		make() {
			var me = this;

			this.wrapper = $('<div class="grid-row"></div>').appendTo(this.parent).data("grid_row", this);
			this.row = $('<div class="data-row row"></div>').appendTo(this.wrapper)
				.on("click", function(e) {
					if($(e.target).hasClass('grid-row-check') || $(e.target).hasClass('row-index') || $(e.target).parent().hasClass('row-index')) {
						return;
					}
					if(me.grid.allow_on_grid_editing() && me.grid.is_editable()) ; else {
						me.toggle_view();
						return false;
					}
				});

			if(this.grid.template && !this.grid.meta.editable_grid) {
				this.render_template();
			} else {
				this.render_row();
			}
			if(this.doc) {
				this.set_data();
			}
		}
		set_data() {
			this.wrapper.data({
				"doc": this.doc
			});
		}
		set_row_index() {
			if(this.doc) {
				this.wrapper
					.attr('data-name', this.doc.name)
					.attr("data-idx", this.doc.idx)
					.find(".row-index span, .grid-form-row-index").html(this.doc.idx);

			}
		}
		select(checked) {
			this.doc.__checked = checked ? 1 : 0;
		}
		refresh_check() {
			this.wrapper.find('.grid-row-check').prop('checked', this.doc ? !!this.doc.__checked : false);
			this.grid.refresh_remove_rows_button();
		}
		remove() {
			var this$1 = this;

			var me = this;
			if(this.grid.is_editable()) {
				if(this.frm) {
					if(this.get_open_form()) {
						this.hide_form();
					}

					frappe.run_serially([
						function () {
							return this$1.frm.script_manager.trigger("before_" + this$1.grid.df.fieldname + "_remove",
								this$1.doc.doctype, this$1.doc.name);
						},
						function () {
							frappe.model.clear_doc(this$1.doc.doctype, this$1.doc.name);

							this$1.frm.script_manager.trigger(this$1.grid.df.fieldname + "_remove",
								this$1.doc.doctype, this$1.doc.name);
							this$1.frm.dirty();
							this$1.grid.refresh();
						} ]).catch(function (e) {
						// aborted
						console.trace(e); // eslint-disable-line
					});
				} else {
					var data = null;
					if (this.grid.df.get_data) {
						data = this.grid.df.get_data();
					} else {
						data = this.grid.df.data;
					}

					var index = data.findIndex(function (d) { return d.name === me.doc.name; });

					if (index > -1) {
						// mutate array directly,
						// else the object reference will be lost
						data.splice(index, 1);
					}
					// remap idxs
					data.forEach(function(d, i) {
						d.idx = i+1;
					});

					this.grid.refresh();
				}
			}
		}
		insert(show, below, duplicate) {
			var idx = this.doc.idx;
			var copy_doc = duplicate ? this.doc : null;
			if(below) { idx ++; }
			this.toggle_view(false);
			this.grid.add_new_row(idx, null, show, copy_doc);
		}
		move() {
			// promopt the user where they want to move this row
			var me = this;
			frappe.prompt({
				fieldname: 'move_to',
				label: __('Move to Row Number'),
				fieldtype: 'Int',
				reqd: 1,
				default: this.doc.idx,
			}, function(values) {
				if (me.doc._sortable === false) {
					frappe.msgprint(__('Cannot move row'));
					return;
				}

				// renumber and refresh
				var data = me.grid.get_data();
				data.move(me.doc.idx - 1, values.move_to - 1);

				// renum idx
				for(var i=0; i<data.length;i++) {
					data[i].idx = i+1;
				}

				me.toggle_view(false);
				me.grid.refresh();
				$(me.frm.wrapper).trigger("grid-move-row", [me.frm, me]);
			}, __('Move To'), 'Update');
		}
		refresh() {
			if(this.frm && this.doc) {
				this.doc = locals[this.doc.doctype][this.doc.name];
			}

			if(this.grid.template && !this.grid.meta.editable_grid) {
				this.render_template();
			} else {
				this.render_row(true);
			}

			// refersh form fields
			if(this.grid_form) {
				this.grid_form.layout && this.grid_form.layout.refresh(this.doc);
			}
		}
		render_template() {
			this.set_row_index();

			if(this.row_display) {
				this.row_display.remove();
			}

			// row index
			if(this.doc) {
				if(!this.row_index) {
					this.row_index = $('<div style="float: left; margin-left: 15px; margin-top: 8px; \
					margin-right: -20px;">'+this.row_check_html+' <span></span></div>').appendTo(this.row);
				}
				this.row_index.find('span').html(this.doc.idx);
			}

			this.row_display = $('<div class="row-data sortable-handle template-row">'+
				+'</div>').appendTo(this.row)
				.html(frappe.render(this.grid.template, {
					doc: this.doc ? frappe.get_format_helper(this.doc) : null,
					frm: this.frm,
					row: this
				}));
		}
		render_row(refresh) {
			var me = this;
			this.set_row_index();

			// index (1, 2, 3 etc)
			if(!this.row_index) {
				var txt = (this.doc ? this.doc.idx : "&nbsp;");
				this.row_index = $(
					("<div class=\"row-index sortable-handle col col-xs-1\">\n\t\t\t\t\t" + (this.row_check_html) + "\n\t\t\t\t<span class=\"hidden-xs\">" + txt + "</span></div>"))
					.appendTo(this.row)
					.on('click', function(e) {
						if(!$(e.target).hasClass('grid-row-check')) {
							me.toggle_view();
						}
					});
			} else {
				this.row_index.find('span').html(txt);
			}

			this.setup_columns();
			this.add_open_form_button();
			this.refresh_check();

			if(this.frm && this.doc) {
				$(this.frm.wrapper).trigger("grid-row-render", [this]);
			}
		}

		make_editable() {
			this.row.toggleClass('editable-row', this.grid.is_editable());
		}

		is_too_small() {
			return this.row.width() ? this.row.width() < 300 : false;
		}

		add_open_form_button() {
			var me = this;
			if(this.doc && !this.grid.df.in_place_edit) {
				// remove row
				if(!this.open_form_button) {
					this.open_form_button = $('<a class="close btn-open-row">\
					<span class="octicon octicon-triangle-down"></span></a>')
						.appendTo($('<div class="col col-xs-1"></div>').appendTo(this.row))
						.on('click', function() { me.toggle_view(); return false; });

					if(this.is_too_small()) {
						// narrow
						this.open_form_button.css({'margin-right': '-2px'});
					}
				}
			}
		}

		setup_columns() {
			this.focus_set = false;
			this.grid.setup_visible_columns();

			for(var ci in this.grid.visible_columns) {
				var df = this.grid.visible_columns[ci][0],
					colsize = this.grid.visible_columns[ci][1],
					txt = this.doc ?
						frappe.format(this.doc[df.fieldname], df, null, this.doc) :
						__(df.label);

				if(this.doc && df.fieldtype === "Select") {
					txt = __(txt);
				}

				if(!this.columns[df.fieldname]) {
					var column = this.make_column(df, colsize, txt, ci);
				} else {
					var column = this.columns[df.fieldname];
					this.refresh_field(df.fieldname, txt);
				}

				// background color for cellz
				if(this.doc) {
					if(df.reqd && !txt) {
						column.addClass('error');
					}
					if (df.reqd || df.bold) {
						column.addClass('bold');
					}
				}
			}
		}

		make_column(df, colsize, txt, ci) {
			var me = this;
			var add_class = ((["Text", "Small Text"].indexOf(df.fieldtype)!==-1) ?
				" grid-overflow-no-ellipsis" : "");
			add_class += (["Int", "Currency", "Float", "Percent"].indexOf(df.fieldtype)!==-1) ?
				" text-right": "";
			add_class += (["Check"].indexOf(df.fieldtype)!==-1) ?
				" text-center": "";

			var $col = $('<div class="col grid-static-col col-xs-'+colsize+' '+add_class+'"></div>')
				.attr("data-fieldname", df.fieldname)
				.attr("data-fieldtype", df.fieldtype)
				.data("df", df)
				.appendTo(this.row)
				.on('click', function() {
					if(frappe.ui.form.editable_row===me) {
						return;
					}
					var out = me.toggle_editable_row();
					var col = this;
					setTimeout(function() {
						$(col).find('input[type="Text"]:first').focus();
					}, 500);
					return out;
				});

			$col.field_area = $('<div class="field-area"></div>').appendTo($col).toggle(false);
			$col.static_area = $('<div class="static-area ellipsis"></div>').appendTo($col).html(txt);
			$col.df = df;
			$col.column_index = ci;

			this.columns[df.fieldname] = $col;
			this.columns_list.push($col);

			return $col;
		}

		activate() {
			this.toggle_editable_row(true);
			return this;
		}

		toggle_editable_row(show) {
			var this$1 = this;

			var me = this;
			// show static for field based on
			// whether grid is editable
			if(this.grid.allow_on_grid_editing() && this.grid.is_editable() && this.doc && show !== false) {

				// disable other editable row
				if(frappe.ui.form.editable_row
					&& frappe.ui.form.editable_row !== this) {
					frappe.ui.form.editable_row.toggle_editable_row(false);
				}

				this.row.toggleClass('editable-row', true);

				// setup controls
				this.columns_list.forEach(function(column) {
					me.make_control(column);
					column.static_area.toggle(false);
					column.field_area.toggle(true);
				});

				frappe.ui.form.editable_row = this;
				return false;
			} else {
				this.row.toggleClass('editable-row', false);

				this.columns_list.forEach(function (column, index) {

					if(!this$1.frm) {
						var df = this$1.grid.visible_columns[index][0];

						var txt = this$1.doc ?
							frappe.format(this$1.doc[df.fieldname], df, null, this$1.doc) :
							__(df.label);

						this$1.refresh_field(df.fieldname, txt);
					}

					if (!column.df.hidden) {
						column.static_area.toggle(true);
					}

					column.field_area && column.field_area.toggle(false);
				});
				frappe.ui.form.editable_row = null;
			}
		}

		make_control(column) {
			if(column.field) { return; }

			var me = this,
				parent = column.field_area,
				df = column.df;

			// no text editor in grid
			if (df.fieldtype=='Text Editor') {
				df.fieldtype = 'Text';
			}

			var field = frappe.ui.form.make_control({
				df: df,
				parent: parent,
				only_input: true,
				with_link_btn: true,
				doc: this.doc,
				doctype: this.doc.doctype,
				docname: this.doc.name,
				frm: this.grid.frm,
				grid: this.grid,
				grid_row: this,
				value: this.doc[df.fieldname]
			});

			// sync get_query
			field.get_query = this.grid.get_field(df.fieldname).get_query;

			var field_on_change_function = field.df.onchange;
			field.df.onchange = function(e) {
				field_on_change_function && field_on_change_function(e);
				me.grid.grid_rows[field.doc.idx - 1].refresh_field(field.df.fieldname);
			};
			field.refresh();
			if(field.$input) {
				field.$input
					.addClass('input-sm')
					.attr('data-col-idx', column.column_index)
					.attr('placeholder', __(df.label));
				// flag list input
				if (this.columns_list && this.columns_list.slice(-1)[0]===column) {
					field.$input.attr('data-last-input', 1);
				}
			}

			this.set_arrow_keys(field);
			column.field = field;
			this.on_grid_fields_dict[df.fieldname] = field;
			this.on_grid_fields.push(field);

		}

		set_arrow_keys(field) {
			var me = this;
			if (field.$input) {
				field.$input.on('keydown', function(e) {
					var ref = frappe.ui.keyCode;
					var TAB = ref.TAB;
					var UP_ARROW = ref.UP;
					var DOWN_ARROW = ref.DOWN;
					if (!in_list([TAB, UP_ARROW, DOWN_ARROW], e.which)) {
						return;
					}

					var values = me.grid.get_data();
					var fieldname = $(this).attr('data-fieldname');
					var fieldtype = $(this).attr('data-fieldtype');

					var move_up_down = function(base) {
						if (in_list(['Text', 'Small Text', 'Code', 'Text Editor', 'HTML Editor'], fieldtype) && !e.altKey) {
							return false;
						}
						if (field.autocomplete_open) {
							return false;
						}

						base.toggle_editable_row();
						var input = base.columns[fieldname].field.$input;
						if (input) {
							input.focus();
						}
						return true;
					};

					// TAB
					if (e.which === TAB && !e.shiftKey) {
						var last_column = me.wrapper.find(':input:enabled:last').get(0);
						var is_last_column = $(this).attr('data-last-input') || last_column === this;

						if (is_last_column) {
							// last row
							if (me.doc.idx === values.length) {
								setTimeout(function () {
									me.grid.add_new_row(null, null, true);
									me.grid.grid_rows[me.grid.grid_rows.length - 1].toggle_editable_row();
									me.grid.set_focus_on_row();
								}, 100);
							} else {
								// last column before last row
								me.grid.grid_rows[me.doc.idx].toggle_editable_row();
								me.grid.set_focus_on_row(me.doc.idx);
								return false;
							}
						}
					} else if (e.which === UP_ARROW) {
						if (me.doc.idx > 1) {
							var prev = me.grid.grid_rows[me.doc.idx-2];
							if (move_up_down(prev)) {
								return false;
							}
						}
					} else if (e.which === DOWN_ARROW) {
						if (me.doc.idx < values.length) {
							var next = me.grid.grid_rows[me.doc.idx];
							if (move_up_down(next)) {
								return false;
							}
						}
					}

				});
			}
		}

		get_open_form() {
			return frappe.ui.form.get_open_grid_form();
		}

		toggle_view(show, callback) {
			if(!this.doc) {
				return this;
			}

			if(this.frm) {
				// reload doc
				this.doc = locals[this.doc.doctype][this.doc.name];
			}

			// hide other
			var open_row = this.get_open_form();

			if (show===undefined) { show = !!!open_row; }

			// call blur
			document.activeElement && document.activeElement.blur();

			if(show && open_row) {
				if(open_row==this) {
					// already open, do nothing
					callback && callback();
					return;
				} else {
					// close other views
					open_row.toggle_view(false);
				}
			}

			if(show) {
				this.show_form();
			} else {
				this.hide_form();
			}
			callback && callback();

			return this;
		}
		show_form() {
			if(!this.grid_form) {
				this.grid_form = new GridRowForm({
					row: this
				});
			}
			this.grid_form.render();
			this.row.toggle(false);
			// this.form_panel.toggle(true);
			frappe.dom.freeze("", "dark");
			if(cur_frm) { cur_frm.cur_grid = this; }
			this.wrapper.addClass("grid-row-open");
			if(!frappe.dom.is_element_in_viewport(this.wrapper)) {
				frappe.utils.scroll_to(this.wrapper, true, 15);
			}

			if(this.frm) {
				this.frm.script_manager.trigger(this.doc.parentfield + "_on_form_rendered");
				this.frm.script_manager.trigger("form_render", this.doc.doctype, this.doc.name);
			}
		}
		hide_form() {
			frappe.dom.unfreeze();
			this.row.toggle(true);
			this.refresh();
			if(cur_frm) { cur_frm.cur_grid = null; }
			this.wrapper.removeClass("grid-row-open");
		}
		open_prev() {
			if(this.grid.grid_rows[this.doc.idx-2]) {
				this.grid.grid_rows[this.doc.idx-2].toggle_view(true);
			}
		}
		open_next() {
			if(this.grid.grid_rows[this.doc.idx]) {
				this.grid.grid_rows[this.doc.idx].toggle_view(true);
			} else {
				this.grid.add_new_row(null, null, true);
			}
		}
		refresh_field(fieldname, txt) {
			var df = this.grid.get_docfield(fieldname) || undefined;

			// format values if no frm
			if(!df) {
				df = this.grid.visible_columns.find(function (col) {
					return col[0].fieldname === fieldname;
				});
				if(df && this.doc) {
					var txt = frappe.format(this.doc[fieldname], df[0],
						null, this.doc);
				}
			}

			if(txt===undefined && this.frm) {
				var txt = frappe.format(this.doc[fieldname], df,
					null, this.frm.doc);
			}

			// reset static value
			var column = this.columns[fieldname];
			if(column) {
				column.static_area.html(txt || "");
				if(df && df.reqd) {
					column.toggleClass('error', !!(txt===null || txt===''));
				}
			}

			// reset field value
			var field = this.on_grid_fields_dict[fieldname];
			if(field) {
				field.docname = this.doc.name;
				field.refresh();
			}

			// in form
			if(this.grid_form) {
				this.grid_form.refresh_field(fieldname);
			}
		}
		get_field(fieldname) {
			var field = this.on_grid_fields_dict[fieldname];
			if (field) {
				return field;
			} else if(this.grid_form) {
				return this.grid_form.fields_dict[fieldname];
			} else {
				throw ("fieldname " + fieldname + " not found");
			}
		}

		get_visible_columns(blacklist) {
			if ( blacklist === void 0 ) blacklist=[];

			var me = this;
			var visible_columns = $.map(this.docfields, function(df) {
				var visible = !df.hidden && df.in_list_view && me.grid.frm.get_perm(df.permlevel, "read")
					&& !in_list(frappe.model.layout_fields, df.fieldtype) && !in_list(blacklist, df.fieldname);

				return visible ? df : null;
			});
			return visible_columns;
		}
		set_field_property(fieldname, property, value) {

			var set_property = function(field) {
				if(!field) { return; }
				field.df[property] = value;
				field.refresh();
			};

			// set property in grid form
			if(this.grid_form) {
				set_property(this.grid_form.fields_dict[fieldname]);
				this.grid_form.layout && this.grid_form.layout.refresh_sections();
			}

			// set property in on grid fields
			set_property(this.on_grid_fields_dict[fieldname]);
		}
		toggle_reqd(fieldname, reqd) {
			this.set_field_property(fieldname, 'reqd', reqd ? 1 : 0);
		}
		toggle_display(fieldname, show) {
			this.set_field_property(fieldname, 'hidden', show ? 0 : 1);
		}
		toggle_editable(fieldname, editable) {
			this.set_field_property(fieldname, 'read_only', editable ? 0 : 1);
		}
	}

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors

	frappe.ui.form.get_open_grid_form = function() {
		return $(".grid-row-open").data("grid_row");
	};

	frappe.ui.form.close_grid_form = function() {
		var open_form = frappe.ui.form.get_open_grid_form();
		open_form && open_form.hide_form();

		// hide editable row too
		if(frappe.ui.form.editable_row) {
			frappe.ui.form.editable_row.toggle_editable_row(false);
		}
	};


	class Grid {
		constructor(opts) {
			$.extend(this, opts);
			this.fieldinfo = {};
			this.doctype = this.df.options;

			if(this.doctype) {
				this.meta = frappe.get_meta(this.doctype);
			}
			this.fields_map = {};
			this.template = null;
			this.multiple_set = false;
			if(this.frm && this.frm.meta.__form_grid_templates
				&& this.frm.meta.__form_grid_templates[this.df.fieldname]) {
				this.template = this.frm.meta.__form_grid_templates[this.df.fieldname];
			}

			this.is_grid = true;
		}

		allow_on_grid_editing() {
			if(frappe.utils.is_xs()) {
				return false;
			} else if(this.meta && this.meta.editable_grid || !this.meta) {
				return true;
			} else {
				return false;
			}
		}
		make() {
			var me = this;

			var template = "<div class=\"form-group\">\n\t\t\t<div class=\"clearfix\">\n\t\t\t\t<label class=\"control-label\" style=\"padding-right: 0px;\">" + (__(this.df.label || '')) + "</label>\n\t\t\t</div>\n\t\t\t<div class=\"form-grid\">\n\t\t\t\t<div class=\"grid-heading-row\"></div>\n\t\t\t\t<div class=\"grid-body\">\n\t\t\t\t\t<div class=\"rows\"></div>\n\t\t\t\t\t<div class=\"grid-empty text-center\">" + (__("No Data")) + "</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"small form-clickable-section grid-footer\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm-6 grid-buttons\">\n\t\t\t\t\t\t<button class=\"btn btn-xs btn-danger grid-remove-rows hidden\"\n\t\t\t\t\t\t\tstyle=\"margin-right: 4px;\">\n\t\t\t\t\t\t\t" + (__("Delete")) + "</button>\n\t\t\t\t\t\t<button class=\"grid-add-multiple-rows btn btn-xs btn-default hidden\"\n\t\t\t\t\t\t\tstyle=\"margin-right: 4px;\">\n\t\t\t\t\t\t\t" + (__("Add Multiple")) + "</a>\n\t\t\t\t\t\t<!-- hack to allow firefox include this in tabs -->\n\t\t\t\t\t\t<button class=\"btn btn-xs btn-default grid-add-row\">\n\t\t\t\t\t\t\t" + (__("Add Row")) + "</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"col-sm-6 text-right\">\n\t\t\t\t\t\t<a href=\"#\" class=\"grid-download btn btn-xs btn-default hidden\"\n\t\t\t\t\t\t\tstyle=\"margin-left: 10px;\">\n\t\t\t\t\t\t\t" + (__("Download")) + "</a>\n\t\t\t\t\t\t<a href=\"#\" class=\"grid-upload btn btn-xs btn-default hidden\"\n\t\t\t\t\t\t\tstyle=\"margin-left: 10px;\">\n\t\t\t\t\t\t\t" + (__("Upload")) + "</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>";

			this.wrapper = $(template)
				.appendTo(this.parent)
				.attr("data-fieldname", this.df.fieldname);

			this.form_grid = this.wrapper.find('.form-grid');

			this.wrapper.find(".grid-add-row").click(function() {
				me.add_new_row(null, null, true);
				me.set_focus_on_row();

				return false;
			});

			this.custom_buttons = {};
			this.grid_buttons = this.wrapper.find('.grid-buttons');
			this.remove_rows_button = this.grid_buttons.find('.grid-remove-rows');

			this.setup_allow_bulk_edit();
			this.setup_check();
			if(this.df.on_setup) {
				this.df.on_setup(this);
			}
		}

		setup_check() {
			var me = this;

			this.wrapper.on('click', '.grid-row-check', function(e) {
				var $check = $(this);
				if($check.parents('.grid-heading-row:first').length!==0) {
					// select all?
					var checked = $check.prop('checked');
					$check.parents('.form-grid:first')
						.find('.grid-row-check').prop('checked', checked);

					// set all
					(me.grid_rows || []).forEach(function(row) { row.doc.__checked = checked ? 1 : 0; });
				} else {
					var docname = $check.parents('.grid-row:first').attr('data-name');
					me.grid_rows_by_docname[docname].select($check.prop('checked'));
				}
				me.refresh_remove_rows_button();
			});

			this.remove_rows_button.on('click', function() {
				var dirty = false;

				var tasks = [];
				me.get_selected_children().forEach(function (doc) {
					tasks.push(function () {
						if (!me.frm) {
							me.df.data = me.get_data();
							me.df.data = me.df.data.filter(function (row){ return row.idx != doc.idx; });
						}
						me.grid_rows_by_docname[doc.name].remove();
						dirty = true;
					});
					tasks.push(function () { return frappe.timeout(0.1); });
				});

				if (!me.frm) {
					tasks.push(function () {
						// reorder idx of df.data
						me.df.data.forEach(function (row, index) { return row.idx = index + 1; });
					});
				}

				tasks.push(function () {
					if (dirty) { me.refresh(); }
				});

				frappe.run_serially(tasks);
			});
		}
		select_row(name) {
			this.grid_rows_by_docname[name].select();
		}
		remove_all() {
			this.grid_rows.forEach(function (row) {
				row.remove();
			});
		}
		refresh_remove_rows_button() {
			this.remove_rows_button.toggleClass('hidden',
				this.wrapper.find('.grid-body .grid-row-check:checked:first').length ? false : true);
		}
		get_selected() {
			return (this.grid_rows || []).map(function(row) { return row.doc.__checked ? row.doc.name : null; })
				.filter(function(d) { return d; });
		}
		get_selected_children() {
			return (this.grid_rows || []).map(function(row) { return row.doc.__checked ? row.doc : null; })
				.filter(function(d) { return d; });
		}
		make_head() {
			// labels
			if(!this.header_row) {
				this.header_row = new GridRow({
					parent: $(this.parent).find(".grid-heading-row"),
					parent_df: this.df,
					docfields: this.docfields,
					frm: this.frm,
					grid: this
				});
			}
		}
		refresh(force) {
			!this.wrapper && this.make();
			var me = this,
				$rows = $(me.parent).find(".rows"),
				data = this.get_data();

			this.setup_fields();

			if(this.frm) {
				this.display_status = frappe.perm.get_field_display_status(this.df, this.frm.doc,
					this.perm);
			} else {
				// not in form
				this.display_status = 'Write';
			}

			if(this.display_status === "None") { return; }

			// redraw
			var _scroll_y = $(document).scrollTop();
			this.make_head();

			if(!this.grid_rows) {
				this.grid_rows = [];
			}

			this.truncate_rows(data);
			this.grid_rows_by_docname = {};

			for(var ri=0; ri < data.length; ri++) {
				var d = data[ri];

				if(d.idx===undefined) {
					d.idx = ri + 1;
				}

				if(this.grid_rows[ri]) {
					var grid_row = this.grid_rows[ri];
					grid_row.doc = d;
					grid_row.refresh();
				} else {
					var grid_row = new GridRow({
						parent: $rows,
						parent_df: this.df,
						docfields: this.docfields,
						doc: d,
						frm: this.frm,
						grid: this
					});
					this.grid_rows.push(grid_row);
				}

				this.grid_rows_by_docname[d.name] = grid_row;
			}

			this.wrapper.find(".grid-empty").toggleClass("hidden", Boolean(data.length));

			// toolbar
			this.setup_toolbar();
			this.toggle_checkboxes(this.display_status !== 'Read');

			// sortable
			if(this.frm && this.is_sortable() && !this.sortable_setup_done) {
				this.make_sortable($rows);
				this.sortable_setup_done = true;
			}

			this.last_display_status = this.display_status;
			this.last_docname = this.frm && this.frm.docname;

			// frappe.utils.scroll_to(_scroll_y);

			// red if mandatory
			this.form_grid.toggleClass('error', !!(this.df.reqd && !(data && data.length)));

			this.refresh_remove_rows_button();

			this.wrapper.trigger('change');
		}
		setup_toolbar() {
			if(this.is_editable()) {
				this.wrapper.find(".grid-footer").toggle(true);

				// show, hide buttons to add rows
				if(this.cannot_add_rows || (this.df && this.df.cannot_add_rows)) {
					// add 'hidden' to buttons
					this.wrapper.find(".grid-add-row, .grid-add-multiple-rows")
						.addClass('hidden');
				} else {
					// show buttons
					this.wrapper.find(".grid-add-row").removeClass('hidden');

					if(this.multiple_set) {
						this.wrapper.find(".grid-add-multiple-rows").removeClass('hidden');
					}
				}

			} else {
				this.wrapper.find(".grid-footer").toggle(false);
			}

		}
		truncate_rows(data) {
			if(this.grid_rows.length > data.length) {
				// remove extra rows
				for(var i=data.length; i < this.grid_rows.length; i++) {
					var grid_row = this.grid_rows[i];
					grid_row.wrapper.remove();
				}
				this.grid_rows.splice(data.length);
			}
		}
		setup_fields() {
			var me = this;
			// reset docfield
			if (this.frm && this.frm.docname) {
				// use doc specific docfield object
				this.df = frappe.meta.get_docfield(this.frm.doctype, this.df.fieldname,
					this.frm.docname);
			} else {
				// use non-doc specific docfield
				if(this.df.options) {
					this.df = frappe.meta.get_docfield(this.df.options, this.df.fieldname) || this.df || null;
				}
			}

			if(this.doctype && this.frm) {
				this.docfields = frappe.meta.get_docfields(this.doctype, this.frm.docname);
			} else {
				// fields given in docfield
				this.docfields = this.df.fields;
			}

			this.docfields.forEach(function(df) {
				me.fields_map[df.fieldname] = df;
			});
		}
		refresh_row(docname) {
			this.grid_rows_by_docname[docname] &&
				this.grid_rows_by_docname[docname].refresh();
		}
		make_sortable($rows) {
			var this$1 = this;

			new Sortable($rows.get(0), {
				group: {name: this.df.fieldname},
				handle: '.sortable-handle',
				draggable: '.grid-row',
				animation: 100,
				filter: 'li, a',
				onMove: function (event) {
					// don't move if editable
					if (!this$1.is_editable()) {
						return false;
					}
					// prevent drag behaviour if _sortable property is "false"
					var idx = $(event.dragged).closest('.grid-row').attr('data-idx');
					var doc = this$1.get_data()[idx - 1];
					if (doc && doc._sortable === false) {
						return false;
					}
				},
				onUpdate: function (event) {
					var idx = $(event.item).closest('.grid-row').attr('data-idx');
					var doc = this$1.get_data()[idx - 1];
					this$1.renumber_based_on_dom();
					this$1.frm.script_manager.trigger(this$1.df.fieldname + "_move", this$1.df.options, doc.name);
					this$1.refresh();
					this$1.frm.dirty();
				}
			});

			$(this.frm.wrapper).trigger("grid-make-sortable", [this.frm]);
		}
		get_data() {
			var data = this.frm ?
				this.frm.doc[this.df.fieldname] || []
				: this.df.data || this.get_modal_data();
			data.sort(function(a, b) { return a.idx - b.idx});
			return data;
		}
		get_modal_data() {
			var this$1 = this;

			return this.df.get_data ? this.df.get_data().filter(function (data) {
				if (!this$1.deleted_docs || !in_list(this$1.deleted_docs, data.name)) {
					return data;
				}
			}) : [];
		}
		set_column_disp(fieldname, show) {
			if($.isArray(fieldname)) {
				var me = this;
				for(var i=0, l=fieldname.length; i<l; i++) {
					var fname = fieldname[i];
					me.get_docfield(fname).hidden = show ? 0 : 1;
					this.set_editable_grid_column_disp(fname, show);
				}
			} else {
				this.get_docfield(fieldname).hidden = show ? 0 : 1;
				this.set_editable_grid_column_disp(fieldname, show);
			}

			this.refresh(true);
		}
		set_editable_grid_column_disp(fieldname, show) {
			//Hide columns for editable grids
			if (this.meta.editable_grid && this.grid_rows) {
				this.grid_rows.forEach(function(row) {
					row.columns_list.forEach(function(column) {
						//Hide the column specified
						if (column.df.fieldname == fieldname) {
							if (show) {
								column.df.hidden = false;

								//Show the static area and hide field area if it is not the editable row
								if  (row != frappe.ui.form.editable_row) {
									column.static_area.show();
									column.field_area && column.field_area.toggle(false);
								}
								//Hide the static area and show field area if it is the editable row
								else {
									column.static_area.hide();
									column.field_area && column.field_area.toggle(true);

									//Format the editable column appropriately if it is now visible
									if (column.field) {
										column.field.refresh();
										if (column.field.$input) { column.field.$input.toggleClass('input-sm', true); }
									}
								}
							}
							else {
								column.df.hidden = true;
								column.static_area.hide();
							}
						}
					});
				});
			}

			this.refresh();
		}
		toggle_reqd(fieldname, reqd) {
			this.get_docfield(fieldname).reqd = reqd;
			this.refresh();
		}
		toggle_enable(fieldname, enable) {
			this.get_docfield(fieldname).read_only = enable ? 0 : 1;
			this.refresh();
		}
		toggle_display(fieldname, show) {
			this.get_docfield(fieldname).hidden = show ? 0 : 1;
			this.refresh();
		}
		toggle_checkboxes(enable) {
			this.wrapper.find(".grid-row-check").prop('disabled', !enable);
		}
		get_docfield(fieldname) {
			return frappe.meta.get_docfield(this.doctype, fieldname, this.frm ? this.frm.docname : null);
		}
		get_row(key) {
			if(typeof key == 'number') {
				if(key < 0) {
					return this.grid_rows[this.grid_rows.length + key];
				} else {
					return this.grid_rows[key];
				}
			} else {
				return this.grid_rows_by_docname[key];
			}
		}
		get_grid_row(key) {
			return this.get_row(key);
		}
		get_field(fieldname) {
			// Note: workaround for get_query
			if(!this.fieldinfo[fieldname])
				{ this.fieldinfo[fieldname] = {
				}; }
			return this.fieldinfo[fieldname];
		}
		set_value(fieldname, value, doc) {
			if(this.display_status!=="None" && this.grid_rows_by_docname[doc.name]) {
				this.grid_rows_by_docname[doc.name].refresh_field(fieldname, value);
			}
		}
		add_new_row(idx, callback, show, copy_doc) {
			if(this.is_editable()) {
				if(this.frm) {
					var d = frappe.model.add_child(this.frm.doc, this.df.options, this.df.fieldname, idx);
					if(copy_doc) {
						d = this.duplicate_row(d, copy_doc);
					}
					d.__unedited = true;
					this.frm.script_manager.trigger(this.df.fieldname + "_add", d.doctype, d.name);
					this.refresh();
				} else {
					if (!this.df.data) {
						this.df.data = this.get_data() || [];
					}
					this.df.data.push({idx: this.df.data.length+1, __islocal: true});
					this.refresh();
				}

				if(show) {
					if(idx) {
						// always open inserted rows
						this.wrapper.find("[data-idx='"+idx+"']").data("grid_row")
							.toggle_view(true, callback);
					} else {
						if(!this.allow_on_grid_editing()) {
							// open last row only if on-grid-editing is disabled
							this.wrapper.find(".grid-row:last").data("grid_row")
								.toggle_view(true, callback);
						}
					}
				}

				return d;
			}
		}

		renumber_based_on_dom() {
			// renumber based on dom
			var me = this;
			var $rows = $(me.parent).find(".rows");

			me.grid_rows = [];
			me.frm.doc[me.df.fieldname] = [];

			$rows.find(".grid-row").each(function(i, item) {

				var $item = $(item);
				var d = locals[me.doctype][$item.attr('data-name')];
				d.idx = i + 1;
				$item.attr('data-idx', d.idx);

				me.frm.doc[me.df.fieldname].push(d);
				me.grid_rows.push(me.grid_rows_by_docname[d.name]);
			});
		}

		duplicate_row(d, copy_doc) {
			$.each(copy_doc, function(key, value) {
				if(!["creation", "modified", "modified_by", "idx", "owner",
					"parent", "doctype", "name", "parentield"].includes(key)) {
					d[key] = value;
				}
			});

			return d;
		}

		set_focus_on_row(idx) {
			var me = this;
			if(!idx) {
				idx = me.grid_rows.length - 1;
			}
			setTimeout(function() {
				me.grid_rows[idx].row
					.find('input[type="Text"],textarea,select').filter(':visible:first').focus();
			}, 100);
		}

		setup_visible_columns() {
			if (this.visible_columns) { return; }

			var total_colsize = 1,
				fields = this.editable_fields || this.docfields;

			this.visible_columns = [];

			for(var ci in fields) {
				var _df = fields[ci];

				// get docfield if from fieldname
				df = this.fields_map[_df.fieldname];

				if(!df.hidden
					&& (this.editable_fields || df.in_list_view)
					&& (this.frm && this.frm.get_perm(df.permlevel, "read") || !this.frm)
					&& !in_list(frappe.model.layout_fields, df.fieldtype)) {

					if(df.columns) {
						df.colsize=df.columns;
					}
					else {
						var colsize = 2;
						switch (df.fieldtype) {
							case "Text": break;
							case "Small Text": colsize = 3; break;
							case "Check": colsize = 1;
						}
						df.colsize = colsize;
					}

					// attach formatter on refresh
					if (df.fieldtype == 'Link' && !df.formatter && df.parent && frappe.meta.docfield_map[df.parent]) {
						var docfield = frappe.meta.docfield_map[df.parent][df.fieldname];
						if (docfield && docfield.formatter) {
							df.formatter = docfield.formatter;
						}
					}

					total_colsize += df.colsize;
					if(total_colsize > 11)
						{ return false; }
					this.visible_columns.push([df, df.colsize]);
				}
			}

			// redistribute if total-col size is less than 12
			var passes = 0;
			while(total_colsize < 11 && passes < 12) {
				for(var i in this.visible_columns) {
					var df = this.visible_columns[i][0];
					var colsize = this.visible_columns[i][1];
					if(colsize > 1 && colsize < 11
						&& !in_list(frappe.model.std_fields_list, df.fieldname)) {

						if (passes < 3 && ["Int", "Currency", "Float", "Check", "Percent"].indexOf(df.fieldtype)!==-1) {
							// don't increase col size of these fields in first 3 passes
							continue;
						}

						this.visible_columns[i][1] += 1;
						total_colsize++;
					}

					if(total_colsize > 10)
						{ break; }
				}
				passes++;
			}
		}


		is_editable() {
			return this.display_status=="Write" && !this.static_rows;
		}
		is_sortable() {
			return this.sortable_status || this.is_editable();
		}
		only_sortable(status) {
			if(status===undefined ? true : status) {
				this.sortable_status = true;
				this.static_rows = true;
			}
		}
		set_multiple_add(link, qty) {
			if(this.multiple_set) { return; }
			var me = this;
			var link_field = frappe.meta.get_docfield(this.df.options, link);
			var btn = $(this.wrapper).find(".grid-add-multiple-rows");

			// show button
			btn.removeClass('hidden');

			// open link selector on click
			btn.on("click", function() {
				new frappe.ui.form.LinkSelector({
					doctype: link_field.options,
					fieldname: link,
					qty_fieldname: qty,
					target: me,
					txt: ""
				});
				return false;
			});
			this.multiple_set = true;
		}
		setup_allow_bulk_edit() {
			var me = this;
			if(this.frm && this.frm.get_docfield(this.df.fieldname).allow_bulk_edit) {
				// download
				me.setup_download();

				// upload
				frappe.flags.no_socketio = true;
				$(this.wrapper).find(".grid-upload").removeClass('hidden').on("click", function() {
					new frappe.ui.FileUploader({
						as_dataurl: true,
						allow_multiple: false,
						on_success: function on_success(file) {
							var data = frappe.utils.csv_to_array(frappe.utils.get_decoded_string(file.dataurl));
							// row #2 contains fieldnames;
							var fieldnames = data[2];

							me.frm.clear_table(me.df.fieldname);
							$.each(data, function(i, row) {
								if(i > 6) {
									var blank_row = true;
									$.each(row, function(ci, value) {
										if(value) {
											blank_row = false;
											return false;
										}
									});

									if(!blank_row) {
										var d = me.frm.add_child(me.df.fieldname);
										$.each(row, function(ci, value) {
											var fieldname = fieldnames[ci];
											var df = frappe.meta.get_docfield(me.df.options, fieldname);

											// convert date formatting
											if(df.fieldtype==="Date" && value) {
												value = frappe.datetime.user_to_str(value);
											}

											if(df.fieldtype==="Int" || df.fieldtype==="Check") {
												value = cint(value);
											}

											d[fieldnames[ci]] = value;
										});
									}
								}
							});

							me.frm.refresh_field(me.df.fieldname);
							frappe.msgprint({message:__('Table updated'), title:__('Success'), indicator:'green'});
						}
					});
					return false;
				});
			}
		}
		setup_download() {
			var me = this;
			var title = me.df.label || frappe.model.unscrub(me.df.fieldname);
			$(this.wrapper).find(".grid-download").removeClass('hidden').on("click", function() {
				var data = [];
				var docfields = [];
				data.push([__("Bulk Edit {0}", [title])]);
				data.push([]);
				data.push([]);
				data.push([]);
				data.push([__("The CSV format is case sensitive")]);
				data.push([__("Do not edit headers which are preset in the template")]);
				data.push(["------"]);
				$.each(frappe.get_meta(me.df.options).fields, function(i, df) {
					// don't include the read-only field in the template
					if(frappe.model.is_value_type(df.fieldtype)) {
						data[1].push(df.label);
						data[2].push(df.fieldname);
						var description = (df.description || "") + ' ';
						if (df.fieldtype === "Date") {
							description += frappe.boot.sysdefaults.date_format;
						}
						data[3].push(description);
						docfields.push(df);
					}
				});

				// add data
				$.each(me.frm.doc[me.df.fieldname] || [], function(i, d) {
					var row = [];
					$.each(data[2], function(i, fieldname) {
						var value = d[fieldname];

						// format date
						if(docfields[i].fieldtype==="Date" && value) {
							value = frappe.datetime.str_to_user(value);
						}

						row.push(value || "");
					});
					data.push(row);
				});

				frappe.tools.downloadify(data, null, title);
				return false;
			});
		}
		add_custom_button(label, click) {
			// add / unhide a custom button
			var btn = this.custom_buttons[label];
			if(!btn) {
				btn = $('<button class="btn btn-default btn-xs btn-custom">' + label + '</button>')
					.css('margin-right', '4px')
					.prependTo(this.grid_buttons)
					.on('click', click);
				this.custom_buttons[label] = btn;
			} else {
				btn.removeClass('hidden');
			}
		}
		clear_custom_buttons() {
			// hide all custom buttons
			this.grid_buttons.find('.btn-custom').addClass('hidden');
		}
	}

	frappe.ui.form.ControlTable = frappe.ui.form.Control.extend({
		make: function() {
			this._super();

			// add title if prev field is not column / section heading or html
			this.grid = new Grid({
				frm: this.frm,
				df: this.df,
				perm: this.perm || (this.frm && this.frm.perm) || this.df.perm,
				parent: this.wrapper
			});
			if(this.frm) {
				this.frm.grids[this.frm.grids.length] = this;
			}

			// description
			if(this.df.description) {
				$('<p class="text-muted small">' + __(this.df.description) + '</p>')
					.appendTo(this.wrapper);
			}
			this.$wrapper.on('paste',':text', function(e) {
				var cur_table_field =$(e.target).closest('div [data-fieldtype="Table"]').data('fieldname');
				var cur_field = $(e.target).data('fieldname');
				var cur_grid= cur_frm.get_field(cur_table_field).grid;
				var cur_grid_rows = cur_grid.grid_rows;
				var cur_doctype = cur_grid.doctype;
				var cur_row_docname =$(e.target).closest('div .grid-row').data('name');
				var row_idx = locals[cur_doctype][cur_row_docname].idx;
				var clipboardData, pastedData;
				// Get pasted data via clipboard API
				clipboardData = e.clipboardData || window.clipboardData || e.originalEvent.clipboardData;
				pastedData = clipboardData.getData('Text');
				if (!pastedData) { return; }
				var data = frappe.utils.csv_to_array(pastedData,'\t');
				if (data.length === 1 & data[0].length === 1) { return; }
				if (data.length > 100){
					data = data.slice(0, 100);
					frappe.msgprint(__('For performance, only the first 100 rows were processed.'));
				}
				var fieldnames = [];
				var get_field = function(name_or_label){
					var fieldname;
					$.each(cur_grid.meta.fields,function (ci,field){
						name_or_label = name_or_label.toLowerCase();
						if (field.fieldname.toLowerCase() === name_or_label ||
							(field.label && field.label.toLowerCase() === name_or_label)){
							  fieldname = field.fieldname;
							  return false;
							}
					});
					return fieldname;
				};
				if (get_field(data[0][0])){ // for raw data with column header
					$.each(data[0], function (ci, column){fieldnames.push(get_field(column));});
					data.shift();
				}
				else{ // no column header, map to the existing visible columns
					var visible_columns = cur_grid_rows[0].get_visible_columns();
					var find;
					$.each(visible_columns, function (ci, column){
						if (column.fieldname === cur_field) { find = true; }
						find && fieldnames.push(column.fieldname);
					});
				}
				$.each(data, function(i, row) {
					var blank_row = true;
					$.each(row, function(ci, value) {
						if(value) {
							blank_row = false;
							return false;
						}
					});
					if(!blank_row) {
						if (row_idx > cur_frm.doc[cur_table_field].length){
							cur_grid.add_new_row();
						}
						var cur_row = cur_grid_rows[row_idx - 1];
						row_idx ++;
						var row_name = cur_row.doc.name;
						$.each(row, function(ci, value) {
							if (fieldnames[ci]) { frappe.model.set_value(cur_doctype, row_name, fieldnames[ci], value); }
						});
						frappe.show_progress(__('Processing'), i, data.length);
					}
				});
				frappe.hide_progress();
				return false; // Prevent the default handler from running.
			});
		},
		refresh_input: function() {
			this.grid.refresh();
		},
		get_value: function() {
			if(this.grid) {
				return this.grid.get_data();
			}
		},
		set_input: function( ) {
			//
		},
		validate: function() {
			return this.get_value();
		},
		check_all_rows: function check_all_rows() {
			this.$wrapper.find('.grid-row-check')[0].click();
		}
	});

	frappe.ui.form.ControlColor = frappe.ui.form.ControlData.extend({
		make_input: function () {
			this._super();
			this.colors = [
				"#ffc4c4", "#ff8989", "#ff4d4d", "#a83333",
				"#ffe8cd", "#ffd19c", "#ffb868", "#a87945",
				"#ffd2c2", "#ffa685", "#ff7846", "#a85b5b",
				"#ffd7d7", "#ffb1b1", "#ff8989", "#a84f2e",
				"#fffacd", "#fff168", "#fff69c", "#a89f45",
				"#ebf8cc", "#d9f399", "#c5ec63", "#7b933d",
				"#cef6d1", "#9deca2", "#6be273", "#428b46",
				"#d2f8ed", "#a4f3dd", "#77ecca", "#49937e",
				"#d2f1ff", "#a6e4ff", "#78d6ff", "#4f8ea8",
				"#d2d2ff", "#a3a3ff", "#7575ff", "#4d4da8",
				"#dac7ff", "#b592ff", "#8e58ff", "#5e3aa8",
				"#f8d4f8", "#f3aaf0", "#ec7dea", "#934f92"
			];
			this.make_color_input();
		},
		make_color_input: function () {
			this.$wrapper
				.find('.control-input-wrapper')
				.append("<div class=\"color-picker\">\n\t\t\t\t<div class=\"color-picker-pallete\"></div>\n\t\t\t</div>");
			this.$color_pallete = this.$wrapper.find('.color-picker-pallete');

			var color_html = this.colors.map(this.get_color_box).join("");
			this.$color_pallete.append(color_html);
			this.$color_pallete.hide();
			this.bind_events();
		},
		get_color_box: function (hex) {
			return ("<div class=\"color-box\" data-color=\"" + hex + "\" style=\"background-color: " + hex + "\"></div>");
		},
		set_formatted_input: function(value) {
			this._super(value);

			if (!value) { value = '#FFFFFF'; }
			var contrast    = frappe.ui.color.get_contrast_color(value);

			this.$input.css({
				"background-color": value, "color": contrast
			});
		},
		bind_events: function () {
			var this$1 = this;

			var mousedown_happened = false;
			this.$wrapper.on("click", ".color-box", function (e) {
				mousedown_happened = false;

				var color_val = $(e.target).data("color");
				this$1.set_value(color_val);
				// set focus so that we can blur it later
				this$1.set_focus();
			});

			this.$wrapper.find(".color-box").mousedown(function () {
				mousedown_happened = true;
			});

			this.$input.on("focus", function () {
				this$1.$color_pallete.show();
			});
			this.$input.on("blur", function () {
				if (mousedown_happened) {
					// cancel the blur event
					mousedown_happened = false;
				} else {
					// blur event is okay
					$(this$1.$color_pallete).hide();
				}
			});
		},
		validate: function (value) {
			if(value === '') {
				return '';
			}
			var is_valid = /^#[0-9A-F]{6}$/i.test(value);
			if(is_valid) {
				return value;
			}
			return null;
		}
	});

	frappe.ui.form.ControlSignature = frappe.ui.form.ControlData.extend({
		saving: false,
		loading: false,
		make: function() {
			var this$1 = this;

			var me = this;
			this._super();

			// make jSignature field
			this.body = $('<div class="signature-field"></div>').appendTo(me.wrapper);

			if (this.body.is(':visible')) {
				this.make_pad();
			} else {
				$(document).on('frappe.ui.Dialog:shown', function () {
					this$1.make_pad();
				});
			}

			this.img_wrapper = $("<div class=\"signature-display\">\n\t\t\t<div class=\"missing-image attach-missing-image\">\n\t\t\t\t<i class=\"octicon octicon-circle-slash\"></i>\n\t\t\t</div></div>")
				.appendTo(this.wrapper);
			this.img = $("<img class='img-responsive attach-image-display'>")
				.appendTo(this.img_wrapper).toggle(false);

		},
		make_pad: function() {
			var this$1 = this;

			var width = this.body.width();
			if (width > 0 && !this.$pad) {
				this.$pad = this.body.jSignature({
					height: 300,
					width: this.body.width(),
					lineWidth: 3
				}).on('change',
					this.on_save_sign.bind(this));
				this.load_pad();
				this.$reset_button_wrapper = $("<div class=\"signature-btn-row\">\n\t\t\t\t<a href=\"#\" type=\"button\" class=\"signature-reset btn btn-default\">\n\t\t\t\t<i class=\"glyphicon glyphicon-repeat\"></i></a>")
					.appendTo(this.$pad)
					.on("click", '.signature-reset', function () {
						this$1.on_reset_sign();
						return false;
					});

			}
		},
		refresh_input: function(e) {
			// prevent to load the second time
			this.make_pad();
			this.$wrapper.find(".control-input").toggle(false);
			this.set_editable(this.get_status()=="Write");
			this.load_pad();
			if(this.get_status()=="Read") {
				$(this.disp_area).toggle(false);
			}
		},
		set_image: function(value) {
			if(value) {
				$(this.img_wrapper).find(".missing-image").toggle(false);
				this.img.attr("src", value).toggle(true);
			} else {
				$(this.img_wrapper).find(".missing-image").toggle(true);
				this.img.toggle(false);
			}
		},
		load_pad: function() {
			// make sure not triggered during saving
			if (this.saving) { return; }
			// get value
			var value = this.get_value();
			// import data for pad
			if (this.$pad) {
				this.loading = true;
				// reset in all cases
				this.$pad.jSignature('reset');
				if (value) {
					// load the image to find out the size, because scaling will affect
					// stroke width
					try {
						this.$pad.jSignature('setData', value);
						this.set_image(value);
					}
					catch (e){
						console.log("Cannot set data for signature", value, e);
					}
				}

				this.loading = false;
			}
		},
		set_editable: function(editable) {
			this.$pad && this.$pad.toggle(editable);
			this.img_wrapper.toggle(!editable);
			if (this.$reset_button_wrapper) {
				this.$reset_button_wrapper.toggle(editable);
				if (editable) {
					this.$reset_button_wrapper.addClass('editing');
				}
				else {
					this.$reset_button_wrapper.removeClass('editing');
				}
			}
		},
		set_my_value: function(value) {
			if (this.saving || this.loading) { return; }
			this.saving = true;
			this.set_value(value);
			this.saving = false;
		},
		get_value: function() {
			return this.value ? this.value: this.get_model_value();
		},
		// reset signature canvas
		on_reset_sign: function() {
			this.$pad.jSignature("reset");
			this.set_my_value("");
		},
		// save signature value to model and display
		on_save_sign: function() {
			if (this.saving || this.loading) { return; }
			var base64_img = this.$pad.jSignature("getData");
			this.set_my_value(base64_img);
			this.set_image(this.get_value());
		}
	});

	frappe.ui.form.ControlPassword = frappe.ui.form.ControlData.extend({
		input_type: "password",
		make: function() {
			this._super();
		},
		make_input: function() {
			var this$1 = this;

			var me = this;
			this._super();
			this.$input.parent().append($('<span class="password-strength-indicator indicator"></span>'));
			this.$wrapper.find('.control-input-wrapper').append($('<p class="password-strength-message text-muted small hidden"></p>'));

			this.indicator = this.$wrapper.find('.password-strength-indicator');
			this.message = this.$wrapper.find('.help-box');

			this.$input.on('keyup', function () {
				clearTimeout(this$1.check_password_timeout);
				this$1.check_password_timeout = setTimeout (function () {
					me.get_password_strength(me.$input.val());
				}, 500);
			});
		},
		get_password_strength: function(value) {
			var me = this;
			frappe.call({
				type: 'POST',
				method: 'frappe.core.doctype.user.user.test_password_strength',
				args: {
					new_password: value || ''
				},
				callback: function(r) {
					if (r.message && r.message.entropy) {
						var score = r.message.score,
							feedback = r.message.feedback;

						feedback.crack_time_display = r.message.crack_time_display;

						var indicators = ['grey', 'red', 'orange', 'yellow', 'green'];
						me.set_strength_indicator(indicators[score]);

					}
				}

			});
		},
		set_strength_indicator: function(color) {
			var message = __("Include symbols, numbers and capital letters in the password");
			this.indicator.removeClass().addClass('password-strength-indicator indicator ' + color);
			this.message.html(message).removeClass('hidden');
		}
	});

	frappe.ui.form.ControlReadOnly = frappe.ui.form.ControlData.extend({
		get_status: function(explain) {
			var status = this._super(explain);
			if(status==="Write")
				{ status = "Read"; }
			return;
		},
	});

	frappe.ui.form.ControlButton = frappe.ui.form.ControlData.extend({
		can_write: function can_write() {
			// should be always true in case of button
			return true;
		},
		make_input: function() {
			var me = this;
			this.$input = $('<button class="btn btn-default btn-xs">')
				.prependTo(me.input_area)
				.on("click", function() {
					me.onclick();
				});
			this.input = this.$input.get(0);
			this.set_input_attributes();
			this.has_input = true;
			this.toggle_label(false);
		},
		onclick: function() {
			if(this.frm && this.frm.doc) {
				if(this.frm.script_manager.has_handlers(this.df.fieldname, this.doctype)) {
					this.frm.script_manager.trigger(this.df.fieldname, this.doctype, this.docname);
				} else {
					if (this.df.options) {
						this.run_server_script();
					}
				}
			}
			else if(this.df.click) {
				this.df.click();
			}
		},
		run_server_script: function() {
			// DEPRECATE
			var me = this;
			if(this.frm && this.frm.docname) {
				frappe.call({
					method: "runserverobj",
					args: {'docs': this.frm.doc, 'method': this.df.options },
					btn: this.$input,
					callback: function(r) {
						if(!r.exc) {
							me.frm.refresh_fields();
						}
					}
				});
			}
		},
		hide: function hide() {
			this.$input.hide();
		},
		set_input_areas: function() {
			this._super();
			$(this.disp_area).removeClass().addClass("hide");
		},
		set_empty_description: function() {
			this.$wrapper.find(".help-box").empty().toggle(false);
		},
		set_label: function() {
			$(this.label_span).html("&nbsp;");
			this.$input && this.$input.html((this.df.icon ?
				('<i class="'+this.df.icon+' fa-fw"></i> ') : "") + __(this.df.label));
		}
	});

	frappe.ui.form.ControlHTML = frappe.ui.form.Control.extend({
		make: function() {
			this._super();
			this.disp_area = this.wrapper;
		},
		refresh_input: function() {
			var content = this.get_content();
			if(content) { this.$wrapper.html(content); }
		},
		get_content: function() {
			var content = this.df.options || "";
			try {
				return frappe.render(content, this);
			} catch (e) {
				return content;
			}
		},
		html: function(html) {
			this.$wrapper.html(html || this.get_content());
		},
		set_value: function(html) {
			if(html.appendTo) {
				// jquery object
				html.appendTo(this.$wrapper.empty());
			} else {
				// html
				this.df.options = html;
				this.html(html);
			}
		}
	});

	frappe.ui.form.ControlMarkdownEditor = frappe.ui.form.ControlCode.extend({
		editor_class: 'markdown',
		make_ace_editor: function make_ace_editor() {
			var this$1 = this;

			this._super();

			this.ace_editor_target.wrap(("<div class=\"" + (this.editor_class) + "-container\">"));
			this.markdown_container = this.$input_wrapper.find(("." + (this.editor_class) + "-container"));

			this.showing_preview = false;
			this.preview_toggle_btn = $(("<button class=\"btn btn-default btn-xs " + (this.editor_class) + "-toggle\">" + (__('Preview')) + "</button>"))
				.click(function (e) {
					if (!this$1.showing_preview) {
						this$1.update_preview();
					}

					var $btn = $(e.target);
					this$1.markdown_preview.toggle(!this$1.showing_preview);
					this$1.ace_editor_target.toggle(this$1.showing_preview);

					this$1.showing_preview = !this$1.showing_preview;

					$btn.text(this$1.showing_preview ? __('Edit') : __('Preview'));
				});
			this.markdown_container.prepend(this.preview_toggle_btn);

			this.markdown_preview = $(("<div class=\"" + (this.editor_class) + "-preview border rounded\">")).hide();
			this.markdown_container.append(this.markdown_preview);
		},

		set_language: function set_language() {
			this.df.options = 'Markdown';
			this._super();
		},

		update_preview: function update_preview() {
			var value = this.get_value() || "";
			this.markdown_preview.html(frappe.markdown(value));
		},

		set_formatted_input: function set_formatted_input(value) {
			var this$1 = this;

			this._super(value)
				.then(function () {
					this$1.update_preview();
				});
		}
	});

	frappe.ui.form.ControlHTMLEditor = frappe.ui.form.ControlMarkdownEditor.extend({
		editor_class: 'html',
		set_language: function set_language() {
			this.df.options = 'HTML';
			this._super();
		},
		update_preview: function update_preview() {
			if (!this.markdown_preview) { return; }
			var value = this.get_value() || '';
			value = frappe.dom.remove_script_and_style(value);
			this.markdown_preview.html(value);
		}
	});

	frappe.ui.form.ControlHeading = frappe.ui.form.ControlHTML.extend({
		get_content: function() {
			return "<h4>" + __(this.df.label) + "</h4>";
		}
	});

	frappe.ui.form.ControlAutocomplete = frappe.ui.form.ControlData.extend({
		make_input: function make_input() {
			this._super();
			this.setup_awesomplete();
			this.set_options();
		},

		set_options: function set_options() {
			if (this.df.options) {
				var options = this.df.options || [];
				this._data = this.parse_options(options);
			}
		},

		get_awesomplete_settings: function get_awesomplete_settings() {
			var me = this;
			return {
				minChars: 0,
				maxItems: this.df.max_items || 99,
				autoFirst: true,
				list: this.get_data(),
				data: function(item) {
					if (!(item instanceof Object)) {
						var d = { value: item };
						item = d;
					}

					return {
						label: item.label || item.value,
						value: item.value
					};
				},
				filter: function(item, input) {
					var hay = item.label + item.value;
					return awesomplete.FILTER_CONTAINS(hay, input);
				},
				item: function(item) {
					var d = this.get_item(item.value);
					if (!d) {
						d = item;
					}

					if (!d.label) {
						d.label = d.value;
					}

					var _label = me.translate_values ? __(d.label) : d.label;
					var html = '<strong>' + _label + '</strong>';
					if (d.description) {
						html += '<br><span class="small">' + __(d.description) + '</span>';
					}

					return $('<li></li>')
						.data('item.autocomplete', d)
						.prop('aria-selected', 'false')
						.html('<a><p>' + html + '</p></a>')
						.get(0);
				},
				sort: function () {
					return 0;
				}
			};
		},

		setup_awesomplete: function setup_awesomplete() {
			var this$1 = this;

			this.awesomplete = new awesomplete(
				this.input,
				this.get_awesomplete_settings()
			);

			$(this.input_area)
				.find('.awesomplete ul')
				.css('min-width', '100%');

			this.$input.on(
				'input',
				frappe.utils.debounce(function () {
					this$1.awesomplete.list = this$1.get_data();
				}, 500)
			);

			this.$input.on('focus', function () {
				if (!this$1.$input.val()) {
					this$1.$input.val('');
					this$1.$input.trigger('input');
				}
			});

			this.$input.on('awesomplete-selectcomplete', function () {
				this$1.$input.trigger('change');
			});
		},

		validate: function validate(value) {
			if (this.df.ignore_validation) {
				return value || '';
			}
			var valid_values = this.awesomplete._list.map(function (d) { return d.value; });
			if (!valid_values.length) {
				return value;
			}
			if (valid_values.includes(value)) {
				return value;
			} else {
				return '';
			}
		},

		parse_options: function parse_options(options) {
			if (typeof options === 'string') {
				options = options.split('\n');
			}
			if (typeof options[0] === 'string') {
				options = options.map(function (o) { return ({ label: o, value: o }); });
			}
			return options;
		},

		get_data: function get_data() {
			return this._data || [];
		},

		set_data: function set_data(data) {
			data = this.parse_options(data);
			if (this.awesomplete) {
				this.awesomplete.list = data;
			}
			this._data = data;
		}
	});

	var Barcode_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Barcode = function Barcode(data, options) {
		_classCallCheck(this, Barcode);

		this.data = data;
		this.text = options.text || data;
		this.options = options;
	};

	exports.default = Barcode;
	});

	var Barcode = unwrapExports(Barcode_1);

	var Barcode$1 = /*#__PURE__*/Object.freeze({
		default: Barcode,
		__moduleExports: Barcode_1
	});

	var _Barcode2 = ( Barcode$1 && Barcode ) || Barcode$1;

	var CODE39_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.CODE39 = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();



	var _Barcode3 = _interopRequireDefault(_Barcode2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } } // Encoding documentation:
	// https://en.wikipedia.org/wiki/Code_39#Encoding

	var CODE39 = function (_Barcode) {
		_inherits(CODE39, _Barcode);

		function CODE39(data, options) {
			_classCallCheck(this, CODE39);

			data = data.toUpperCase();

			// Calculate mod43 checksum if enabled
			if (options.mod43) {
				data += getCharacter(mod43checksum(data));
			}

			return _possibleConstructorReturn(this, (CODE39.__proto__ || Object.getPrototypeOf(CODE39)).call(this, data, options));
		}

		_createClass(CODE39, [{
			key: "encode",
			value: function encode() {
				// First character is always a *
				var result = getEncoding("*");

				// Take every character and add the binary representation to the result
				for (var i = 0; i < this.data.length; i++) {
					result += getEncoding(this.data[i]) + "0";
				}

				// Last character is always a *
				result += getEncoding("*");

				return {
					data: result,
					text: this.text
				};
			}
		}, {
			key: "valid",
			value: function valid() {
				return this.data.search(/^[0-9A-Z\-\.\ \$\/\+\%]+$/) !== -1;
			}
		}]);

		return CODE39;
	}(_Barcode3.default);

	// All characters. The position in the array is the (checksum) value


	var characters = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "-", ".", " ", "$", "/", "+", "%", "*"];

	// The decimal representation of the characters, is converted to the
	// corresponding binary with the getEncoding function
	var encodings = [20957, 29783, 23639, 30485, 20951, 29813, 23669, 20855, 29789, 23645, 29975, 23831, 30533, 22295, 30149, 24005, 21623, 29981, 23837, 22301, 30023, 23879, 30545, 22343, 30161, 24017, 21959, 30065, 23921, 22385, 29015, 18263, 29141, 17879, 29045, 18293, 17783, 29021, 18269, 17477, 17489, 17681, 20753, 35770];

	// Get the binary representation of a character by converting the encodings
	// from decimal to binary
	function getEncoding(character) {
		return getBinary(characterValue(character));
	}

	function getBinary(characterValue) {
		return encodings[characterValue].toString(2);
	}

	function getCharacter(characterValue) {
		return characters[characterValue];
	}

	function characterValue(character) {
		return characters.indexOf(character);
	}

	function mod43checksum(data) {
		var checksum = 0;
		for (var i = 0; i < data.length; i++) {
			checksum += characterValue(data[i]);
		}

		checksum = checksum % 43;
		return checksum;
	}

	exports.CODE39 = CODE39;
	});

	var index = unwrapExports(CODE39_1);
	var CODE39_2 = CODE39_1.CODE39;

	var CODE39 = /*#__PURE__*/Object.freeze({
		default: index,
		__moduleExports: CODE39_1,
		CODE39: CODE39_2
	});

	var constants = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _SET_BY_CODE;

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	// constants for internal usage
	var SET_A = exports.SET_A = 0;
	var SET_B = exports.SET_B = 1;
	var SET_C = exports.SET_C = 2;

	// Special characters
	var SHIFT = exports.SHIFT = 98;
	var START_A = exports.START_A = 103;
	var START_B = exports.START_B = 104;
	var START_C = exports.START_C = 105;
	var MODULO = exports.MODULO = 103;
	var STOP = exports.STOP = 106;
	var FNC1 = exports.FNC1 = 207;

	// Get set by start code
	var SET_BY_CODE = exports.SET_BY_CODE = (_SET_BY_CODE = {}, _defineProperty(_SET_BY_CODE, START_A, SET_A), _defineProperty(_SET_BY_CODE, START_B, SET_B), _defineProperty(_SET_BY_CODE, START_C, SET_C), _SET_BY_CODE);

	// Get next set by code
	var SWAP = exports.SWAP = {
		101: SET_A,
		100: SET_B,
		99: SET_C
	};

	var A_START_CHAR = exports.A_START_CHAR = String.fromCharCode(208); // START_A + 105
	var B_START_CHAR = exports.B_START_CHAR = String.fromCharCode(209); // START_B + 105
	var C_START_CHAR = exports.C_START_CHAR = String.fromCharCode(210); // START_C + 105

	// 128A (Code Set A)
	// ASCII characters 00 to 95 (0–9, A–Z and control codes), special characters, and FNC 1–4
	var A_CHARS = exports.A_CHARS = "[\x00-\x5F\xC8-\xCF]";

	// 128B (Code Set B)
	// ASCII characters 32 to 127 (0–9, A–Z, a–z), special characters, and FNC 1–4
	var B_CHARS = exports.B_CHARS = "[\x20-\x7F\xC8-\xCF]";

	// 128C (Code Set C)
	// 00–99 (encodes two digits with a single code point) and FNC1
	var C_CHARS = exports.C_CHARS = "(\xCF*[0-9]{2}\xCF*)";

	// CODE128 includes 107 symbols:
	// 103 data symbols, 3 start symbols (A, B and C), and 1 stop symbol (the last one)
	// Each symbol consist of three black bars (1) and three white spaces (0).
	var BARS = exports.BARS = [11011001100, 11001101100, 11001100110, 10010011000, 10010001100, 10001001100, 10011001000, 10011000100, 10001100100, 11001001000, 11001000100, 11000100100, 10110011100, 10011011100, 10011001110, 10111001100, 10011101100, 10011100110, 11001110010, 11001011100, 11001001110, 11011100100, 11001110100, 11101101110, 11101001100, 11100101100, 11100100110, 11101100100, 11100110100, 11100110010, 11011011000, 11011000110, 11000110110, 10100011000, 10001011000, 10001000110, 10110001000, 10001101000, 10001100010, 11010001000, 11000101000, 11000100010, 10110111000, 10110001110, 10001101110, 10111011000, 10111000110, 10001110110, 11101110110, 11010001110, 11000101110, 11011101000, 11011100010, 11011101110, 11101011000, 11101000110, 11100010110, 11101101000, 11101100010, 11100011010, 11101111010, 11001000010, 11110001010, 10100110000, 10100001100, 10010110000, 10010000110, 10000101100, 10000100110, 10110010000, 10110000100, 10011010000, 10011000010, 10000110100, 10000110010, 11000010010, 11001010000, 11110111010, 11000010100, 10001111010, 10100111100, 10010111100, 10010011110, 10111100100, 10011110100, 10011110010, 11110100100, 11110010100, 11110010010, 11011011110, 11011110110, 11110110110, 10101111000, 10100011110, 10001011110, 10111101000, 10111100010, 11110101000, 11110100010, 10111011110, 10111101110, 11101011110, 11110101110, 11010000100, 11010010000, 11010011100, 1100011101011];
	});

	var constants$1 = unwrapExports(constants);
	var constants_1 = constants.SET_A;
	var constants_2 = constants.SET_B;
	var constants_3 = constants.SET_C;
	var constants_4 = constants.SHIFT;
	var constants_5 = constants.START_A;
	var constants_6 = constants.START_B;
	var constants_7 = constants.START_C;
	var constants_8 = constants.MODULO;
	var constants_9 = constants.STOP;
	var constants_10 = constants.FNC1;
	var constants_11 = constants.SET_BY_CODE;
	var constants_12 = constants.SWAP;
	var constants_13 = constants.A_START_CHAR;
	var constants_14 = constants.B_START_CHAR;
	var constants_15 = constants.C_START_CHAR;
	var constants_16 = constants.A_CHARS;
	var constants_17 = constants.B_CHARS;
	var constants_18 = constants.C_CHARS;
	var constants_19 = constants.BARS;

	var constants$2 = /*#__PURE__*/Object.freeze({
		default: constants$1,
		__moduleExports: constants,
		SET_A: constants_1,
		SET_B: constants_2,
		SET_C: constants_3,
		SHIFT: constants_4,
		START_A: constants_5,
		START_B: constants_6,
		START_C: constants_7,
		MODULO: constants_8,
		STOP: constants_9,
		FNC1: constants_10,
		SET_BY_CODE: constants_11,
		SWAP: constants_12,
		A_START_CHAR: constants_13,
		B_START_CHAR: constants_14,
		C_START_CHAR: constants_15,
		A_CHARS: constants_16,
		B_CHARS: constants_17,
		C_CHARS: constants_18,
		BARS: constants_19
	});

	var _constants = ( constants$2 && constants$1 ) || constants$2;

	var CODE128_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();



	var _Barcode3 = _interopRequireDefault(_Barcode2);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } }

	// This is the master class,
	// it does require the start code to be included in the string
	var CODE128 = function (_Barcode) {
		_inherits(CODE128, _Barcode);

		function CODE128(data, options) {
			_classCallCheck(this, CODE128);

			// Get array of ascii codes from data
			var _this = _possibleConstructorReturn(this, (CODE128.__proto__ || Object.getPrototypeOf(CODE128)).call(this, data.substring(1), options));

			_this.bytes = data.split('').map(function (char) {
				return char.charCodeAt(0);
			});
			return _this;
		}

		_createClass(CODE128, [{
			key: 'valid',
			value: function valid() {
				// ASCII value ranges 0-127, 200-211
				return (/^[\x00-\x7F\xC8-\xD3]+$/.test(this.data)
				);
			}

			// The public encoding function

		}, {
			key: 'encode',
			value: function encode() {
				var bytes = this.bytes;
				// Remove the start code from the bytes and set its index
				var startIndex = bytes.shift() - 105;
				// Get start set by index
				var startSet = _constants.SET_BY_CODE[startIndex];

				if (startSet === undefined) {
					throw new RangeError('The encoding does not start with a start character.');
				}

				if (this.shouldEncodeAsEan128() === true) {
					bytes.unshift(_constants.FNC1);
				}

				// Start encode with the right type
				var encodingResult = CODE128.next(bytes, 1, startSet);

				return {
					text: this.text === this.data ? this.text.replace(/[^\x20-\x7E]/g, '') : this.text,
					data:
					// Add the start bits
					CODE128.getBar(startIndex) +
					// Add the encoded bits
					encodingResult.result +
					// Add the checksum
					CODE128.getBar((encodingResult.checksum + startIndex) % _constants.MODULO) +
					// Add the end bits
					CODE128.getBar(_constants.STOP)
				};
			}

			// GS1-128/EAN-128

		}, {
			key: 'shouldEncodeAsEan128',
			value: function shouldEncodeAsEan128() {
				var isEAN128 = this.options.ean128 || false;
				if (typeof isEAN128 === 'string') {
					isEAN128 = isEAN128.toLowerCase() === 'true';
				}
				return isEAN128;
			}

			// Get a bar symbol by index

		}], [{
			key: 'getBar',
			value: function getBar(index) {
				return _constants.BARS[index] ? _constants.BARS[index].toString() : '';
			}

			// Correct an index by a set and shift it from the bytes array

		}, {
			key: 'correctIndex',
			value: function correctIndex(bytes, set) {
				if (set === _constants.SET_A) {
					var charCode = bytes.shift();
					return charCode < 32 ? charCode + 64 : charCode - 32;
				} else if (set === _constants.SET_B) {
					return bytes.shift() - 32;
				} else {
					return (bytes.shift() - 48) * 10 + bytes.shift() - 48;
				}
			}
		}, {
			key: 'next',
			value: function next(bytes, pos, set) {
				if (!bytes.length) {
					return { result: '', checksum: 0 };
				}

				var nextCode = void 0,
				    index = void 0;

				// Special characters
				if (bytes[0] >= 200) {
					index = bytes.shift() - 105;
					var nextSet = _constants.SWAP[index];

					// Swap to other set
					if (nextSet !== undefined) {
						nextCode = CODE128.next(bytes, pos + 1, nextSet);
					}
					// Continue on current set but encode a special character
					else {
							// Shift
							if ((set === _constants.SET_A || set === _constants.SET_B) && index === _constants.SHIFT) {
								// Convert the next character so that is encoded correctly
								bytes[0] = set === _constants.SET_A ? bytes[0] > 95 ? bytes[0] - 96 : bytes[0] : bytes[0] < 32 ? bytes[0] + 96 : bytes[0];
							}
							nextCode = CODE128.next(bytes, pos + 1, set);
						}
				}
				// Continue encoding
				else {
						index = CODE128.correctIndex(bytes, set);
						nextCode = CODE128.next(bytes, pos + 1, set);
					}

				// Get the correct binary encoding and calculate the weight
				var enc = CODE128.getBar(index);
				var weight = index * pos;

				return {
					result: enc + nextCode.result,
					checksum: weight + nextCode.checksum
				};
			}
		}]);

		return CODE128;
	}(_Barcode3.default);

	exports.default = CODE128;
	});

	var CODE128 = unwrapExports(CODE128_1);

	var CODE128$1 = /*#__PURE__*/Object.freeze({
		default: CODE128,
		__moduleExports: CODE128_1
	});

	var auto = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});



	// Match Set functions
	var matchSetALength = function matchSetALength(string) {
		return string.match(new RegExp('^' + _constants.A_CHARS + '*'))[0].length;
	};
	var matchSetBLength = function matchSetBLength(string) {
		return string.match(new RegExp('^' + _constants.B_CHARS + '*'))[0].length;
	};
	var matchSetC = function matchSetC(string) {
		return string.match(new RegExp('^' + _constants.C_CHARS + '*'))[0];
	};

	// CODE128A or CODE128B
	function autoSelectFromAB(string, isA) {
		var ranges = isA ? _constants.A_CHARS : _constants.B_CHARS;
		var untilC = string.match(new RegExp('^(' + ranges + '+?)(([0-9]{2}){2,})([^0-9]|$)'));

		if (untilC) {
			return untilC[1] + String.fromCharCode(204) + autoSelectFromC(string.substring(untilC[1].length));
		}

		var chars = string.match(new RegExp('^' + ranges + '+'))[0];

		if (chars.length === string.length) {
			return string;
		}

		return chars + String.fromCharCode(isA ? 205 : 206) + autoSelectFromAB(string.substring(chars.length), !isA);
	}

	// CODE128C
	function autoSelectFromC(string) {
		var cMatch = matchSetC(string);
		var length = cMatch.length;

		if (length === string.length) {
			return string;
		}

		string = string.substring(length);

		// Select A/B depending on the longest match
		var isA = matchSetALength(string) >= matchSetBLength(string);
		return cMatch + String.fromCharCode(isA ? 206 : 205) + autoSelectFromAB(string, isA);
	}

	// Detect Code Set (A, B or C) and format the string

	exports.default = function (string) {
		var newString = void 0;
		var cLength = matchSetC(string).length;

		// Select 128C if the string start with enough digits
		if (cLength >= 2) {
			newString = _constants.C_START_CHAR + autoSelectFromC(string);
		} else {
			// Select A/B depending on the longest match
			var isA = matchSetALength(string) > matchSetBLength(string);
			newString = (isA ? _constants.A_START_CHAR : _constants.B_START_CHAR) + autoSelectFromAB(string, isA);
		}

		return newString.replace(/[\xCD\xCE]([^])[\xCD\xCE]/, // Any sequence between 205 and 206 characters
		function (match, char) {
			return String.fromCharCode(203) + char;
		});
	};
	});

	var auto$1 = unwrapExports(auto);

	var auto$2 = /*#__PURE__*/Object.freeze({
		default: auto$1,
		__moduleExports: auto
	});

	var _CODE2 = ( CODE128$1 && CODE128 ) || CODE128$1;

	var _auto = ( auto$2 && auto$1 ) || auto$2;

	var CODE128_AUTO = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});



	var _CODE3 = _interopRequireDefault(_CODE2);



	var _auto2 = _interopRequireDefault(_auto);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } }

	var CODE128AUTO = function (_CODE) {
		_inherits(CODE128AUTO, _CODE);

		function CODE128AUTO(data, options) {
			_classCallCheck(this, CODE128AUTO);

			// ASCII value ranges 0-127, 200-211
			if (/^[\x00-\x7F\xC8-\xD3]+$/.test(data)) {
				var _this = _possibleConstructorReturn(this, (CODE128AUTO.__proto__ || Object.getPrototypeOf(CODE128AUTO)).call(this, (0, _auto2.default)(data), options));
			} else {
				var _this = _possibleConstructorReturn(this, (CODE128AUTO.__proto__ || Object.getPrototypeOf(CODE128AUTO)).call(this, data, options));
			}
			return _possibleConstructorReturn(_this);
		}

		return CODE128AUTO;
	}(_CODE3.default);

	exports.default = CODE128AUTO;
	});

	var CODE128_AUTO$1 = unwrapExports(CODE128_AUTO);

	var CODE128_AUTO$2 = /*#__PURE__*/Object.freeze({
		default: CODE128_AUTO$1,
		__moduleExports: CODE128_AUTO
	});

	var CODE128A_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();



	var _CODE3 = _interopRequireDefault(_CODE2);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } }

	var CODE128A = function (_CODE) {
		_inherits(CODE128A, _CODE);

		function CODE128A(string, options) {
			_classCallCheck(this, CODE128A);

			return _possibleConstructorReturn(this, (CODE128A.__proto__ || Object.getPrototypeOf(CODE128A)).call(this, _constants.A_START_CHAR + string, options));
		}

		_createClass(CODE128A, [{
			key: 'valid',
			value: function valid() {
				return new RegExp('^' + _constants.A_CHARS + '+$').test(this.data);
			}
		}]);

		return CODE128A;
	}(_CODE3.default);

	exports.default = CODE128A;
	});

	var CODE128A = unwrapExports(CODE128A_1);

	var CODE128A$1 = /*#__PURE__*/Object.freeze({
		default: CODE128A,
		__moduleExports: CODE128A_1
	});

	var CODE128B_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();



	var _CODE3 = _interopRequireDefault(_CODE2);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } }

	var CODE128B = function (_CODE) {
		_inherits(CODE128B, _CODE);

		function CODE128B(string, options) {
			_classCallCheck(this, CODE128B);

			return _possibleConstructorReturn(this, (CODE128B.__proto__ || Object.getPrototypeOf(CODE128B)).call(this, _constants.B_START_CHAR + string, options));
		}

		_createClass(CODE128B, [{
			key: 'valid',
			value: function valid() {
				return new RegExp('^' + _constants.B_CHARS + '+$').test(this.data);
			}
		}]);

		return CODE128B;
	}(_CODE3.default);

	exports.default = CODE128B;
	});

	var CODE128B = unwrapExports(CODE128B_1);

	var CODE128B$1 = /*#__PURE__*/Object.freeze({
		default: CODE128B,
		__moduleExports: CODE128B_1
	});

	var CODE128C_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();



	var _CODE3 = _interopRequireDefault(_CODE2);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } }

	var CODE128C = function (_CODE) {
		_inherits(CODE128C, _CODE);

		function CODE128C(string, options) {
			_classCallCheck(this, CODE128C);

			return _possibleConstructorReturn(this, (CODE128C.__proto__ || Object.getPrototypeOf(CODE128C)).call(this, _constants.C_START_CHAR + string, options));
		}

		_createClass(CODE128C, [{
			key: 'valid',
			value: function valid() {
				return new RegExp('^' + _constants.C_CHARS + '+$').test(this.data);
			}
		}]);

		return CODE128C;
	}(_CODE3.default);

	exports.default = CODE128C;
	});

	var CODE128C = unwrapExports(CODE128C_1);

	var CODE128C$1 = /*#__PURE__*/Object.freeze({
		default: CODE128C,
		__moduleExports: CODE128C_1
	});

	var _CODE128_AUTO = ( CODE128_AUTO$2 && CODE128_AUTO$1 ) || CODE128_AUTO$2;

	var _CODE128A = ( CODE128A$1 && CODE128A ) || CODE128A$1;

	var _CODE128B = ( CODE128B$1 && CODE128B ) || CODE128B$1;

	var _CODE128C = ( CODE128C$1 && CODE128C ) || CODE128C$1;

	var CODE128$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CODE128C = exports.CODE128B = exports.CODE128A = exports.CODE128 = undefined;



	var _CODE128_AUTO2 = _interopRequireDefault(_CODE128_AUTO);



	var _CODE128A2 = _interopRequireDefault(_CODE128A);



	var _CODE128B2 = _interopRequireDefault(_CODE128B);



	var _CODE128C2 = _interopRequireDefault(_CODE128C);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.CODE128 = _CODE128_AUTO2.default;
	exports.CODE128A = _CODE128A2.default;
	exports.CODE128B = _CODE128B2.default;
	exports.CODE128C = _CODE128C2.default;
	});

	var index$1 = unwrapExports(CODE128$2);
	var CODE128_1$1 = CODE128$2.CODE128C;
	var CODE128_2 = CODE128$2.CODE128B;
	var CODE128_3 = CODE128$2.CODE128A;
	var CODE128_4 = CODE128$2.CODE128;

	var CODE128$3 = /*#__PURE__*/Object.freeze({
		default: index$1,
		__moduleExports: CODE128$2,
		CODE128C: CODE128_1$1,
		CODE128B: CODE128_2,
		CODE128A: CODE128_3,
		CODE128: CODE128_4
	});

	var constants$3 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	// Standard start end and middle bits
	var SIDE_BIN = exports.SIDE_BIN = '101';
	var MIDDLE_BIN = exports.MIDDLE_BIN = '01010';

	var BINARIES = exports.BINARIES = {
		'L': [// The L (left) type of encoding
		'0001101', '0011001', '0010011', '0111101', '0100011', '0110001', '0101111', '0111011', '0110111', '0001011'],
		'G': [// The G type of encoding
		'0100111', '0110011', '0011011', '0100001', '0011101', '0111001', '0000101', '0010001', '0001001', '0010111'],
		'R': [// The R (right) type of encoding
		'1110010', '1100110', '1101100', '1000010', '1011100', '1001110', '1010000', '1000100', '1001000', '1110100'],
		'O': [// The O (odd) encoding for UPC-E
		'0001101', '0011001', '0010011', '0111101', '0100011', '0110001', '0101111', '0111011', '0110111', '0001011'],
		'E': [// The E (even) encoding for UPC-E
		'0100111', '0110011', '0011011', '0100001', '0011101', '0111001', '0000101', '0010001', '0001001', '0010111']
	};

	// Define the EAN-2 structure
	var EAN2_STRUCTURE = exports.EAN2_STRUCTURE = ['LL', 'LG', 'GL', 'GG'];

	// Define the EAN-5 structure
	var EAN5_STRUCTURE = exports.EAN5_STRUCTURE = ['GGLLL', 'GLGLL', 'GLLGL', 'GLLLG', 'LGGLL', 'LLGGL', 'LLLGG', 'LGLGL', 'LGLLG', 'LLGLG'];

	// Define the EAN-13 structure
	var EAN13_STRUCTURE = exports.EAN13_STRUCTURE = ['LLLLLL', 'LLGLGG', 'LLGGLG', 'LLGGGL', 'LGLLGG', 'LGGLLG', 'LGGGLL', 'LGLGLG', 'LGLGGL', 'LGGLGL'];
	});

	var constants$4 = unwrapExports(constants$3);
	var constants_1$1 = constants$3.SIDE_BIN;
	var constants_2$1 = constants$3.MIDDLE_BIN;
	var constants_3$1 = constants$3.BINARIES;
	var constants_4$1 = constants$3.EAN2_STRUCTURE;
	var constants_5$1 = constants$3.EAN5_STRUCTURE;
	var constants_6$1 = constants$3.EAN13_STRUCTURE;

	var constants$5 = /*#__PURE__*/Object.freeze({
		default: constants$4,
		__moduleExports: constants$3,
		SIDE_BIN: constants_1$1,
		MIDDLE_BIN: constants_2$1,
		BINARIES: constants_3$1,
		EAN2_STRUCTURE: constants_4$1,
		EAN5_STRUCTURE: constants_5$1,
		EAN13_STRUCTURE: constants_6$1
	});

	var _constants$1 = ( constants$5 && constants$4 ) || constants$5;

	var encoder = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});



	// Encode data string
	var encode = function encode(data, structure, separator) {
		var encoded = data.split('').map(function (val, idx) {
			return _constants$1.BINARIES[structure[idx]];
		}).map(function (val, idx) {
			return val ? val[data[idx]] : '';
		});

		if (separator) {
			var last = data.length - 1;
			encoded = encoded.map(function (val, idx) {
				return idx < last ? val + separator : val;
			});
		}

		return encoded.join('');
	};

	exports.default = encode;
	});

	var encoder$1 = unwrapExports(encoder);

	var encoder$2 = /*#__PURE__*/Object.freeze({
		default: encoder$1,
		__moduleExports: encoder
	});

	var _encoder = ( encoder$2 && encoder$1 ) || encoder$2;

	var EAN_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();





	var _encoder2 = _interopRequireDefault(_encoder);



	var _Barcode3 = _interopRequireDefault(_Barcode2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } }

	// Base class for EAN8 & EAN13
	var EAN = function (_Barcode) {
		_inherits(EAN, _Barcode);

		function EAN(data, options) {
			_classCallCheck(this, EAN);

			// Make sure the font is not bigger than the space between the guard bars
			var _this = _possibleConstructorReturn(this, (EAN.__proto__ || Object.getPrototypeOf(EAN)).call(this, data, options));

			_this.fontSize = !options.flat && options.fontSize > options.width * 10 ? options.width * 10 : options.fontSize;

			// Make the guard bars go down half the way of the text
			_this.guardHeight = options.height + _this.fontSize / 2 + options.textMargin;
			return _this;
		}

		_createClass(EAN, [{
			key: 'encode',
			value: function encode() {
				return this.options.flat ? this.encodeFlat() : this.encodeGuarded();
			}
		}, {
			key: 'leftText',
			value: function leftText(from, to) {
				return this.text.substr(from, to);
			}
		}, {
			key: 'leftEncode',
			value: function leftEncode(data, structure) {
				return (0, _encoder2.default)(data, structure);
			}
		}, {
			key: 'rightText',
			value: function rightText(from, to) {
				return this.text.substr(from, to);
			}
		}, {
			key: 'rightEncode',
			value: function rightEncode(data, structure) {
				return (0, _encoder2.default)(data, structure);
			}
		}, {
			key: 'encodeGuarded',
			value: function encodeGuarded() {
				var textOptions = { fontSize: this.fontSize };
				var guardOptions = { height: this.guardHeight };

				return [{ data: _constants$1.SIDE_BIN, options: guardOptions }, { data: this.leftEncode(), text: this.leftText(), options: textOptions }, { data: _constants$1.MIDDLE_BIN, options: guardOptions }, { data: this.rightEncode(), text: this.rightText(), options: textOptions }, { data: _constants$1.SIDE_BIN, options: guardOptions }];
			}
		}, {
			key: 'encodeFlat',
			value: function encodeFlat() {
				var data = [_constants$1.SIDE_BIN, this.leftEncode(), _constants$1.MIDDLE_BIN, this.rightEncode(), _constants$1.SIDE_BIN];

				return {
					data: data.join(''),
					text: this.text
				};
			}
		}]);

		return EAN;
	}(_Barcode3.default);

	exports.default = EAN;
	});

	var EAN = unwrapExports(EAN_1);

	var EAN$1 = /*#__PURE__*/Object.freeze({
		default: EAN,
		__moduleExports: EAN_1
	});

	var _EAN2 = ( EAN$1 && EAN ) || EAN$1;

	var EAN13_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) { object = Function.prototype; } var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };





	var _EAN3 = _interopRequireDefault(_EAN2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } } // Encoding documentation:
	// https://en.wikipedia.org/wiki/International_Article_Number_(EAN)#Binary_encoding_of_data_digits_into_EAN-13_barcode

	// Calculate the checksum digit
	// https://en.wikipedia.org/wiki/International_Article_Number_(EAN)#Calculation_of_checksum_digit
	var checksum = function checksum(number) {
		var res = number.substr(0, 12).split('').map(function (n) {
			return +n;
		}).reduce(function (sum, a, idx) {
			return idx % 2 ? sum + a * 3 : sum + a;
		}, 0);

		return (10 - res % 10) % 10;
	};

	var EAN13 = function (_EAN) {
		_inherits(EAN13, _EAN);

		function EAN13(data, options) {
			_classCallCheck(this, EAN13);

			// Add checksum if it does not exist
			if (data.search(/^[0-9]{12}$/) !== -1) {
				data += checksum(data);
			}

			// Adds a last character to the end of the barcode
			var _this = _possibleConstructorReturn(this, (EAN13.__proto__ || Object.getPrototypeOf(EAN13)).call(this, data, options));

			_this.lastChar = options.lastChar;
			return _this;
		}

		_createClass(EAN13, [{
			key: 'valid',
			value: function valid() {
				return this.data.search(/^[0-9]{13}$/) !== -1 && +this.data[12] === checksum(this.data);
			}
		}, {
			key: 'leftText',
			value: function leftText() {
				return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'leftText', this).call(this, 1, 6);
			}
		}, {
			key: 'leftEncode',
			value: function leftEncode() {
				var data = this.data.substr(1, 6);
				var structure = _constants$1.EAN13_STRUCTURE[this.data[0]];
				return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'leftEncode', this).call(this, data, structure);
			}
		}, {
			key: 'rightText',
			value: function rightText() {
				return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'rightText', this).call(this, 7, 6);
			}
		}, {
			key: 'rightEncode',
			value: function rightEncode() {
				var data = this.data.substr(7, 6);
				return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'rightEncode', this).call(this, data, 'RRRRRR');
			}

			// The "standard" way of printing EAN13 barcodes with guard bars

		}, {
			key: 'encodeGuarded',
			value: function encodeGuarded() {
				var data = _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'encodeGuarded', this).call(this);

				// Extend data with left digit & last character
				if (this.options.displayValue) {
					data.unshift({
						data: '000000000000',
						text: this.text.substr(0, 1),
						options: { textAlign: 'left', fontSize: this.fontSize }
					});

					if (this.options.lastChar) {
						data.push({
							data: '00'
						});
						data.push({
							data: '00000',
							text: this.options.lastChar,
							options: { fontSize: this.fontSize }
						});
					}
				}

				return data;
			}
		}]);

		return EAN13;
	}(_EAN3.default);

	exports.default = EAN13;
	});

	var EAN13 = unwrapExports(EAN13_1);

	var EAN13$1 = /*#__PURE__*/Object.freeze({
		default: EAN13,
		__moduleExports: EAN13_1
	});

	var EAN8_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) { object = Function.prototype; } var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };



	var _EAN3 = _interopRequireDefault(_EAN2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } } // Encoding documentation:
	// http://www.barcodeisland.com/ean8.phtml

	// Calculate the checksum digit
	var checksum = function checksum(number) {
		var res = number.substr(0, 7).split('').map(function (n) {
			return +n;
		}).reduce(function (sum, a, idx) {
			return idx % 2 ? sum + a : sum + a * 3;
		}, 0);

		return (10 - res % 10) % 10;
	};

	var EAN8 = function (_EAN) {
		_inherits(EAN8, _EAN);

		function EAN8(data, options) {
			_classCallCheck(this, EAN8);

			// Add checksum if it does not exist
			if (data.search(/^[0-9]{7}$/) !== -1) {
				data += checksum(data);
			}

			return _possibleConstructorReturn(this, (EAN8.__proto__ || Object.getPrototypeOf(EAN8)).call(this, data, options));
		}

		_createClass(EAN8, [{
			key: 'valid',
			value: function valid() {
				return this.data.search(/^[0-9]{8}$/) !== -1 && +this.data[7] === checksum(this.data);
			}
		}, {
			key: 'leftText',
			value: function leftText() {
				return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'leftText', this).call(this, 0, 4);
			}
		}, {
			key: 'leftEncode',
			value: function leftEncode() {
				var data = this.data.substr(0, 4);
				return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'leftEncode', this).call(this, data, 'LLLL');
			}
		}, {
			key: 'rightText',
			value: function rightText() {
				return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'rightText', this).call(this, 4, 4);
			}
		}, {
			key: 'rightEncode',
			value: function rightEncode() {
				var data = this.data.substr(4, 4);
				return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'rightEncode', this).call(this, data, 'RRRR');
			}
		}]);

		return EAN8;
	}(_EAN3.default);

	exports.default = EAN8;
	});

	var EAN8 = unwrapExports(EAN8_1);

	var EAN8$1 = /*#__PURE__*/Object.freeze({
		default: EAN8,
		__moduleExports: EAN8_1
	});

	var EAN5_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();





	var _encoder2 = _interopRequireDefault(_encoder);



	var _Barcode3 = _interopRequireDefault(_Barcode2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } } // Encoding documentation:
	// https://en.wikipedia.org/wiki/EAN_5#Encoding

	var checksum = function checksum(data) {
		var result = data.split('').map(function (n) {
			return +n;
		}).reduce(function (sum, a, idx) {
			return idx % 2 ? sum + a * 9 : sum + a * 3;
		}, 0);
		return result % 10;
	};

	var EAN5 = function (_Barcode) {
		_inherits(EAN5, _Barcode);

		function EAN5(data, options) {
			_classCallCheck(this, EAN5);

			return _possibleConstructorReturn(this, (EAN5.__proto__ || Object.getPrototypeOf(EAN5)).call(this, data, options));
		}

		_createClass(EAN5, [{
			key: 'valid',
			value: function valid() {
				return this.data.search(/^[0-9]{5}$/) !== -1;
			}
		}, {
			key: 'encode',
			value: function encode() {
				var structure = _constants$1.EAN5_STRUCTURE[checksum(this.data)];
				return {
					data: '1011' + (0, _encoder2.default)(this.data, structure, '01'),
					text: this.text
				};
			}
		}]);

		return EAN5;
	}(_Barcode3.default);

	exports.default = EAN5;
	});

	var EAN5 = unwrapExports(EAN5_1);

	var EAN5$1 = /*#__PURE__*/Object.freeze({
		default: EAN5,
		__moduleExports: EAN5_1
	});

	var EAN2_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();





	var _encoder2 = _interopRequireDefault(_encoder);



	var _Barcode3 = _interopRequireDefault(_Barcode2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } } // Encoding documentation:
	// https://en.wikipedia.org/wiki/EAN_2#Encoding

	var EAN2 = function (_Barcode) {
		_inherits(EAN2, _Barcode);

		function EAN2(data, options) {
			_classCallCheck(this, EAN2);

			return _possibleConstructorReturn(this, (EAN2.__proto__ || Object.getPrototypeOf(EAN2)).call(this, data, options));
		}

		_createClass(EAN2, [{
			key: 'valid',
			value: function valid() {
				return this.data.search(/^[0-9]{2}$/) !== -1;
			}
		}, {
			key: 'encode',
			value: function encode() {
				// Choose the structure based on the number mod 4
				var structure = _constants$1.EAN2_STRUCTURE[parseInt(this.data) % 4];
				return {
					// Start bits + Encode the two digits with 01 in between
					data: '1011' + (0, _encoder2.default)(this.data, structure, '01'),
					text: this.text
				};
			}
		}]);

		return EAN2;
	}(_Barcode3.default);

	exports.default = EAN2;
	});

	var EAN2 = unwrapExports(EAN2_1);

	var EAN2$1 = /*#__PURE__*/Object.freeze({
		default: EAN2,
		__moduleExports: EAN2_1
	});

	var UPC_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();

	exports.checksum = checksum;



	var _encoder2 = _interopRequireDefault(_encoder);



	var _Barcode3 = _interopRequireDefault(_Barcode2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } } // Encoding documentation:
	// https://en.wikipedia.org/wiki/Universal_Product_Code#Encoding

	var UPC = function (_Barcode) {
		_inherits(UPC, _Barcode);

		function UPC(data, options) {
			_classCallCheck(this, UPC);

			// Add checksum if it does not exist
			if (data.search(/^[0-9]{11}$/) !== -1) {
				data += checksum(data);
			}

			var _this = _possibleConstructorReturn(this, (UPC.__proto__ || Object.getPrototypeOf(UPC)).call(this, data, options));

			_this.displayValue = options.displayValue;

			// Make sure the font is not bigger than the space between the guard bars
			if (options.fontSize > options.width * 10) {
				_this.fontSize = options.width * 10;
			} else {
				_this.fontSize = options.fontSize;
			}

			// Make the guard bars go down half the way of the text
			_this.guardHeight = options.height + _this.fontSize / 2 + options.textMargin;
			return _this;
		}

		_createClass(UPC, [{
			key: "valid",
			value: function valid() {
				return this.data.search(/^[0-9]{12}$/) !== -1 && this.data[11] == checksum(this.data);
			}
		}, {
			key: "encode",
			value: function encode() {
				if (this.options.flat) {
					return this.flatEncoding();
				} else {
					return this.guardedEncoding();
				}
			}
		}, {
			key: "flatEncoding",
			value: function flatEncoding() {
				var result = "";

				result += "101";
				result += (0, _encoder2.default)(this.data.substr(0, 6), "LLLLLL");
				result += "01010";
				result += (0, _encoder2.default)(this.data.substr(6, 6), "RRRRRR");
				result += "101";

				return {
					data: result,
					text: this.text
				};
			}
		}, {
			key: "guardedEncoding",
			value: function guardedEncoding() {
				var result = [];

				// Add the first digit
				if (this.displayValue) {
					result.push({
						data: "00000000",
						text: this.text.substr(0, 1),
						options: { textAlign: "left", fontSize: this.fontSize }
					});
				}

				// Add the guard bars
				result.push({
					data: "101" + (0, _encoder2.default)(this.data[0], "L"),
					options: { height: this.guardHeight }
				});

				// Add the left side
				result.push({
					data: (0, _encoder2.default)(this.data.substr(1, 5), "LLLLL"),
					text: this.text.substr(1, 5),
					options: { fontSize: this.fontSize }
				});

				// Add the middle bits
				result.push({
					data: "01010",
					options: { height: this.guardHeight }
				});

				// Add the right side
				result.push({
					data: (0, _encoder2.default)(this.data.substr(6, 5), "RRRRR"),
					text: this.text.substr(6, 5),
					options: { fontSize: this.fontSize }
				});

				// Add the end bits
				result.push({
					data: (0, _encoder2.default)(this.data[11], "R") + "101",
					options: { height: this.guardHeight }
				});

				// Add the last digit
				if (this.displayValue) {
					result.push({
						data: "00000000",
						text: this.text.substr(11, 1),
						options: { textAlign: "right", fontSize: this.fontSize }
					});
				}

				return result;
			}
		}]);

		return UPC;
	}(_Barcode3.default);

	// Calulate the checksum digit
	// https://en.wikipedia.org/wiki/International_Article_Number_(EAN)#Calculation_of_checksum_digit


	function checksum(number) {
		var result = 0;

		var i;
		for (i = 1; i < 11; i += 2) {
			result += parseInt(number[i]);
		}
		for (i = 0; i < 11; i += 2) {
			result += parseInt(number[i]) * 3;
		}

		return (10 - result % 10) % 10;
	}

	exports.default = UPC;
	});

	var UPC = unwrapExports(UPC_1);
	var UPC_2 = UPC_1.checksum;

	var UPC$1 = /*#__PURE__*/Object.freeze({
		default: UPC,
		__moduleExports: UPC_1,
		checksum: UPC_2
	});

	var _UPC = ( UPC$1 && UPC ) || UPC$1;

	var UPCE_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();



	var _encoder2 = _interopRequireDefault(_encoder);



	var _Barcode3 = _interopRequireDefault(_Barcode2);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } } // Encoding documentation:
	// https://en.wikipedia.org/wiki/Universal_Product_Code#Encoding
	//
	// UPC-E documentation:
	// https://en.wikipedia.org/wiki/Universal_Product_Code#UPC-E

	var EXPANSIONS = ["XX00000XXX", "XX10000XXX", "XX20000XXX", "XXX00000XX", "XXXX00000X", "XXXXX00005", "XXXXX00006", "XXXXX00007", "XXXXX00008", "XXXXX00009"];

	var PARITIES = [["EEEOOO", "OOOEEE"], ["EEOEOO", "OOEOEE"], ["EEOOEO", "OOEEOE"], ["EEOOOE", "OOEEEO"], ["EOEEOO", "OEOOEE"], ["EOOEEO", "OEEOOE"], ["EOOOEE", "OEEEOO"], ["EOEOEO", "OEOEOE"], ["EOEOOE", "OEOEEO"], ["EOOEOE", "OEEOEO"]];

	var UPCE = function (_Barcode) {
		_inherits(UPCE, _Barcode);

		function UPCE(data, options) {
			_classCallCheck(this, UPCE);

			var _this = _possibleConstructorReturn(this, (UPCE.__proto__ || Object.getPrototypeOf(UPCE)).call(this, data, options));
			// Code may be 6 or 8 digits;
			// A 7 digit code is ambiguous as to whether the extra digit
			// is a UPC-A check or number system digit.


			_this.isValid = false;
			if (data.search(/^[0-9]{6}$/) !== -1) {
				_this.middleDigits = data;
				_this.upcA = expandToUPCA(data, "0");
				_this.text = options.text || '' + _this.upcA[0] + data + _this.upcA[_this.upcA.length - 1];
				_this.isValid = true;
			} else if (data.search(/^[01][0-9]{7}$/) !== -1) {
				_this.middleDigits = data.substring(1, data.length - 1);
				_this.upcA = expandToUPCA(_this.middleDigits, data[0]);

				if (_this.upcA[_this.upcA.length - 1] === data[data.length - 1]) {
					_this.isValid = true;
				} else {
					// checksum mismatch
					return _possibleConstructorReturn(_this);
				}
			} else {
				return _possibleConstructorReturn(_this);
			}

			_this.displayValue = options.displayValue;

			// Make sure the font is not bigger than the space between the guard bars
			if (options.fontSize > options.width * 10) {
				_this.fontSize = options.width * 10;
			} else {
				_this.fontSize = options.fontSize;
			}

			// Make the guard bars go down half the way of the text
			_this.guardHeight = options.height + _this.fontSize / 2 + options.textMargin;
			return _this;
		}

		_createClass(UPCE, [{
			key: 'valid',
			value: function valid() {
				return this.isValid;
			}
		}, {
			key: 'encode',
			value: function encode() {
				if (this.options.flat) {
					return this.flatEncoding();
				} else {
					return this.guardedEncoding();
				}
			}
		}, {
			key: 'flatEncoding',
			value: function flatEncoding() {
				var result = "";

				result += "101";
				result += this.encodeMiddleDigits();
				result += "010101";

				return {
					data: result,
					text: this.text
				};
			}
		}, {
			key: 'guardedEncoding',
			value: function guardedEncoding() {
				var result = [];

				// Add the UPC-A number system digit beneath the quiet zone
				if (this.displayValue) {
					result.push({
						data: "00000000",
						text: this.text[0],
						options: { textAlign: "left", fontSize: this.fontSize }
					});
				}

				// Add the guard bars
				result.push({
					data: "101",
					options: { height: this.guardHeight }
				});

				// Add the 6 UPC-E digits
				result.push({
					data: this.encodeMiddleDigits(),
					text: this.text.substring(1, 7),
					options: { fontSize: this.fontSize }
				});

				// Add the end bits
				result.push({
					data: "010101",
					options: { height: this.guardHeight }
				});

				// Add the UPC-A check digit beneath the quiet zone
				if (this.displayValue) {
					result.push({
						data: "00000000",
						text: this.text[7],
						options: { textAlign: "right", fontSize: this.fontSize }
					});
				}

				return result;
			}
		}, {
			key: 'encodeMiddleDigits',
			value: function encodeMiddleDigits() {
				var numberSystem = this.upcA[0];
				var checkDigit = this.upcA[this.upcA.length - 1];
				var parity = PARITIES[parseInt(checkDigit)][parseInt(numberSystem)];
				return (0, _encoder2.default)(this.middleDigits, parity);
			}
		}]);

		return UPCE;
	}(_Barcode3.default);

	function expandToUPCA(middleDigits, numberSystem) {
		var lastUpcE = parseInt(middleDigits[middleDigits.length - 1]);
		var expansion = EXPANSIONS[lastUpcE];

		var result = "";
		var digitIndex = 0;
		for (var i = 0; i < expansion.length; i++) {
			var c = expansion[i];
			if (c === 'X') {
				result += middleDigits[digitIndex++];
			} else {
				result += c;
			}
		}

		result = '' + numberSystem + result;
		return '' + result + (0, _UPC.checksum)(result);
	}

	exports.default = UPCE;
	});

	var UPCE = unwrapExports(UPCE_1);

	var UPCE$1 = /*#__PURE__*/Object.freeze({
		default: UPCE,
		__moduleExports: UPCE_1
	});

	var _EAN = ( EAN13$1 && EAN13 ) || EAN13$1;

	var _EAN3 = ( EAN8$1 && EAN8 ) || EAN8$1;

	var _EAN5 = ( EAN5$1 && EAN5 ) || EAN5$1;

	var _EAN7 = ( EAN2$1 && EAN2 ) || EAN2$1;

	var _UPCE = ( UPCE$1 && UPCE ) || UPCE$1;

	var EAN_UPC = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.UPCE = exports.UPC = exports.EAN2 = exports.EAN5 = exports.EAN8 = exports.EAN13 = undefined;



	var _EAN2 = _interopRequireDefault(_EAN);



	var _EAN4 = _interopRequireDefault(_EAN3);



	var _EAN6 = _interopRequireDefault(_EAN5);



	var _EAN8 = _interopRequireDefault(_EAN7);



	var _UPC2 = _interopRequireDefault(_UPC);



	var _UPCE2 = _interopRequireDefault(_UPCE);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.EAN13 = _EAN2.default;
	exports.EAN8 = _EAN4.default;
	exports.EAN5 = _EAN6.default;
	exports.EAN2 = _EAN8.default;
	exports.UPC = _UPC2.default;
	exports.UPCE = _UPCE2.default;
	});

	var index$2 = unwrapExports(EAN_UPC);
	var EAN_UPC_1 = EAN_UPC.UPCE;
	var EAN_UPC_2 = EAN_UPC.UPC;
	var EAN_UPC_3 = EAN_UPC.EAN2;
	var EAN_UPC_4 = EAN_UPC.EAN5;
	var EAN_UPC_5 = EAN_UPC.EAN8;
	var EAN_UPC_6 = EAN_UPC.EAN13;

	var EAN_UPC$1 = /*#__PURE__*/Object.freeze({
		default: index$2,
		__moduleExports: EAN_UPC,
		UPCE: EAN_UPC_1,
		UPC: EAN_UPC_2,
		EAN2: EAN_UPC_3,
		EAN5: EAN_UPC_4,
		EAN8: EAN_UPC_5,
		EAN13: EAN_UPC_6
	});

	var constants$6 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var START_BIN = exports.START_BIN = '1010';
	var END_BIN = exports.END_BIN = '11101';

	var BINARIES = exports.BINARIES = ['00110', '10001', '01001', '11000', '00101', '10100', '01100', '00011', '10010', '01010'];
	});

	var constants$7 = unwrapExports(constants$6);
	var constants_1$2 = constants$6.START_BIN;
	var constants_2$2 = constants$6.END_BIN;
	var constants_3$2 = constants$6.BINARIES;

	var constants$8 = /*#__PURE__*/Object.freeze({
		default: constants$7,
		__moduleExports: constants$6,
		START_BIN: constants_1$2,
		END_BIN: constants_2$2,
		BINARIES: constants_3$2
	});

	var _constants$2 = ( constants$8 && constants$7 ) || constants$8;

	var ITF_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();





	var _Barcode3 = _interopRequireDefault(_Barcode2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } }

	var ITF = function (_Barcode) {
		_inherits(ITF, _Barcode);

		function ITF() {
			_classCallCheck(this, ITF);

			return _possibleConstructorReturn(this, (ITF.__proto__ || Object.getPrototypeOf(ITF)).apply(this, arguments));
		}

		_createClass(ITF, [{
			key: 'valid',
			value: function valid() {
				return this.data.search(/^([0-9]{2})+$/) !== -1;
			}
		}, {
			key: 'encode',
			value: function encode() {
				var _this2 = this;

				// Calculate all the digit pairs
				var encoded = this.data.match(/.{2}/g).map(function (pair) {
					return _this2.encodePair(pair);
				}).join('');

				return {
					data: _constants$2.START_BIN + encoded + _constants$2.END_BIN,
					text: this.text
				};
			}

			// Calculate the data of a number pair

		}, {
			key: 'encodePair',
			value: function encodePair(pair) {
				var second = _constants$2.BINARIES[pair[1]];

				return _constants$2.BINARIES[pair[0]].split('').map(function (first, idx) {
					return (first === '1' ? '111' : '1') + (second[idx] === '1' ? '000' : '0');
				}).join('');
			}
		}]);

		return ITF;
	}(_Barcode3.default);

	exports.default = ITF;
	});

	var ITF = unwrapExports(ITF_1);

	var ITF$1 = /*#__PURE__*/Object.freeze({
		default: ITF,
		__moduleExports: ITF_1
	});

	var _ITF2 = ( ITF$1 && ITF ) || ITF$1;

	var ITF14_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();



	var _ITF3 = _interopRequireDefault(_ITF2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } }

	// Calculate the checksum digit
	var checksum = function checksum(data) {
		var res = data.substr(0, 13).split('').map(function (num) {
			return parseInt(num, 10);
		}).reduce(function (sum, n, idx) {
			return sum + n * (3 - idx % 2 * 2);
		}, 0);

		return Math.ceil(res / 10) * 10 - res;
	};

	var ITF14 = function (_ITF) {
		_inherits(ITF14, _ITF);

		function ITF14(data, options) {
			_classCallCheck(this, ITF14);

			// Add checksum if it does not exist
			if (data.search(/^[0-9]{13}$/) !== -1) {
				data += checksum(data);
			}
			return _possibleConstructorReturn(this, (ITF14.__proto__ || Object.getPrototypeOf(ITF14)).call(this, data, options));
		}

		_createClass(ITF14, [{
			key: 'valid',
			value: function valid() {
				return this.data.search(/^[0-9]{14}$/) !== -1 && +this.data[13] === checksum(this.data);
			}
		}]);

		return ITF14;
	}(_ITF3.default);

	exports.default = ITF14;
	});

	var ITF14 = unwrapExports(ITF14_1);

	var ITF14$1 = /*#__PURE__*/Object.freeze({
		default: ITF14,
		__moduleExports: ITF14_1
	});

	var _ITF3 = ( ITF14$1 && ITF14 ) || ITF14$1;

	var ITF$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ITF14 = exports.ITF = undefined;



	var _ITF2$1 = _interopRequireDefault(_ITF2);



	var _ITF4 = _interopRequireDefault(_ITF3);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.ITF = _ITF2$1.default;
	exports.ITF14 = _ITF4.default;
	});

	var index$3 = unwrapExports(ITF$2);
	var ITF_1$1 = ITF$2.ITF14;
	var ITF_2 = ITF$2.ITF;

	var ITF$3 = /*#__PURE__*/Object.freeze({
		default: index$3,
		__moduleExports: ITF$2,
		ITF14: ITF_1$1,
		ITF: ITF_2
	});

	var MSI_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();



	var _Barcode3 = _interopRequireDefault(_Barcode2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } } // Encoding documentation
	// https://en.wikipedia.org/wiki/MSI_Barcode#Character_set_and_binary_lookup

	var MSI = function (_Barcode) {
		_inherits(MSI, _Barcode);

		function MSI(data, options) {
			_classCallCheck(this, MSI);

			return _possibleConstructorReturn(this, (MSI.__proto__ || Object.getPrototypeOf(MSI)).call(this, data, options));
		}

		_createClass(MSI, [{
			key: "encode",
			value: function encode() {
				// Start bits
				var ret = "110";

				for (var i = 0; i < this.data.length; i++) {
					// Convert the character to binary (always 4 binary digits)
					var digit = parseInt(this.data[i]);
					var bin = digit.toString(2);
					bin = addZeroes(bin, 4 - bin.length);

					// Add 100 for every zero and 110 for every 1
					for (var b = 0; b < bin.length; b++) {
						ret += bin[b] == "0" ? "100" : "110";
					}
				}

				// End bits
				ret += "1001";

				return {
					data: ret,
					text: this.text
				};
			}
		}, {
			key: "valid",
			value: function valid() {
				return this.data.search(/^[0-9]+$/) !== -1;
			}
		}]);

		return MSI;
	}(_Barcode3.default);

	function addZeroes(number, n) {
		for (var i = 0; i < n; i++) {
			number = "0" + number;
		}
		return number;
	}

	exports.default = MSI;
	});

	var MSI = unwrapExports(MSI_1);

	var MSI$1 = /*#__PURE__*/Object.freeze({
		default: MSI,
		__moduleExports: MSI_1
	});

	var checksums = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.mod10 = mod10;
	exports.mod11 = mod11;
	function mod10(number) {
		var sum = 0;
		for (var i = 0; i < number.length; i++) {
			var n = parseInt(number[i]);
			if ((i + number.length) % 2 === 0) {
				sum += n;
			} else {
				sum += n * 2 % 10 + Math.floor(n * 2 / 10);
			}
		}
		return (10 - sum % 10) % 10;
	}

	function mod11(number) {
		var sum = 0;
		var weights = [2, 3, 4, 5, 6, 7];
		for (var i = 0; i < number.length; i++) {
			var n = parseInt(number[number.length - 1 - i]);
			sum += weights[i % weights.length] * n;
		}
		return (11 - sum % 11) % 11;
	}
	});

	var checksums$1 = unwrapExports(checksums);
	var checksums_1 = checksums.mod10;
	var checksums_2 = checksums.mod11;

	var checksums$2 = /*#__PURE__*/Object.freeze({
		default: checksums$1,
		__moduleExports: checksums,
		mod10: checksums_1,
		mod11: checksums_2
	});

	var _MSI2 = ( MSI$1 && MSI ) || MSI$1;

	var _checksums = ( checksums$2 && checksums$1 ) || checksums$2;

	var MSI10_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});



	var _MSI3 = _interopRequireDefault(_MSI2);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } }

	var MSI10 = function (_MSI) {
		_inherits(MSI10, _MSI);

		function MSI10(data, options) {
			_classCallCheck(this, MSI10);

			return _possibleConstructorReturn(this, (MSI10.__proto__ || Object.getPrototypeOf(MSI10)).call(this, data + (0, _checksums.mod10)(data), options));
		}

		return MSI10;
	}(_MSI3.default);

	exports.default = MSI10;
	});

	var MSI10 = unwrapExports(MSI10_1);

	var MSI10$1 = /*#__PURE__*/Object.freeze({
		default: MSI10,
		__moduleExports: MSI10_1
	});

	var MSI11_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});



	var _MSI3 = _interopRequireDefault(_MSI2);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } }

	var MSI11 = function (_MSI) {
		_inherits(MSI11, _MSI);

		function MSI11(data, options) {
			_classCallCheck(this, MSI11);

			return _possibleConstructorReturn(this, (MSI11.__proto__ || Object.getPrototypeOf(MSI11)).call(this, data + (0, _checksums.mod11)(data), options));
		}

		return MSI11;
	}(_MSI3.default);

	exports.default = MSI11;
	});

	var MSI11 = unwrapExports(MSI11_1);

	var MSI11$1 = /*#__PURE__*/Object.freeze({
		default: MSI11,
		__moduleExports: MSI11_1
	});

	var MSI1010_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});



	var _MSI3 = _interopRequireDefault(_MSI2);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } }

	var MSI1010 = function (_MSI) {
		_inherits(MSI1010, _MSI);

		function MSI1010(data, options) {
			_classCallCheck(this, MSI1010);

			data += (0, _checksums.mod10)(data);
			data += (0, _checksums.mod10)(data);
			return _possibleConstructorReturn(this, (MSI1010.__proto__ || Object.getPrototypeOf(MSI1010)).call(this, data, options));
		}

		return MSI1010;
	}(_MSI3.default);

	exports.default = MSI1010;
	});

	var MSI1010 = unwrapExports(MSI1010_1);

	var MSI1010$1 = /*#__PURE__*/Object.freeze({
		default: MSI1010,
		__moduleExports: MSI1010_1
	});

	var MSI1110_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});



	var _MSI3 = _interopRequireDefault(_MSI2);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } }

	var MSI1110 = function (_MSI) {
		_inherits(MSI1110, _MSI);

		function MSI1110(data, options) {
			_classCallCheck(this, MSI1110);

			data += (0, _checksums.mod11)(data);
			data += (0, _checksums.mod10)(data);
			return _possibleConstructorReturn(this, (MSI1110.__proto__ || Object.getPrototypeOf(MSI1110)).call(this, data, options));
		}

		return MSI1110;
	}(_MSI3.default);

	exports.default = MSI1110;
	});

	var MSI1110 = unwrapExports(MSI1110_1);

	var MSI1110$1 = /*#__PURE__*/Object.freeze({
		default: MSI1110,
		__moduleExports: MSI1110_1
	});

	var _MSI3 = ( MSI10$1 && MSI10 ) || MSI10$1;

	var _MSI5 = ( MSI11$1 && MSI11 ) || MSI11$1;

	var _MSI7 = ( MSI1010$1 && MSI1010 ) || MSI1010$1;

	var _MSI9 = ( MSI1110$1 && MSI1110 ) || MSI1110$1;

	var MSI$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MSI1110 = exports.MSI1010 = exports.MSI11 = exports.MSI10 = exports.MSI = undefined;



	var _MSI2$1 = _interopRequireDefault(_MSI2);



	var _MSI4 = _interopRequireDefault(_MSI3);



	var _MSI6 = _interopRequireDefault(_MSI5);



	var _MSI8 = _interopRequireDefault(_MSI7);



	var _MSI10 = _interopRequireDefault(_MSI9);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.MSI = _MSI2$1.default;
	exports.MSI10 = _MSI4.default;
	exports.MSI11 = _MSI6.default;
	exports.MSI1010 = _MSI8.default;
	exports.MSI1110 = _MSI10.default;
	});

	var index$4 = unwrapExports(MSI$2);
	var MSI_1$1 = MSI$2.MSI1110;
	var MSI_2 = MSI$2.MSI1010;
	var MSI_3 = MSI$2.MSI11;
	var MSI_4 = MSI$2.MSI10;
	var MSI_5 = MSI$2.MSI;

	var MSI$3 = /*#__PURE__*/Object.freeze({
		default: index$4,
		__moduleExports: MSI$2,
		MSI1110: MSI_1$1,
		MSI1010: MSI_2,
		MSI11: MSI_3,
		MSI10: MSI_4,
		MSI: MSI_5
	});

	var pharmacode_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.pharmacode = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();



	var _Barcode3 = _interopRequireDefault(_Barcode2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } } // Encoding documentation
	// http://www.gomaro.ch/ftproot/Laetus_PHARMA-CODE.pdf

	var pharmacode = function (_Barcode) {
		_inherits(pharmacode, _Barcode);

		function pharmacode(data, options) {
			_classCallCheck(this, pharmacode);

			var _this = _possibleConstructorReturn(this, (pharmacode.__proto__ || Object.getPrototypeOf(pharmacode)).call(this, data, options));

			_this.number = parseInt(data, 10);
			return _this;
		}

		_createClass(pharmacode, [{
			key: "encode",
			value: function encode() {
				var z = this.number;
				var result = "";

				// http://i.imgur.com/RMm4UDJ.png
				// (source: http://www.gomaro.ch/ftproot/Laetus_PHARMA-CODE.pdf, page: 34)
				while (!isNaN(z) && z != 0) {
					if (z % 2 === 0) {
						// Even
						result = "11100" + result;
						z = (z - 2) / 2;
					} else {
						// Odd
						result = "100" + result;
						z = (z - 1) / 2;
					}
				}

				// Remove the two last zeroes
				result = result.slice(0, -2);

				return {
					data: result,
					text: this.text
				};
			}
		}, {
			key: "valid",
			value: function valid() {
				return this.number >= 3 && this.number <= 131070;
			}
		}]);

		return pharmacode;
	}(_Barcode3.default);

	exports.pharmacode = pharmacode;
	});

	var index$5 = unwrapExports(pharmacode_1);
	var pharmacode_2 = pharmacode_1.pharmacode;

	var pharmacode = /*#__PURE__*/Object.freeze({
		default: index$5,
		__moduleExports: pharmacode_1,
		pharmacode: pharmacode_2
	});

	var codabar_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.codabar = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();



	var _Barcode3 = _interopRequireDefault(_Barcode2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } } // Encoding specification:
	// http://www.barcodeisland.com/codabar.phtml

	var codabar = function (_Barcode) {
		_inherits(codabar, _Barcode);

		function codabar(data, options) {
			_classCallCheck(this, codabar);

			if (data.search(/^[0-9\-\$\:\.\+\/]+$/) === 0) {
				data = "A" + data + "A";
			}

			var _this = _possibleConstructorReturn(this, (codabar.__proto__ || Object.getPrototypeOf(codabar)).call(this, data.toUpperCase(), options));

			_this.text = _this.options.text || _this.text.replace(/[A-D]/g, '');
			return _this;
		}

		_createClass(codabar, [{
			key: "valid",
			value: function valid() {
				return this.data.search(/^[A-D][0-9\-\$\:\.\+\/]+[A-D]$/) !== -1;
			}
		}, {
			key: "encode",
			value: function encode() {
				var result = [];
				var encodings = this.getEncodings();
				for (var i = 0; i < this.data.length; i++) {
					result.push(encodings[this.data.charAt(i)]);
					// for all characters except the last, append a narrow-space ("0")
					if (i !== this.data.length - 1) {
						result.push("0");
					}
				}
				return {
					text: this.text,
					data: result.join('')
				};
			}
		}, {
			key: "getEncodings",
			value: function getEncodings() {
				return {
					"0": "101010011",
					"1": "101011001",
					"2": "101001011",
					"3": "110010101",
					"4": "101101001",
					"5": "110101001",
					"6": "100101011",
					"7": "100101101",
					"8": "100110101",
					"9": "110100101",
					"-": "101001101",
					"$": "101100101",
					":": "1101011011",
					"/": "1101101011",
					".": "1101101101",
					"+": "101100110011",
					"A": "1011001001",
					"B": "1001001011",
					"C": "1010010011",
					"D": "1010011001"
				};
			}
		}]);

		return codabar;
	}(_Barcode3.default);

	exports.codabar = codabar;
	});

	var index$6 = unwrapExports(codabar_1);
	var codabar_2 = codabar_1.codabar;

	var codabar = /*#__PURE__*/Object.freeze({
		default: index$6,
		__moduleExports: codabar_1,
		codabar: codabar_2
	});

	var GenericBarcode_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.GenericBarcode = undefined;

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();



	var _Barcode3 = _interopRequireDefault(_Barcode2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } }

	var GenericBarcode = function (_Barcode) {
		_inherits(GenericBarcode, _Barcode);

		function GenericBarcode(data, options) {
			_classCallCheck(this, GenericBarcode);

			return _possibleConstructorReturn(this, (GenericBarcode.__proto__ || Object.getPrototypeOf(GenericBarcode)).call(this, data, options)); // Sets this.data and this.text
		}

		// Return the corresponding binary numbers for the data provided


		_createClass(GenericBarcode, [{
			key: "encode",
			value: function encode() {
				return {
					data: "10101010101010101010101010101010101010101",
					text: this.text
				};
			}

			// Resturn true/false if the string provided is valid for this encoder

		}, {
			key: "valid",
			value: function valid() {
				return true;
			}
		}]);

		return GenericBarcode;
	}(_Barcode3.default);

	exports.GenericBarcode = GenericBarcode;
	});

	var index$7 = unwrapExports(GenericBarcode_1);
	var GenericBarcode_2 = GenericBarcode_1.GenericBarcode;

	var GenericBarcode = /*#__PURE__*/Object.freeze({
		default: index$7,
		__moduleExports: GenericBarcode_1,
		GenericBarcode: GenericBarcode_2
	});

	var _CODE = ( CODE39 && index ) || CODE39;

	var _CODE2$1 = ( CODE128$3 && index$1 ) || CODE128$3;

	var _EAN_UPC = ( EAN_UPC$1 && index$2 ) || EAN_UPC$1;

	var _ITF = ( ITF$3 && index$3 ) || ITF$3;

	var _MSI = ( MSI$3 && index$4 ) || MSI$3;

	var _pharmacode = ( pharmacode && index$5 ) || pharmacode;

	var _codabar = ( codabar && index$6 ) || codabar;

	var _GenericBarcode = ( GenericBarcode && index$7 ) || GenericBarcode;

	var barcodes = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

















	exports.default = {
		CODE39: _CODE.CODE39,
		CODE128: _CODE2$1.CODE128, CODE128A: _CODE2$1.CODE128A, CODE128B: _CODE2$1.CODE128B, CODE128C: _CODE2$1.CODE128C,
		EAN13: _EAN_UPC.EAN13, EAN8: _EAN_UPC.EAN8, EAN5: _EAN_UPC.EAN5, EAN2: _EAN_UPC.EAN2, UPC: _EAN_UPC.UPC, UPCE: _EAN_UPC.UPCE,
		ITF14: _ITF.ITF14,
		ITF: _ITF.ITF,
		MSI: _MSI.MSI, MSI10: _MSI.MSI10, MSI11: _MSI.MSI11, MSI1010: _MSI.MSI1010, MSI1110: _MSI.MSI1110,
		pharmacode: _pharmacode.pharmacode,
		codabar: _codabar.codabar,
		GenericBarcode: _GenericBarcode.GenericBarcode
	};
	});

	var index$8 = unwrapExports(barcodes);

	var barcodes$1 = /*#__PURE__*/Object.freeze({
		default: index$8,
		__moduleExports: barcodes
	});

	var merge = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	var arguments$1 = arguments;
	 for (var i = 1; i < arguments.length; i++) { var source = arguments$1[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = function (old, replaceObj) {
	  return _extends({}, old, replaceObj);
	};
	});

	var merge$1 = unwrapExports(merge);

	var merge$2 = /*#__PURE__*/Object.freeze({
		default: merge$1,
		__moduleExports: merge
	});

	var linearizeEncodings_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.default = linearizeEncodings;

	// Encodings can be nestled like [[1-1, 1-2], 2, [3-1, 3-2]
	// Convert to [1-1, 1-2, 2, 3-1, 3-2]

	function linearizeEncodings(encodings) {
		var linearEncodings = [];
		function nextLevel(encoded) {
			if (Array.isArray(encoded)) {
				for (var i = 0; i < encoded.length; i++) {
					nextLevel(encoded[i]);
				}
			} else {
				encoded.text = encoded.text || "";
				encoded.data = encoded.data || "";
				linearEncodings.push(encoded);
			}
		}
		nextLevel(encodings);

		return linearEncodings;
	}
	});

	var linearizeEncodings = unwrapExports(linearizeEncodings_1);

	var linearizeEncodings$1 = /*#__PURE__*/Object.freeze({
		default: linearizeEncodings,
		__moduleExports: linearizeEncodings_1
	});

	var fixOptions_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.default = fixOptions;


	function fixOptions(options) {
		// Fix the margins
		options.marginTop = options.marginTop || options.margin;
		options.marginBottom = options.marginBottom || options.margin;
		options.marginRight = options.marginRight || options.margin;
		options.marginLeft = options.marginLeft || options.margin;

		return options;
	}
	});

	var fixOptions = unwrapExports(fixOptions_1);

	var fixOptions$1 = /*#__PURE__*/Object.freeze({
		default: fixOptions,
		__moduleExports: fixOptions_1
	});

	var optionsFromStrings_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.default = optionsFromStrings;

	// Convert string to integers/booleans where it should be

	function optionsFromStrings(options) {
		var intOptions = ["width", "height", "textMargin", "fontSize", "margin", "marginTop", "marginBottom", "marginLeft", "marginRight"];

		for (var intOption in intOptions) {
			if (intOptions.hasOwnProperty(intOption)) {
				intOption = intOptions[intOption];
				if (typeof options[intOption] === "string") {
					options[intOption] = parseInt(options[intOption], 10);
				}
			}
		}

		if (typeof options["displayValue"] === "string") {
			options["displayValue"] = options["displayValue"] != "false";
		}

		return options;
	}
	});

	var optionsFromStrings = unwrapExports(optionsFromStrings_1);

	var optionsFromStrings$1 = /*#__PURE__*/Object.freeze({
		default: optionsFromStrings,
		__moduleExports: optionsFromStrings_1
	});

	var defaults_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var defaults = {
		width: 2,
		height: 100,
		format: "auto",
		displayValue: true,
		fontOptions: "",
		font: "monospace",
		text: undefined,
		textAlign: "center",
		textPosition: "bottom",
		textMargin: 2,
		fontSize: 20,
		background: "#ffffff",
		lineColor: "#000000",
		margin: 10,
		marginTop: undefined,
		marginBottom: undefined,
		marginLeft: undefined,
		marginRight: undefined,
		valid: function valid() {}
	};

	exports.default = defaults;
	});

	var defaults = unwrapExports(defaults_1);

	var defaults$1 = /*#__PURE__*/Object.freeze({
		default: defaults,
		__moduleExports: defaults_1
	});

	var _optionsFromStrings = ( optionsFromStrings$1 && optionsFromStrings ) || optionsFromStrings$1;

	var _defaults = ( defaults$1 && defaults ) || defaults$1;

	var getOptionsFromElement_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});



	var _optionsFromStrings2 = _interopRequireDefault(_optionsFromStrings);



	var _defaults2 = _interopRequireDefault(_defaults);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getOptionsFromElement(element) {
		var options = {};
		for (var property in _defaults2.default) {
			if (_defaults2.default.hasOwnProperty(property)) {
				// jsbarcode-*
				if (element.hasAttribute("jsbarcode-" + property.toLowerCase())) {
					options[property] = element.getAttribute("jsbarcode-" + property.toLowerCase());
				}

				// data-*
				if (element.hasAttribute("data-" + property.toLowerCase())) {
					options[property] = element.getAttribute("data-" + property.toLowerCase());
				}
			}
		}

		options["value"] = element.getAttribute("jsbarcode-value") || element.getAttribute("data-value");

		// Since all atributes are string they need to be converted to integers
		options = (0, _optionsFromStrings2.default)(options);

		return options;
	}

	exports.default = getOptionsFromElement;
	});

	var getOptionsFromElement = unwrapExports(getOptionsFromElement_1);

	var getOptionsFromElement$1 = /*#__PURE__*/Object.freeze({
		default: getOptionsFromElement,
		__moduleExports: getOptionsFromElement_1
	});

	var _merge = ( merge$2 && merge$1 ) || merge$2;

	var shared = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.getTotalWidthOfEncodings = exports.calculateEncodingAttributes = exports.getBarcodePadding = exports.getEncodingHeight = exports.getMaximumHeightOfEncodings = undefined;



	var _merge2 = _interopRequireDefault(_merge);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getEncodingHeight(encoding, options) {
		return options.height + (options.displayValue && encoding.text.length > 0 ? options.fontSize + options.textMargin : 0) + options.marginTop + options.marginBottom;
	}

	function getBarcodePadding(textWidth, barcodeWidth, options) {
		if (options.displayValue && barcodeWidth < textWidth) {
			if (options.textAlign == "center") {
				return Math.floor((textWidth - barcodeWidth) / 2);
			} else if (options.textAlign == "left") {
				return 0;
			} else if (options.textAlign == "right") {
				return Math.floor(textWidth - barcodeWidth);
			}
		}
		return 0;
	}

	function calculateEncodingAttributes(encodings, barcodeOptions, context) {
		for (var i = 0; i < encodings.length; i++) {
			var encoding = encodings[i];
			var options = (0, _merge2.default)(barcodeOptions, encoding.options);

			// Calculate the width of the encoding
			var textWidth;
			if (options.displayValue) {
				textWidth = messureText(encoding.text, options, context);
			} else {
				textWidth = 0;
			}

			var barcodeWidth = encoding.data.length * options.width;
			encoding.width = Math.ceil(Math.max(textWidth, barcodeWidth));

			encoding.height = getEncodingHeight(encoding, options);

			encoding.barcodePadding = getBarcodePadding(textWidth, barcodeWidth, options);
		}
	}

	function getTotalWidthOfEncodings(encodings) {
		var totalWidth = 0;
		for (var i = 0; i < encodings.length; i++) {
			totalWidth += encodings[i].width;
		}
		return totalWidth;
	}

	function getMaximumHeightOfEncodings(encodings) {
		var maxHeight = 0;
		for (var i = 0; i < encodings.length; i++) {
			if (encodings[i].height > maxHeight) {
				maxHeight = encodings[i].height;
			}
		}
		return maxHeight;
	}

	function messureText(string, options, context) {
		var ctx;

		if (context) {
			ctx = context;
		} else if (typeof document !== "undefined") {
			ctx = document.createElement("canvas").getContext("2d");
		} else {
			// If the text cannot be messured we will return 0.
			// This will make some barcode with big text render incorrectly
			return 0;
		}
		ctx.font = options.fontOptions + " " + options.fontSize + "px " + options.font;

		// Calculate the width of the encoding
		var size = ctx.measureText(string).width;

		return size;
	}

	exports.getMaximumHeightOfEncodings = getMaximumHeightOfEncodings;
	exports.getEncodingHeight = getEncodingHeight;
	exports.getBarcodePadding = getBarcodePadding;
	exports.calculateEncodingAttributes = calculateEncodingAttributes;
	exports.getTotalWidthOfEncodings = getTotalWidthOfEncodings;
	});

	var shared$1 = unwrapExports(shared);
	var shared_1 = shared.getTotalWidthOfEncodings;
	var shared_2 = shared.calculateEncodingAttributes;
	var shared_3 = shared.getBarcodePadding;
	var shared_4 = shared.getEncodingHeight;
	var shared_5 = shared.getMaximumHeightOfEncodings;

	var shared$2 = /*#__PURE__*/Object.freeze({
		default: shared$1,
		__moduleExports: shared,
		getTotalWidthOfEncodings: shared_1,
		calculateEncodingAttributes: shared_2,
		getBarcodePadding: shared_3,
		getEncodingHeight: shared_4,
		getMaximumHeightOfEncodings: shared_5
	});

	var _shared = ( shared$2 && shared$1 ) || shared$2;

	var canvas = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();



	var _merge2 = _interopRequireDefault(_merge);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var CanvasRenderer = function () {
		function CanvasRenderer(canvas, encodings, options) {
			_classCallCheck(this, CanvasRenderer);

			this.canvas = canvas;
			this.encodings = encodings;
			this.options = options;
		}

		_createClass(CanvasRenderer, [{
			key: "render",
			value: function render() {
				// Abort if the browser does not support HTML5 canvas
				if (!this.canvas.getContext) {
					throw new Error('The browser does not support canvas.');
				}

				this.prepareCanvas();
				for (var i = 0; i < this.encodings.length; i++) {
					var encodingOptions = (0, _merge2.default)(this.options, this.encodings[i].options);

					this.drawCanvasBarcode(encodingOptions, this.encodings[i]);
					this.drawCanvasText(encodingOptions, this.encodings[i]);

					this.moveCanvasDrawing(this.encodings[i]);
				}

				this.restoreCanvas();
			}
		}, {
			key: "prepareCanvas",
			value: function prepareCanvas() {
				// Get the canvas context
				var ctx = this.canvas.getContext("2d");

				ctx.save();

				(0, _shared.calculateEncodingAttributes)(this.encodings, this.options, ctx);
				var totalWidth = (0, _shared.getTotalWidthOfEncodings)(this.encodings);
				var maxHeight = (0, _shared.getMaximumHeightOfEncodings)(this.encodings);

				this.canvas.width = totalWidth + this.options.marginLeft + this.options.marginRight;

				this.canvas.height = maxHeight;

				// Paint the canvas
				ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
				if (this.options.background) {
					ctx.fillStyle = this.options.background;
					ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
				}

				ctx.translate(this.options.marginLeft, 0);
			}
		}, {
			key: "drawCanvasBarcode",
			value: function drawCanvasBarcode(options, encoding) {
				// Get the canvas context
				var ctx = this.canvas.getContext("2d");

				var binary = encoding.data;

				// Creates the barcode out of the encoded binary
				var yFrom;
				if (options.textPosition == "top") {
					yFrom = options.marginTop + options.fontSize + options.textMargin;
				} else {
					yFrom = options.marginTop;
				}

				ctx.fillStyle = options.lineColor;

				for (var b = 0; b < binary.length; b++) {
					var x = b * options.width + encoding.barcodePadding;

					if (binary[b] === "1") {
						ctx.fillRect(x, yFrom, options.width, options.height);
					} else if (binary[b]) {
						ctx.fillRect(x, yFrom, options.width, options.height * binary[b]);
					}
				}
			}
		}, {
			key: "drawCanvasText",
			value: function drawCanvasText(options, encoding) {
				// Get the canvas context
				var ctx = this.canvas.getContext("2d");

				var font = options.fontOptions + " " + options.fontSize + "px " + options.font;

				// Draw the text if displayValue is set
				if (options.displayValue) {
					var x, y;

					if (options.textPosition == "top") {
						y = options.marginTop + options.fontSize - options.textMargin;
					} else {
						y = options.height + options.textMargin + options.marginTop + options.fontSize;
					}

					ctx.font = font;

					// Draw the text in the correct X depending on the textAlign option
					if (options.textAlign == "left" || encoding.barcodePadding > 0) {
						x = 0;
						ctx.textAlign = 'left';
					} else if (options.textAlign == "right") {
						x = encoding.width - 1;
						ctx.textAlign = 'right';
					}
					// In all other cases, center the text
					else {
							x = encoding.width / 2;
							ctx.textAlign = 'center';
						}

					ctx.fillText(encoding.text, x, y);
				}
			}
		}, {
			key: "moveCanvasDrawing",
			value: function moveCanvasDrawing(encoding) {
				var ctx = this.canvas.getContext("2d");

				ctx.translate(encoding.width, 0);
			}
		}, {
			key: "restoreCanvas",
			value: function restoreCanvas() {
				// Get the canvas context
				var ctx = this.canvas.getContext("2d");

				ctx.restore();
			}
		}]);

		return CanvasRenderer;
	}();

	exports.default = CanvasRenderer;
	});

	var canvas$1 = unwrapExports(canvas);

	var canvas$2 = /*#__PURE__*/Object.freeze({
		default: canvas$1,
		__moduleExports: canvas
	});

	var svg = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();



	var _merge2 = _interopRequireDefault(_merge);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var svgns = "http://www.w3.org/2000/svg";

	var SVGRenderer = function () {
		function SVGRenderer(svg, encodings, options) {
			_classCallCheck(this, SVGRenderer);

			this.svg = svg;
			this.encodings = encodings;
			this.options = options;
			this.document = options.xmlDocument || document;
		}

		_createClass(SVGRenderer, [{
			key: "render",
			value: function render() {
				var currentX = this.options.marginLeft;

				this.prepareSVG();
				for (var i = 0; i < this.encodings.length; i++) {
					var encoding = this.encodings[i];
					var encodingOptions = (0, _merge2.default)(this.options, encoding.options);

					var group = this.createGroup(currentX, encodingOptions.marginTop, this.svg);

					this.setGroupOptions(group, encodingOptions);

					this.drawSvgBarcode(group, encodingOptions, encoding);
					this.drawSVGText(group, encodingOptions, encoding);

					currentX += encoding.width;
				}
			}
		}, {
			key: "prepareSVG",
			value: function prepareSVG() {
				// Clear the SVG
				while (this.svg.firstChild) {
					this.svg.removeChild(this.svg.firstChild);
				}

				(0, _shared.calculateEncodingAttributes)(this.encodings, this.options);
				var totalWidth = (0, _shared.getTotalWidthOfEncodings)(this.encodings);
				var maxHeight = (0, _shared.getMaximumHeightOfEncodings)(this.encodings);

				var width = totalWidth + this.options.marginLeft + this.options.marginRight;
				this.setSvgAttributes(width, maxHeight);

				if (this.options.background) {
					this.drawRect(0, 0, width, maxHeight, this.svg).setAttribute("style", "fill:" + this.options.background + ";");
				}
			}
		}, {
			key: "drawSvgBarcode",
			value: function drawSvgBarcode(parent, options, encoding) {
				var binary = encoding.data;

				// Creates the barcode out of the encoded binary
				var yFrom;
				if (options.textPosition == "top") {
					yFrom = options.fontSize + options.textMargin;
				} else {
					yFrom = 0;
				}

				var barWidth = 0;
				var x = 0;
				for (var b = 0; b < binary.length; b++) {
					x = b * options.width + encoding.barcodePadding;

					if (binary[b] === "1") {
						barWidth++;
					} else if (barWidth > 0) {
						this.drawRect(x - options.width * barWidth, yFrom, options.width * barWidth, options.height, parent);
						barWidth = 0;
					}
				}

				// Last draw is needed since the barcode ends with 1
				if (barWidth > 0) {
					this.drawRect(x - options.width * (barWidth - 1), yFrom, options.width * barWidth, options.height, parent);
				}
			}
		}, {
			key: "drawSVGText",
			value: function drawSVGText(parent, options, encoding) {
				var textElem = this.document.createElementNS(svgns, 'text');

				// Draw the text if displayValue is set
				if (options.displayValue) {
					var x, y;

					textElem.setAttribute("style", "font:" + options.fontOptions + " " + options.fontSize + "px " + options.font);

					if (options.textPosition == "top") {
						y = options.fontSize - options.textMargin;
					} else {
						y = options.height + options.textMargin + options.fontSize;
					}

					// Draw the text in the correct X depending on the textAlign option
					if (options.textAlign == "left" || encoding.barcodePadding > 0) {
						x = 0;
						textElem.setAttribute("text-anchor", "start");
					} else if (options.textAlign == "right") {
						x = encoding.width - 1;
						textElem.setAttribute("text-anchor", "end");
					}
					// In all other cases, center the text
					else {
							x = encoding.width / 2;
							textElem.setAttribute("text-anchor", "middle");
						}

					textElem.setAttribute("x", x);
					textElem.setAttribute("y", y);

					textElem.appendChild(this.document.createTextNode(encoding.text));

					parent.appendChild(textElem);
				}
			}
		}, {
			key: "setSvgAttributes",
			value: function setSvgAttributes(width, height) {
				var svg = this.svg;
				svg.setAttribute("width", width + "px");
				svg.setAttribute("height", height + "px");
				svg.setAttribute("x", "0px");
				svg.setAttribute("y", "0px");
				svg.setAttribute("viewBox", "0 0 " + width + " " + height);

				svg.setAttribute("xmlns", svgns);
				svg.setAttribute("version", "1.1");

				svg.setAttribute("style", "transform: translate(0,0)");
			}
		}, {
			key: "createGroup",
			value: function createGroup(x, y, parent) {
				var group = this.document.createElementNS(svgns, 'g');
				group.setAttribute("transform", "translate(" + x + ", " + y + ")");

				parent.appendChild(group);

				return group;
			}
		}, {
			key: "setGroupOptions",
			value: function setGroupOptions(group, options) {
				group.setAttribute("style", "fill:" + options.lineColor + ";");
			}
		}, {
			key: "drawRect",
			value: function drawRect(x, y, width, height, parent) {
				var rect = this.document.createElementNS(svgns, 'rect');

				rect.setAttribute("x", x);
				rect.setAttribute("y", y);
				rect.setAttribute("width", width);
				rect.setAttribute("height", height);

				parent.appendChild(rect);

				return rect;
			}
		}]);

		return SVGRenderer;
	}();

	exports.default = SVGRenderer;
	});

	var svg$1 = unwrapExports(svg);

	var svg$2 = /*#__PURE__*/Object.freeze({
		default: svg$1,
		__moduleExports: svg
	});

	var object = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ObjectRenderer = function () {
		function ObjectRenderer(object, encodings, options) {
			_classCallCheck(this, ObjectRenderer);

			this.object = object;
			this.encodings = encodings;
			this.options = options;
		}

		_createClass(ObjectRenderer, [{
			key: "render",
			value: function render() {
				this.object.encodings = this.encodings;
			}
		}]);

		return ObjectRenderer;
	}();

	exports.default = ObjectRenderer;
	});

	var object$1 = unwrapExports(object);

	var object$2 = /*#__PURE__*/Object.freeze({
		default: object$1,
		__moduleExports: object
	});

	var _canvas = ( canvas$2 && canvas$1 ) || canvas$2;

	var _svg = ( svg$2 && svg$1 ) || svg$2;

	var _object = ( object$2 && object$1 ) || object$2;

	var renderers = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _canvas2 = _interopRequireDefault(_canvas);



	var _svg2 = _interopRequireDefault(_svg);



	var _object2 = _interopRequireDefault(_object);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = { CanvasRenderer: _canvas2.default, SVGRenderer: _svg2.default, ObjectRenderer: _object2.default };
	});

	var index$9 = unwrapExports(renderers);

	var renderers$1 = /*#__PURE__*/Object.freeze({
		default: index$9,
		__moduleExports: renderers
	});

	var exceptions = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) { Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } }

	var InvalidInputException = function (_Error) {
		_inherits(InvalidInputException, _Error);

		function InvalidInputException(symbology, input) {
			_classCallCheck(this, InvalidInputException);

			var _this = _possibleConstructorReturn(this, (InvalidInputException.__proto__ || Object.getPrototypeOf(InvalidInputException)).call(this));

			_this.name = "InvalidInputException";

			_this.symbology = symbology;
			_this.input = input;

			_this.message = '"' + _this.input + '" is not a valid input for ' + _this.symbology;
			return _this;
		}

		return InvalidInputException;
	}(Error);

	var InvalidElementException = function (_Error2) {
		_inherits(InvalidElementException, _Error2);

		function InvalidElementException() {
			_classCallCheck(this, InvalidElementException);

			var _this2 = _possibleConstructorReturn(this, (InvalidElementException.__proto__ || Object.getPrototypeOf(InvalidElementException)).call(this));

			_this2.name = "InvalidElementException";
			_this2.message = "Not supported type to render on";
			return _this2;
		}

		return InvalidElementException;
	}(Error);

	var NoElementException = function (_Error3) {
		_inherits(NoElementException, _Error3);

		function NoElementException() {
			_classCallCheck(this, NoElementException);

			var _this3 = _possibleConstructorReturn(this, (NoElementException.__proto__ || Object.getPrototypeOf(NoElementException)).call(this));

			_this3.name = "NoElementException";
			_this3.message = "No element to render on.";
			return _this3;
		}

		return NoElementException;
	}(Error);

	exports.InvalidInputException = InvalidInputException;
	exports.InvalidElementException = InvalidElementException;
	exports.NoElementException = NoElementException;
	});

	var exceptions$1 = unwrapExports(exceptions);
	var exceptions_1 = exceptions.InvalidInputException;
	var exceptions_2 = exceptions.InvalidElementException;
	var exceptions_3 = exceptions.NoElementException;

	var exceptions$2 = /*#__PURE__*/Object.freeze({
		default: exceptions$1,
		__moduleExports: exceptions,
		InvalidInputException: exceptions_1,
		InvalidElementException: exceptions_2,
		NoElementException: exceptions_3
	});

	var _getOptionsFromElement = ( getOptionsFromElement$1 && getOptionsFromElement ) || getOptionsFromElement$1;

	var _renderers = ( renderers$1 && index$9 ) || renderers$1;

	var _exceptions = ( exceptions$2 && exceptions$1 ) || exceptions$2;

	var getRenderProperties_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /* global HTMLImageElement */
	/* global HTMLCanvasElement */
	/* global SVGElement */



	var _getOptionsFromElement2 = _interopRequireDefault(_getOptionsFromElement);



	var _renderers2 = _interopRequireDefault(_renderers);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Takes an element and returns an object with information about how
	// it should be rendered
	// This could also return an array with these objects
	// {
	//   element: The element that the renderer should draw on
	//   renderer: The name of the renderer
	//   afterRender (optional): If something has to done after the renderer
	//     completed, calls afterRender (function)
	//   options (optional): Options that can be defined in the element
	// }

	function getRenderProperties(element) {
		// If the element is a string, query select call again
		if (typeof element === "string") {
			return querySelectedRenderProperties(element);
		}
		// If element is array. Recursivly call with every object in the array
		else if (Array.isArray(element)) {
				var returnArray = [];
				for (var i = 0; i < element.length; i++) {
					returnArray.push(getRenderProperties(element[i]));
				}
				return returnArray;
			}
			// If element, render on canvas and set the uri as src
			else if (typeof HTMLCanvasElement !== 'undefined' && element instanceof HTMLImageElement) {
					return newCanvasRenderProperties(element);
				}
				// If SVG
				else if (element && element.nodeName === 'svg' || typeof SVGElement !== 'undefined' && element instanceof SVGElement) {
						return {
							element: element,
							options: (0, _getOptionsFromElement2.default)(element),
							renderer: _renderers2.default.SVGRenderer
						};
					}
					// If canvas (in browser)
					else if (typeof HTMLCanvasElement !== 'undefined' && element instanceof HTMLCanvasElement) {
							return {
								element: element,
								options: (0, _getOptionsFromElement2.default)(element),
								renderer: _renderers2.default.CanvasRenderer
							};
						}
						// If canvas (in node)
						else if (element && element.getContext) {
								return {
									element: element,
									renderer: _renderers2.default.CanvasRenderer
								};
							} else if (element && (typeof element === "undefined" ? "undefined" : _typeof(element)) === 'object' && !element.nodeName) {
								return {
									element: element,
									renderer: _renderers2.default.ObjectRenderer
								};
							} else {
								throw new _exceptions.InvalidElementException();
							}
	}

	function querySelectedRenderProperties(string) {
		var selector = document.querySelectorAll(string);
		if (selector.length === 0) {
			return undefined;
		} else {
			var returnArray = [];
			for (var i = 0; i < selector.length; i++) {
				returnArray.push(getRenderProperties(selector[i]));
			}
			return returnArray;
		}
	}

	function newCanvasRenderProperties(imgElement) {
		var canvas = document.createElement('canvas');
		return {
			element: canvas,
			options: (0, _getOptionsFromElement2.default)(imgElement),
			renderer: _renderers2.default.CanvasRenderer,
			afterRender: function afterRender() {
				imgElement.setAttribute("src", canvas.toDataURL());
			}
		};
	}

	exports.default = getRenderProperties;
	});

	var getRenderProperties = unwrapExports(getRenderProperties_1);

	var getRenderProperties$1 = /*#__PURE__*/Object.freeze({
		default: getRenderProperties,
		__moduleExports: getRenderProperties_1
	});

	var ErrorHandler_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) { descriptor.writable = true; } Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) { defineProperties(Constructor.prototype, protoProps); } if (staticProps) { defineProperties(Constructor, staticProps); } return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/*eslint no-console: 0 */

	var ErrorHandler = function () {
		function ErrorHandler(api) {
			_classCallCheck(this, ErrorHandler);

			this.api = api;
		}

		_createClass(ErrorHandler, [{
			key: "handleCatch",
			value: function handleCatch(e) {
				// If babel supported extending of Error in a correct way instanceof would be used here
				if (e.name === "InvalidInputException") {
					if (this.api._options.valid !== this.api._defaults.valid) {
						this.api._options.valid(false);
					} else {
						throw e.message;
					}
				} else {
					throw e;
				}

				this.api.render = function () {};
			}
		}, {
			key: "wrapBarcodeCall",
			value: function wrapBarcodeCall(func) {
				try {
					var result = func.apply(undefined, arguments);
					this.api._options.valid(true);
					return result;
				} catch (e) {
					this.handleCatch(e);

					return this.api;
				}
			}
		}]);

		return ErrorHandler;
	}();

	exports.default = ErrorHandler;
	});

	var ErrorHandler = unwrapExports(ErrorHandler_1);

	var ErrorHandler$1 = /*#__PURE__*/Object.freeze({
		default: ErrorHandler,
		__moduleExports: ErrorHandler_1
	});

	var _barcodes = ( barcodes$1 && index$8 ) || barcodes$1;

	var _linearizeEncodings = ( linearizeEncodings$1 && linearizeEncodings ) || linearizeEncodings$1;

	var _fixOptions = ( fixOptions$1 && fixOptions ) || fixOptions$1;

	var _getRenderProperties = ( getRenderProperties$1 && getRenderProperties ) || getRenderProperties$1;

	var _ErrorHandler = ( ErrorHandler$1 && ErrorHandler ) || ErrorHandler$1;

	var JsBarcode_1 = createCommonjsModule(function (module) {



	var _barcodes2 = _interopRequireDefault(_barcodes);



	var _merge2 = _interopRequireDefault(_merge);



	var _linearizeEncodings2 = _interopRequireDefault(_linearizeEncodings);



	var _fixOptions2 = _interopRequireDefault(_fixOptions);



	var _getRenderProperties2 = _interopRequireDefault(_getRenderProperties);



	var _optionsFromStrings2 = _interopRequireDefault(_optionsFromStrings);



	var _ErrorHandler2 = _interopRequireDefault(_ErrorHandler);





	var _defaults2 = _interopRequireDefault(_defaults);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// The protype of the object returned from the JsBarcode() call


	// Help functions
	var API = function API() {};

	// The first call of the library API
	// Will return an object with all barcodes calls and the data that is used
	// by the renderers


	// Default values


	// Exceptions
	// Import all the barcodes
	var JsBarcode = function JsBarcode(element, text, options) {
		var api = new API();

		if (typeof element === "undefined") {
			throw Error("No element to render on was provided.");
		}

		// Variables that will be pased through the API calls
		api._renderProperties = (0, _getRenderProperties2.default)(element);
		api._encodings = [];
		api._options = _defaults2.default;
		api._errorHandler = new _ErrorHandler2.default(api);

		// If text is set, use the simple syntax (render the barcode directly)
		if (typeof text !== "undefined") {
			options = options || {};

			if (!options.format) {
				options.format = autoSelectBarcode();
			}

			api.options(options)[options.format](text, options).render();
		}

		return api;
	};

	// To make tests work TODO: remove
	JsBarcode.getModule = function (name) {
		return _barcodes2.default[name];
	};

	// Register all barcodes
	for (var name in _barcodes2.default) {
		if (_barcodes2.default.hasOwnProperty(name)) {
			// Security check if the propery is a prototype property
			registerBarcode(_barcodes2.default, name);
		}
	}
	function registerBarcode(barcodes, name) {
		API.prototype[name] = API.prototype[name.toUpperCase()] = API.prototype[name.toLowerCase()] = function (text, options) {
			var api = this;
			return api._errorHandler.wrapBarcodeCall(function () {
				// Ensure text is options.text
				options.text = typeof options.text === 'undefined' ? undefined : '' + options.text;

				var newOptions = (0, _merge2.default)(api._options, options);
				newOptions = (0, _optionsFromStrings2.default)(newOptions);
				var Encoder = barcodes[name];
				var encoded = encode(text, Encoder, newOptions);
				api._encodings.push(encoded);

				return api;
			});
		};
	}

	// encode() handles the Encoder call and builds the binary string to be rendered
	function encode(text, Encoder, options) {
		// Ensure that text is a string
		text = "" + text;

		var encoder = new Encoder(text, options);

		// If the input is not valid for the encoder, throw error.
		// If the valid callback option is set, call it instead of throwing error
		if (!encoder.valid()) {
			throw new _exceptions.InvalidInputException(encoder.constructor.name, text);
		}

		// Make a request for the binary data (and other infromation) that should be rendered
		var encoded = encoder.encode();

		// Encodings can be nestled like [[1-1, 1-2], 2, [3-1, 3-2]
		// Convert to [1-1, 1-2, 2, 3-1, 3-2]
		encoded = (0, _linearizeEncodings2.default)(encoded);

		// Merge
		for (var i = 0; i < encoded.length; i++) {
			encoded[i].options = (0, _merge2.default)(options, encoded[i].options);
		}

		return encoded;
	}

	function autoSelectBarcode() {
		// If CODE128 exists. Use it
		if (_barcodes2.default["CODE128"]) {
			return "CODE128";
		}

		// Else, take the first (probably only) barcode
		return Object.keys(_barcodes2.default)[0];
	}

	// Sets global encoder options
	// Added to the api by the JsBarcode function
	API.prototype.options = function (options) {
		this._options = (0, _merge2.default)(this._options, options);
		return this;
	};

	// Will create a blank space (usually in between barcodes)
	API.prototype.blank = function (size) {
		var zeroes = new Array(size + 1).join("0");
		this._encodings.push({ data: zeroes });
		return this;
	};

	// Initialize JsBarcode on all HTML elements defined.
	API.prototype.init = function () {
		// Should do nothing if no elements where found
		if (!this._renderProperties) {
			return;
		}

		// Make sure renderProperies is an array
		if (!Array.isArray(this._renderProperties)) {
			this._renderProperties = [this._renderProperties];
		}

		var renderProperty;
		for (var i in this._renderProperties) {
			renderProperty = this._renderProperties[i];
			var options = (0, _merge2.default)(this._options, renderProperty.options);

			if (options.format == "auto") {
				options.format = autoSelectBarcode();
			}

			this._errorHandler.wrapBarcodeCall(function () {
				var text = options.value;
				var Encoder = _barcodes2.default[options.format.toUpperCase()];
				var encoded = encode(text, Encoder, options);

				render(renderProperty, encoded, options);
			});
		}
	};

	// The render API call. Calls the real render function.
	API.prototype.render = function () {
		if (!this._renderProperties) {
			throw new _exceptions.NoElementException();
		}

		if (Array.isArray(this._renderProperties)) {
			for (var i = 0; i < this._renderProperties.length; i++) {
				render(this._renderProperties[i], this._encodings, this._options);
			}
		} else {
			render(this._renderProperties, this._encodings, this._options);
		}

		return this;
	};

	API.prototype._defaults = _defaults2.default;

	// Prepares the encodings and calls the renderer
	function render(renderProperties, encodings, options) {
		encodings = (0, _linearizeEncodings2.default)(encodings);

		for (var i = 0; i < encodings.length; i++) {
			encodings[i].options = (0, _merge2.default)(options, encodings[i].options);
			(0, _fixOptions2.default)(encodings[i].options);
		}

		(0, _fixOptions2.default)(options);

		var Renderer = renderProperties.renderer;
		var renderer = new Renderer(renderProperties.element, encodings, options);
		renderer.render();

		if (renderProperties.afterRender) {
			renderProperties.afterRender();
		}
	}

	// Export to browser
	if (typeof window !== "undefined") {
		window.JsBarcode = JsBarcode;
	}

	// Export to jQuery
	/*global jQuery */
	if (typeof jQuery !== 'undefined') {
		jQuery.fn.JsBarcode = function (content, options) {
			var elementArray = [];
			jQuery(this).each(function () {
				elementArray.push(this);
			});
			return JsBarcode(elementArray, content, options);
		};
	}

	// Export to commonJS
	module.exports = JsBarcode;
	});

	var JsBarcode = unwrapExports(JsBarcode_1);

	frappe.ui.form.ControlBarcode = frappe.ui.form.ControlData.extend({
		make_wrapper: function make_wrapper() {
			// Create the elements for barcode area
			this._super();

			this.default_svg = '<svg height=80></svg>';
			var $input_wrapper = this.$wrapper.find('.control-input-wrapper');
			this.barcode_area = $(
				("<div class=\"barcode-wrapper border\">" + (this.default_svg) + "</div>")
			);
			this.barcode_area.appendTo($input_wrapper);
		},

		parse: function parse(value) {
			// Parse raw value
			if (value) {
				if (value.startsWith('<svg')) {
					return value;
				}
				return this.get_barcode_html(value);
			}
			return '';
		},

		set_formatted_input: function set_formatted_input(value) {
			// Set values to display
			var svg = value;
			var barcode_value = '';

			if (value && value.startsWith('<svg')) {
				barcode_value = $(svg).attr('data-barcode-value');
			}

			if (!barcode_value && this.doc) {
				svg = this.get_barcode_html(value);
				this.doc[this.df.fieldname] = svg;
			}

			this.$input.val(barcode_value || value);
			this.barcode_area.html(svg || this.default_svg);
		},

		get_barcode_html: function get_barcode_html(value) {
			if (value) {
				// Get svg
				var svg = this.barcode_area.find('svg')[0];
				JsBarcode(svg, value, this.get_options(value));
				$(svg).attr('data-barcode-value', value);
				return this.barcode_area.html();
			}
		},

		get_options: function get_options(value) {
			// get JsBarcode options
			var options = JSON.parse('{ "height" : 40 }');
			if (frappe.utils.is_json(this.df.options)) {
				options = JSON.parse(this.df.options);
				if (options.format && options.format === 'EAN') {
					options.format = value.length == 8 ? 'EAN8' : 'EAN13';
				}

				if (options.valueField) {
					// Set companion field value
					this.frm && this.frm.set_value(options.valueField, value);
				}
			}
			return options;
		}
	});

	frappe.ui.form.ControlGeolocation = frappe.ui.form.ControlData.extend({
		horizontal: false,

		make_wrapper: function make_wrapper() {
			var this$1 = this;

			// Create the elements for map area
			this._super();

			var $input_wrapper = this.$wrapper.find('.control-input-wrapper');
			this.map_id = frappe.dom.get_unique_id();
			this.map_area = $(
				"<div class=\"map-wrapper border\">\n\t\t\t\t<div id=\"" + this.map_id + "\" style=\"min-height: 400px; z-index: 1; max-width:100%\"></div>\n\t\t\t</div>"
			);
			this.map_area.prependTo($input_wrapper);
			this.$wrapper.find('.control-input').addClass("hidden");

			if ($input_wrapper.is(':visible')) {
				this.make_map();
			} else {
				$(document).on('frappe.ui.Dialog:shown', function () {
					this$1.make_map();
				});
			}
		},

		make_map: function make_map() {
			this.bind_leaflet_map();
			this.bind_leaflet_draw_control();
			this.bind_leaflet_locate_control();
			this.bind_leaflet_refresh_button();
		},

		format_for_input: function format_for_input(value) {
			if (!this.map) { return; }
			// render raw value from db into map
			this.clear_editable_layers();
			if(value) {
				var data_layers = new L.FeatureGroup()
					.addLayer(L.geoJson(JSON.parse(value),{
						pointToLayer: function(geoJsonPoint, latlng) {
							if (geoJsonPoint.properties.point_type == "circle"){
								return L.circle(latlng, {radius: geoJsonPoint.properties.radius});
							} else if (geoJsonPoint.properties.point_type == "circlemarker") {
								return L.circleMarker(latlng, {radius: geoJsonPoint.properties.radius});
							}
							else {
								return L.marker(latlng);
							}
						}
					}));
				this.add_non_group_layers(data_layers, this.editableLayers);
				try {
					this.map.flyToBounds(this.editableLayers.getBounds(), {
						padding: [50,50]
					});
				}
				catch(err) {
					// suppress error if layer has a point.
				}
				this.editableLayers.addTo(this.map);
				this.map._onResize();
			} else if ((value===undefined) || (value == JSON.stringify(new L.FeatureGroup().toGeoJSON()))) {
				this.locate_control.start();
			}
		},

		bind_leaflet_map: function bind_leaflet_map() {
			var circleToGeoJSON = L.Circle.prototype.toGeoJSON;
			L.Circle.include({
				toGeoJSON: function() {
					var feature = circleToGeoJSON.call(this);
					feature.properties = {
						point_type: 'circle',
						radius: this.getRadius()
					};
					return feature;
				}
			});

			L.CircleMarker.include({
				toGeoJSON: function() {
					var feature = circleToGeoJSON.call(this);
					feature.properties = {
						point_type: 'circlemarker',
						radius: this.getRadius()
					};
					return feature;
				}
			});

			L.Icon.Default.imagePath = '/assets/frappe/images/leaflet/';
			this.map = L.map(this.map_id).setView([19.0800, 72.8961], 13);

			L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
				attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
			}).addTo(this.map);
		},

		bind_leaflet_locate_control: function bind_leaflet_locate_control() {
			// To request location update and set location, sets current geolocation on load
			this.locate_control = L.control.locate({position:'topright'});
			this.locate_control.addTo(this.map);
		},

		bind_leaflet_draw_control: function bind_leaflet_draw_control() {
			var this$1 = this;

			this.editableLayers = new L.FeatureGroup();

			var options = {
				position: 'topleft',
				draw: {
					polyline: {
						shapeOptions: {
							color: frappe.ui.color.get('blue'),
							weight: 10
						}
					},
					polygon: {
						allowIntersection: false, // Restricts shapes to simple polygons
						drawError: {
							color: frappe.ui.color.get('orange'), // Color the shape will turn when intersects
							message: '<strong>Oh snap!<strong> you can\'t draw that!' // Message that will show when intersect
						},
						shapeOptions: {
							color: frappe.ui.color.get('blue')
						}
					},
					circle: true,
					rectangle: {
						shapeOptions: {
							clickable: false
						}
					}
				},
				edit: {
					featureGroup: this.editableLayers, //REQUIRED!!
					remove: true
				}
			};

			// create control and add to map
			var drawControl = new L.Control.Draw(options);

			this.map.addControl(drawControl);

			this.map.on('draw:created', function (e) {
				var type = e.layerType,
					layer = e.layer;
				if (type === 'marker') {
					layer.bindPopup('Marker');
				}
				this$1.editableLayers.addLayer(layer);
				this$1.set_value(JSON.stringify(this$1.editableLayers.toGeoJSON()));
			});

			this.map.on('draw:deleted draw:edited', function (e) {
				var layer = e.layer;
				this$1.editableLayers.removeLayer(layer);
				this$1.set_value(JSON.stringify(this$1.editableLayers.toGeoJSON()));
			});
		},

		bind_leaflet_refresh_button: function bind_leaflet_refresh_button() {
			L.easyButton({
				id: 'refresh-map-'+this.df.fieldname,
				position: 'topright',
				type: 'replace',
				leafletClasses: true,
				states:[{
					stateName: 'refresh-map',
					onClick: function(button, map){
						map._onResize();
					},
					title: 'Refresh map',
					icon: 'fa fa-refresh'
				}]
			}).addTo(this.map);
		},

		add_non_group_layers: function add_non_group_layers(source_layer, target_group) {
			var this$1 = this;

			// https://gis.stackexchange.com/a/203773
			// Would benefit from https://github.com/Leaflet/Leaflet/issues/4461
			if (source_layer instanceof L.LayerGroup) {
				source_layer.eachLayer(function (layer){
					this$1.add_non_group_layers(layer, target_group);
				});
			} else {
				target_group.addLayer(source_layer);
			}
		},

		clear_editable_layers: function clear_editable_layers() {
			var this$1 = this;

			this.editableLayers.eachLayer(function (l){
				this$1.editableLayers.removeLayer(l);
			});
		}
	});

	frappe.ui.form.ControlMultiSelect = frappe.ui.form.ControlAutocomplete.extend({
		get_awesomplete_settings: function get_awesomplete_settings() {
			var settings = this._super();

			return Object.assign(settings, {
				filter: function(text, input) {
					var d = this.get_item(text.value);
					if(!d) {
						return awesomplete.FILTER_CONTAINS(text, input.match(/[^,]*$/)[0]);
					}

					var getMatch = function (value) { return awesomplete.FILTER_CONTAINS(value, input.match(/[^,]*$/)[0]); };

					// match typed input with label or value or description
					var v = getMatch(d.label);
					if(!v && d.value) {
						v = getMatch(d.value);
					}
					if(!v && d.description) {
						v = getMatch(d.description);
					}

					return v;
				},

				replace: function(text) {
					var before = this.input.value.match(/^.+,\s*|/)[0];
					this.input.value = before + text + ", ";
				}
			});
		},

		get_value: function get_value() {
			var this$1 = this;

			var data = this._super();
			// find value of label from option list and return actual value string
			if (this.df.options && this.df.options.length && this.df.options[0].label) {
				data = data.split(',').map(function (op) { return op.trim(); });
				data = data.map(function (val) {
					var option = this$1.df.options.find(function (op) { return op.label === val; });
					return option ? option.value : null;
				}).filter(function (n) { return n != null; }).join(', ');
			}
			return data;
		},

		set_formatted_input: function set_formatted_input(value) {
			var this$1 = this;

			if (!value) { return; }
			// find label of value from option list and set from it as input
			if (this.df.options && this.df.options.length && this.df.options[0].label) {
				value = value.split(',').map(function (d) { return d.trim(); }).map(function (val) {
					var option = this$1.df.options.find(function (op) { return op.value === val; });
					return option ? option.label : val;
				}).filter(function (n) { return n != null; }).join(', ');
			}
			this._super(value);
		},

		get_values: function get_values() {
			var value = this.get_value() || '';
			var values = value.split(/\s*,\s*/).filter(function (d) { return d; });

			return values;
		},

		get_data: function get_data() {
			var data;
			if(this.df.get_data) {
				data = this.df.get_data();
				this.set_data(data);
			} else {
				data = this._super();
			}
			var values = this.get_values() || [];

			// return values which are not already selected
			if(data) { data.filter(function (d) { return !values.includes(d); }); }
			return data;
		}
	});

	frappe.ui.form.ControlMultiCheck = frappe.ui.form.Control.extend({
		// UI: multiple checkboxes
		// Value: Array of values
		// Options: Array of label/value/checked option objects

		make: function make() {
			this._super();
			this.$label = $(("<label class=\"control-label\">" + (this.df.label || '') + "</label>")).appendTo(this.wrapper);
			this.$load_state = $('<div class="load-state text-muted small">' + __("Loading") + '...</div>');
			this.$select_buttons = this.get_select_buttons().appendTo(this.wrapper);
			this.$load_state.appendTo(this.wrapper);

			var row = this.get_column_size() === 12 ? '' : 'row';
			this.$checkbox_area = $(("<div class=\"checkbox-options " + row + "\"></div>")).appendTo(this.wrapper);
			this.refresh();
		},

		refresh: function refresh() {
			this.set_options();
			this.bind_checkboxes();
			this.refresh_input();
			this._super();
		},

		refresh_input: function refresh_input() {
			this.select_options(this.selected_options);
		},


		set_options: function set_options() {
			var this$1 = this;

			this.$load_state.show();
			this.$select_buttons.hide();
			this.parse_df_options();

			if(this.df.get_data) {
				if(typeof this.df.get_data().then == 'function') {
					this.df.get_data().then(function (results) {
						this$1.options = results;
						this$1.make_checkboxes();
					});
				} else {
					this.options = this.df.get_data();
					this.make_checkboxes();
				}
			} else {
				this.make_checkboxes();
			}
		},

		parse_df_options: function parse_df_options() {
			if(Array.isArray(this.df.options)) {
				this.options = this.df.options;
			} else if(this.df.options && this.df.options.length>0 && frappe.utils.is_json(this.df.options)) {
				var args = JSON.parse(this.df.options);
				if(Array.isArray(args)) {
					this.options = args;
				} else if(Array.isArray(args.options)) {
					this.options = args.options;
				}
			} else {
				this.options = [];
			}
		},

		make_checkboxes: function make_checkboxes() {
			var this$1 = this;

			this.$load_state.hide();
			this.$checkbox_area.empty();
			this.options.forEach(function (option) {
				var checkbox = this$1.get_checkbox_element(option).appendTo(this$1.$checkbox_area);
				if (option.danger) {
					checkbox.find('.label-area').addClass('text-danger');
				}
				option.$checkbox = checkbox;
			});
			if(this.df.select_all) {
				this.setup_select_all();
			}
			this.set_checked_options();
		},

		bind_checkboxes: function bind_checkboxes() {
			var this$1 = this;

			$(this.wrapper).on('change', ':checkbox', function (e) {
				var $checkbox = $(e.target);
				var option_name = $checkbox.attr("data-unit");
				if($checkbox.is(':checked')) {
					if(this$1.selected_options.includes(option_name)) { return; }
					this$1.selected_options.push(option_name);
				} else {
					var index = this$1.selected_options.indexOf(option_name);
					if(index > -1) {
						this$1.selected_options.splice(index, 1);
					}
				}
				this$1.df.on_change && this$1.df.on_change();
			});
		},

		set_checked_options: function set_checked_options() {
			this.selected_options = this.options
				.filter(function (o) { return o.checked; })
				.map(function (o) { return o.value; });
			this.select_options(this.selected_options);
		},

		setup_select_all: function setup_select_all() {
			var this$1 = this;

			this.$select_buttons.show();
			var select_all = function (deselect) {
				if ( deselect === void 0 ) deselect=false;

				$(this$1.wrapper).find(":checkbox").prop("checked", deselect).trigger('click');
			};
			this.$select_buttons.find('.select-all').on('click', function () {
				select_all();
			});
			this.$select_buttons.find('.deselect-all').on('click', function () {
				select_all(true);
			});
		},

		select_options: function select_options(selected_options) {
			var this$1 = this;

			this.options.map(function (option) { return option.value; }).forEach(function (value) {
				var $checkbox = $(this$1.wrapper).find((":checkbox[data-unit=\"" + value + "\"]"))[0];
				if($checkbox) { $checkbox.checked = selected_options.includes(value); }
			});
		},

		get_value: function get_value() {
			return this.selected_options;
		},

		get_checked_options: function get_checked_options() {
			return this.get_value();
		},

		get_unchecked_options: function get_unchecked_options() {
			var this$1 = this;

			return this.options.map(function (o) { return o.value; })
				.filter(function (value) { return !this$1.selected_options.includes(value); });
		},

		get_checkbox_element: function get_checkbox_element(option) {
			var column_size = this.get_column_size();
			return $(("\n\t\t\t<div class=\"checkbox unit-checkbox col-sm-" + column_size + "\">\n\t\t\t\t<label title=\"" + (option.description || '') + "\">\n\t\t\t\t<input type=\"checkbox\" data-unit=\"" + (option.value) + "\">\n\t\t\t\t</input>\n\t\t\t\t<span class=\"label-area small\" data-unit=\"" + (option.value) + "\">" + (__(option.label)) + "</span>\n\t\t\t\t</label>\n\t\t\t</div>"));
		},

		get_select_buttons: function get_select_buttons() {
			return $(("\n\t\t<div class=\"bulk-select-options\">\n\t\t\t<button class=\"btn btn-xs btn-default select-all\">\n\t\t\t\t" + (__("Select All")) + "\n\t\t\t</button>\n\t\t\t<button class=\"btn btn-xs btn-default deselect-all\">\n\t\t\t" + (__("Unselect All")) + "\n\t\t\t</button>\n\t\t</div>\n\t\t"));
		},

		get_column_size: function get_column_size() {
			return 12 / (+this.df.columns || 1);
		}
	});

	frappe.ui.form.ControlTableMultiSelect = frappe.ui.form.ControlLink.extend({
		make_input: function make_input() {
			var this$1 = this;

			this._super();

			this.$input_area.addClass('form-control table-multiselect');
			this.$input.removeClass('form-control');

			this.$input.on("awesomplete-selectcomplete", function () {
				this$1.$input.val('').focus();
			});

			// used as an internal model to store values
			this.rows = [];

			this.$input_area.on('click', function (e) {
				if (e.target === this$1.$input_area.get(0)) {
					this$1.$input.focus();
				}
			});

			this.$input_area.on('click', '.btn-remove', function (e) {
				var $target = $(e.currentTarget);
				var $value = $target.closest('.tb-selected-value');

				var value = decodeURIComponent($value.data().value);
				var link_field = this$1.get_link_field();
				this$1.rows = this$1.rows.filter(function (row) { return row[link_field.fieldname] !== value; });

				this$1.parse_validate_and_set_in_model('');
			});
			this.$input_area.on('click', '.btn-link-to-form', function (e) {
				var $target = $(e.currentTarget);
				var $value = $target.closest('.tb-selected-value');

				var value = decodeURIComponent($value.data().value);
				var link_field = this$1.get_link_field();
				frappe.set_route('Form', link_field.options, value);
			});
			this.$input.on('keydown', function (e) {
				// if backspace key pressed on empty input, delete last value
				if (e.keyCode == frappe.ui.keyCode.BACKSPACE && e.target.value === '') {
					this$1.rows = this$1.rows.slice(0, this$1.rows.length - 1);
					this$1.parse_validate_and_set_in_model('');
				}
			});
		},
		setup_buttons: function setup_buttons() {
			this.$input_area.find('.link-btn').remove();
		},
		parse: function parse(value) {
			var obj;

			var link_field = this.get_link_field();

			if (value) {
				if (this.frm) {
					var new_row = frappe.model.add_child(this.frm.doc, this.df.options, this.df.fieldname);
					new_row[link_field.fieldname] = value;
					this.rows = this.frm.doc[this.df.fieldname];
				} else {
					this.rows.push(( obj = {}, obj[link_field.fieldname] = value, obj ));
				}
			}

			return this.rows;
		},
		validate: function validate(value) {
			var rows = (value || []).slice();

			// validate the value just entered
			if (this.df.ignore_link_validation) {
				return rows;
			}

			var link_field = this.get_link_field();
			if (rows.length === 0) {
				return rows;
			}

			var all_rows_except_last = rows.slice(0, rows.length - 1);
			var last_row = rows[rows.length - 1];

			// validate the last value entered
			var link_value = last_row[link_field.fieldname];

			// falsy value
			if (!link_value) {
				return all_rows_except_last;
			}

			// duplicate value
			if (all_rows_except_last.map(function (row) { return row[link_field.fieldname]; }).includes(link_value)) {
				return all_rows_except_last;
			}

			var validate_promise = this.validate_link_and_fetch(this.df, this.get_options(),
				this.docname, link_value);

			return validate_promise.then(function (validated_value) {
				if (validated_value === link_value) {
					return rows;
				} else {
					rows.pop();
					return rows;
				}
			});
		},
		set_formatted_input: function set_formatted_input(value) {
			this.rows = value || [];
			var link_field = this.get_link_field();
			var values = this.rows.map(function (row) { return row[link_field.fieldname]; });
			this.set_pill_html(values);
		},
		set_pill_html: function set_pill_html(values) {
			var this$1 = this;

			var html = values
				.map(function (value) { return this$1.get_pill_html(value); })
				.join('');

			this.$input_area.find('.tb-selected-value').remove();
			this.$input_area.prepend(html);
		},
		get_pill_html: function get_pill_html(value) {
			var encoded_value = encodeURIComponent(value);
			return ("<div class=\"btn-group tb-selected-value\" data-value=\"" + encoded_value + "\">\n\t\t\t<button class=\"btn btn-default btn-xs btn-link-to-form\">" + (__(value)) + "</button>\n\t\t\t<button class=\"btn btn-default btn-xs btn-remove\">\n\t\t\t\t<i class=\"fa fa-remove text-muted\"></i>\n\t\t\t</button>\n\t\t</div>");
		},
		get_options: function get_options() {
			return (this.get_link_field() || {}).options;
		},
		get_link_field: function get_link_field() {
			if (!this._link_field) {
				var meta = frappe.get_meta(this.df.options);
				this._link_field = meta.fields.find(function (df) { return df.fieldtype === 'Link'; });
				if (!this._link_field) {
					throw new Error('Table MultiSelect requires a Table with atleast one Link field');
				}
			}
			return this._link_field;
		},
	});

	frappe.ui.form.ControlMultiSelectPills = frappe.ui.form.ControlAutocomplete.extend({
		make_input: function make_input() {
			var this$1 = this;

			this._super();
			this.$input_area = $(this.input_area);
			this.$multiselect_wrapper = $('<div>')
				.addClass('form-control table-multiselect')
				.appendTo(this.$input_area);

			this.$input.removeClass('form-control');
			this.$input_area.find('.awesomplete').appendTo(this.$multiselect_wrapper);

			this.$input.on("awesomplete-selectcomplete", function () {
				this$1.$input.val('').focus();
			});

			// used as an internal model to store values
			this.rows = [];

			this.$input_area.on('click', '.btn-remove', function (e) {
				var $target = $(e.currentTarget);
				var $value = $target.closest('.tb-selected-value');

				var value = decodeURIComponent($value.data().value);
				this$1.rows = this$1.rows.filter(function (val) { return val !== value; });

				this$1.parse_validate_and_set_in_model('');
			});

			this.$input.on('keydown', function (e) {
				// if backspace key pressed on empty input, delete last value
				if (e.keyCode == frappe.ui.keyCode.BACKSPACE && e.target.value === '') {
					this$1.rows = this$1.rows.slice(0, this$1.rows.length - 1);
					this$1.parse_validate_and_set_in_model('');
				}
			});
		},

		parse: function parse(value) {
			if (value) {
				this.rows.push(value);
			}

			return this.rows;
		},

		validate: function validate(value) {
			var rows = (value || []).slice();

			if (rows.length === 0) {
				return rows;
			}

			var all_rows_except_last = rows.slice(0, rows.length - 1);
			var last_value = rows[rows.length - 1];

			// falsy value
			if (!last_value) {
				return all_rows_except_last;
			}

			// duplicate value
			if (all_rows_except_last.includes(last_value)) {
				return all_rows_except_last;
			}

			return rows;
		},

		set_formatted_input: function set_formatted_input(value) {
			this.rows = value || [];
			this.set_pill_html(this.rows);
		},

		set_pill_html: function set_pill_html(values) {
			var this$1 = this;

			var html = values
				.map(function (value) { return this$1.get_pill_html(value); })
				.join('');

			this.$multiselect_wrapper.find('.tb-selected-value').remove();
			this.$multiselect_wrapper.prepend(html);
		},

		get_pill_html: function get_pill_html(value) {
			var encoded_value = encodeURIComponent(value);
			return ("<div class=\"btn-group tb-selected-value\" data-value=\"" + encoded_value + "\">\n\t\t\t<button class=\"btn btn-default btn-xs btn-link-to-form\">" + (__(value)) + "</button>\n\t\t\t<button class=\"btn btn-default btn-xs btn-remove\">\n\t\t\t\t<i class=\"fa fa-remove text-muted\"></i>\n\t\t\t</button>\n\t\t</div>");
		},

		get_awesomplete_settings: function get_awesomplete_settings() {
			var settings = this._super();

			return Object.assign(settings, {
				filter: function(text, input) {
					var d = this.get_item(text.value);
					if(!d) {
						return awesomplete.FILTER_CONTAINS(text, input.match(/[^,]*$/)[0]);
					}

					var getMatch = function (value) { return awesomplete.FILTER_CONTAINS(value, input.match(/[^,]*$/)[0]); };

					// match typed input with label or value or description
					var v = getMatch(d.label);
					if(!v && d.value) {
						v = getMatch(d.value);
					}
					if(!v && d.description) {
						v = getMatch(d.description);
					}

					return v;
				}
			});
		},

		get_value: function get_value() {
			return this.rows;
		},

		get_values: function get_values() {
			return this.rows;
		},

		get_data: function get_data() {
			var this$1 = this;

			var data;
			if(this.df.get_data) {
				data = this.df.get_data();
				if (data && data.then) {
					data.then(function (r) {
						this$1.set_data(r);
					});
					data = this.get_value();
				} else {
					this.set_data(data);
				}
			} else {
				data = this._super();
			}
			var values = this.get_values() || [];

			// return values which are not already selected
			if (data) { data.filter(function (d) { return !values.includes(d); }); }
			return data;
		}
	});

	frappe.ui.form.ControlMultiSelectList = frappe.ui.form.ControlData.extend({
		make_input: function make_input() {
			var this$1 = this;

			var template  = "\n\t\t\t<div class=\"multiselect-list dropdown\">\n\t\t\t\t<div class=\"form-control cursor-pointer dropdown-toggle input-sm\" data-toggle=\"dropdown\" tabindex=0>\n\t\t\t\t\t<span class=\"status-text ellipsis\"></span>\n\t\t\t\t</div>\n\t\t\t\t<ul class=\"dropdown-menu\">\n\t\t\t\t\t<li class=\"dropdown-input-wrapper\">\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control input-sm\">\n\t\t\t\t\t</li>\n\t\t\t\t\t<div class=\"selectable-items\">\n\t\t\t\t\t</div>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t";

			this.$list_wrapper = $(template);
			this.$input = $('<input>');
			this.input = this.$input.get(0);
			this.has_input = true;
			this.$list_wrapper.prependTo(this.input_area);
			this.$filter_input = this.$list_wrapper.find('input');
			this.$list_wrapper.on('click', '.dropdown-menu', function (e) {
				e.stopPropagation();
			});
			this.$list_wrapper.on('click', '.selectable-item', function (e) {
				var $target = $(e.currentTarget);
				this$1.toggle_select_item($target);
			});
			this.$list_wrapper.on('input', 'input', frappe.utils.debounce(function (e) {
				this$1.set_options()
					.then(function () {
						var txt = e.target.value;
						var filtered_options = this$1._options.filter(function (opt) {
							var match = false;
							if (this$1.values.includes(opt.value)) {
								return true;
							}
							match = Awesomplete.FILTER_CONTAINS(opt.label, txt)
								|| Awesomplete.FILTER_CONTAINS(opt.value, txt)
								|| Awesomplete.FILTER_CONTAINS(opt.description, txt);

							return match;
						});
						var options = this$1._selected_values
							.concat(filtered_options)
							.uniqBy(function (opt) { return opt.value; });
						this$1.set_selectable_items(options);
					});
			}, 300));
			this.$list_wrapper.on('keydown', 'input', function (e) {
				if (e.key === 'ArrowDown') {
					this$1.highlight_item(1);
				} else if (e.key === 'ArrowUp') {
					this$1.highlight_item(-1);
				} else if (e.key === 'Enter') {
					if (this$1._$last_highlighted) {
						this$1.toggle_select_item(this$1._$last_highlighted);
						return false;
					}
				}
			});

			this.$list_wrapper.on('keydown', function (e) {
				if ($(e.target).is('input')) {
					return;
				}
				if (e.key === 'Backspace') {
					this$1.set_value([]);
				}
			});

			this.$list_wrapper.on('show.bs.dropdown', function () {
				this$1.set_options()
					.then(function () {
						this$1.set_selectable_items(this$1._options);
					});
			});

			this.set_input_attributes();
			this.values = [];
			this._options = [];
			this._selected_values = [];
			this.highlighted = -1;
		},

		set_input_attributes: function set_input_attributes() {
			this.$list_wrapper
				.attr("data-fieldtype", this.df.fieldtype)
				.attr("data-fieldname", this.df.fieldname);

			this.set_status(this.get_placeholder_text());

			if (this.doctype) {
				this.$list_wrapper.attr("data-doctype", this.doctype);
			}
			if(this.df.input_css) {
				this.$list_wrapper.css(this.df.input_css);
			}
			if(this.df.input_class) {
				this.$list_wrapper.addClass(this.df.input_class);
			}
		},

		toggle_select_item: function toggle_select_item($selectable_item) {
			$selectable_item.toggleClass('selected');
			var value = decodeURIComponent($selectable_item.data().value);

			if ($selectable_item.hasClass('selected')) {
				this.values.push(value);
			} else {
				this.values = this.values.filter(function (val) { return val !== value; });
			}
			this.update_selected_values(value);
			this.parse_validate_and_set_in_model('');
			this.update_status();
		},

		set_value: function set_value(value) {
			var this$1 = this;

			if (!value) { return Promise.resolve(); }
			if (typeof value === 'string') {
				value = [value];
			}
			this.values = value;
			this.values.forEach(function (value) {
				this$1.update_selected_values(value);
			});
			this.parse_validate_and_set_in_model('');
			this.update_status();
			return Promise.resolve();
		},

		update_selected_values: function update_selected_values(value) {
			this._selected_values = this._selected_values || [];
			var option = this._options.find(function (opt) { return opt.value === value; });
			if (option) {
				if (this.values.includes(value)) {
					this._selected_values.push(option);
				} else {
					this._selected_values = this._selected_values.filter(function (opt) { return opt.value !== value; });
				}
			}
		},

		update_status: function update_status() {
			var text;
			if (this.values.length === 0) {
				text = this.get_placeholder_text();
			} else if (this.values.length === 1) {
				var val = this.values[0];
				var option = this._options.find(function (opt) { return opt.value === val; });
				text = option ? option.label : val;
			} else {
				text = __('{0} values selected', [this.values.length]);
			}
			this.set_status(text);
		},

		get_placeholder_text: function get_placeholder_text() {
			return ("<span class=\"text-extra-muted\">" + (this.df.placeholder || '') + "</span>");
		},

		set_status: function set_status(text) {
			this.$list_wrapper.find('.status-text').html(text);
		},

		set_options: function set_options() {
			var this$1 = this;

			var promise = Promise.resolve();

			function process_options(options) {
				return options.map(function (option) {
					if (typeof option === 'string') {
						return {
							label: option,
							value: option
						};
					}
					if (!option.label) {
						option.label = option.value;
					}
					return option;
				});
			}

			if (this.df.get_data) {
				var txt = this.$filter_input.val();
				var value = this.df.get_data(txt);
				if (!value) {
					this._options = [];
				} else if (value.then) {
					promise = value.then(function (options) {
						this$1._options = process_options(options);
					});
				} else {
					this._options = process_options(value);
				}
			} else {
				this._options = process_options(this.df.options);
			}
			return promise;
		},

		set_selectable_items: function set_selectable_items(options) {
			var this$1 = this;

			var html = options.map(function (option) {
				var encoded_value = encodeURIComponent(option.value);
				var selected = this$1.values.includes(option.value) ? 'selected' : '';
				return ("<li class=\"selectable-item " + selected + "\" data-value=\"" + encoded_value + "\">\n\t\t\t\t<div>\n\t\t\t\t\t<strong>" + (option.label) + "</strong>\n\t\t\t\t\t<div class=\"small\">" + (option.description) + "</div>\n\t\t\t\t</div>\n\t\t\t\t<div><span class=\"octicon octicon-check text-muted\"></span></div>\n\t\t\t</li>");
			}).join('');
			if (!html) {
				html = "<li class=\"text-muted\">" + (__('No values to show')) + "</li>";
			}
			this.$list_wrapper
				.find('.selectable-items')
				.html(html);

			this.highlighted = -1;
		},

		get_value: function get_value() {
			return this.values;
		},

		highlight_item: function highlight_item(value) {
			this.highlighted += value;

			if (this.highlighted < 0) {
				this.highlighted = 0;
			}
			var $items = this.$list_wrapper.find('.selectable-item');
			if (this.highlighted > $items.length - 1) {
				this.highlighted = $items.length - 1;
			}

			var $item = $items[this.highlighted];

			if (this._$last_highlighted) {
				this._$last_highlighted.removeClass('highlighted');
			}
			this._$last_highlighted = $($item).addClass('highlighted');
			this.scroll_dropdown_if_needed($item);
		},

		scroll_dropdown_if_needed: function scroll_dropdown_if_needed($item) {
			if ($item.scrollIntoView) {
				$item.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });
			} else {
				$item.parentNode.scrollTop = $item.offsetTop - $item.parentNode.offsetTop;
			}
		}
	});

	frappe.ui.form.ControlRating  = frappe.ui.form.ControlInt.extend({
		make_input: function make_input() {
			var this$1 = this;

			this._super();
			var star_template = "\n\t\t\t<div class=\"rating\">\n\t\t\t\t<i class=\"fa fa-fw fa-star\" data-rating=1></i>\n\t\t\t\t<i class=\"fa fa-fw fa-star\" data-rating=2></i>\n\t\t\t\t<i class=\"fa fa-fw fa-star\" data-rating=3></i>\n\t\t\t\t<i class=\"fa fa-fw fa-star\" data-rating=4></i>\n\t\t\t\t<i class=\"fa fa-fw fa-star\" data-rating=5></i>\n\t\t\t</div>\n\t\t";

			$(this.input_area).html(star_template);

			$(this.input_area).find('i').hover(function (ev) {
				var el = $(ev.currentTarget);
				var star_value = el.data('rating');
				el.parent().children('i.fa').each( function(e){
					if (e < star_value) {
						$(this).addClass('star-hover');
					} else {
						$(this).removeClass('star-hover');
					}
				});
			}, function (ev) {
				var el = $(ev.currentTarget);
				el.parent().children('i.fa').each( function() {
					$(this).removeClass('star-hover');
				});
			});

			$(this.input_area).find('i').click(function (ev) {
				var el = $(ev.currentTarget);
				var star_value = el.data('rating');
				el.parent().children('i.fa').each( function(e) {
					if (e < star_value){
						$(this).addClass('star-click');
					} else {
						$(this).removeClass('star-click');
					}
				});
				this$1.validate_and_set_in_model(star_value, ev);
				if (this$1.doctype && this$1.docname) {
					this$1.set_input(star_value);
				}
			});
		},
		get_value: function get_value() {
			return cint(this.value);
		},
		set_formatted_input: function set_formatted_input(value) {
			var el = $(this.input_area).find('i');
			el.children('i.fa').prevObject.each( function(e) {
				if (e < value) {
					$(this).addClass('star-click');
				} else {
					$(this).removeClass('star-click');
				}
			});
		}
	});

	frappe.ui.form.make_control = function (opts) {
		var control_class_name = "Control" + opts.df.fieldtype.replace(/ /g, "");
		if(frappe.ui.form[control_class_name]) {
			return new frappe.ui.form[control_class_name](opts);
		} else {
			// eslint-disable-next-line
			console.log("Invalid Control Name: " + opts.df.fieldtype);
		}
	};

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	frappe.provide('frappe.views.formview');

	frappe.views.FormFactory = class FormFactory extends frappe.views.Factory {
		make(route) {
			var me = this,
				dt = route[1];

			if(!frappe.views.formview[dt]) {
				frappe.model.with_doctype(dt, function() {
					me.page = frappe.container.add_page("Form/" + dt);
					frappe.views.formview[dt] = me.page;
					me.page.frm = new frappe.ui.form.Form(dt, me.page, true);
					me.show_doc(route);
				});
			} else {
				me.show_doc(route);
			}

			if(!this.initialized) {
				$(document).on("page-change", function() {
					frappe.ui.form.close_grid_form();
				});

				frappe.realtime.on("new_communication", function(data) {
					frappe.timeline.new_communication(data);
				});

				frappe.realtime.on("delete_communication", function(data) {
					frappe.timeline.delete_communication(data);
				});

				frappe.realtime.on('update_communication', function(data) {
					frappe.timeline.update_communication(data);
				});

				frappe.realtime.on("doc_viewers", function(data) {
					frappe.ui.form.set_viewers(data);
				});
			}


			this.initialized = true;
		}

		show_doc(route) {
			var dt = route[1],
				dn = route.slice(2).join("/"),
				me = this;

			if(frappe.model.new_names[dn]) {
				dn = frappe.model.new_names[dn];
				frappe.set_route("Form", dt, dn);
				return;
			}

			frappe.model.with_doc(dt, dn, function(dn, r) {
				if(r && r['403']) { return; } // not permitted

				if(!(locals[dt] && locals[dt][dn])) {
					// doc not found, but starts with New,
					// make a new doc and set it
					var new_str = __("New") + " ";
					if(dn && dn.substr(0, new_str.length)==new_str) {
						var new_name = frappe.model.make_new_doc_and_get_name(dt, true);
						if(new_name===dn) {
							me.load(dt, dn);
						} else {
							frappe.set_route("Form", dt, new_name);
						}
					} else {
						frappe.show_not_found(route);
					}
					return;
				}
				me.load(dt, dn);
			});
		}

		load(dt, dn) {
			frappe.container.change_to("Form/" + dt);
			frappe.views.formview[dt].frm.refresh(dn);
		}
	};

	frappe.provide('frappe.ui.form');

	frappe.quick_edit = function(doctype, name) {
		frappe.db.get_doc(doctype, name).then(function (doc) {
			frappe.ui.form.make_quick_entry(doctype, null, null, doc);
		});
	};

	frappe.ui.form.make_quick_entry = function (doctype, after_insert, init_callback, doc) {
		var trimmed_doctype = doctype.replace(/ /g, '');
		var controller_name = "QuickEntryForm";

		if(frappe.ui.form[trimmed_doctype + "QuickEntryForm"]){
			controller_name = trimmed_doctype + "QuickEntryForm";
		}

		frappe.quick_entry = new frappe.ui.form[controller_name](doctype, after_insert, init_callback, doc);
		return frappe.quick_entry.setup();
	};

	frappe.ui.form.QuickEntryForm = Class.extend({
		init: function(doctype, after_insert, init_callback, doc) {
			this.doctype = doctype;
			this.after_insert = after_insert;
			this.init_callback = init_callback;
			this.doc = doc;
		},

		setup: function() {
			var this$1 = this;

			var me = this;
			return new Promise(function (resolve) {
				frappe.model.with_doctype(this$1.doctype, function() {
					me.check_quick_entry_doc();
					me.set_meta_and_mandatory_fields();
					if(me.is_quick_entry()) {
						me.render_dialog();
						resolve(me);
					} else {
						frappe.quick_entry = null;
						frappe.set_route('Form', me.doctype, me.doc.name)
							.then(function () { return resolve(me); });
					}
				});
			});
		},

		set_meta_and_mandatory_fields: function(){
			this.meta = frappe.get_meta(this.doctype);
			var fields = this.meta.fields;

			// prepare a list of mandatory, bold and allow in quick entry fields
			this.mandatory = $.map(fields, function(d) {
				return ((d.reqd || d.bold || d.allow_in_quick_entry) && !d.read_only) ? $.extend({}, d) : null;
			});
		},

		check_quick_entry_doc: function() {
			if (!this.doc) {
				this.doc = frappe.model.get_new_doc(this.doctype, null, null, true);
			}
		},

		is_quick_entry: function(){
			if(this.meta.quick_entry != 1) {
				return false;
			}

			this.validate_for_prompt_autoname();

			if (this.has_child_table() || !this.mandatory.length) {
				return false;
			}

			return true;
		},

		too_many_mandatory_fields: function(){
			if(this.mandatory.length > 7) {
				// too many fields, show form
				return true;
			}
			return false;
		},

		has_child_table: function(){
			if($.map(this.mandatory, function(d) {
				return d.fieldtype==='Table' ? d : null; }).length) {
				// has mandatory table, quit!
				return true;
			}
			return false;
		},

		validate_for_prompt_autoname: function(){
			if(this.meta.autoname && this.meta.autoname.toLowerCase()==='prompt') {
				this.mandatory = [{fieldname:'__newname', label:__('{0} Name', [this.meta.name]),
					reqd: 1, fieldtype:'Data'}].concat(this.mandatory);
			}
		},

		render_dialog: function(){
			var me = this;
			this.dialog = new frappe.ui.Dialog({
				title: __("New {0}", [__(this.doctype)]),
				fields: this.mandatory,
				doc: this.doc
			});

			this.register_primary_action();
			this.render_edit_in_full_page_link();
			// ctrl+enter to save
			this.dialog.wrapper.keydown(function(e) {
				if((e.ctrlKey || e.metaKey) && e.which==13) {
					if(!frappe.request.ajax_count) {
						// not already working -- double entry
						me.dialog.get_primary_btn().trigger("click");
						e.preventDefault();
						return false;
					}
				}
			});

			this.dialog.onhide = function () { return frappe.quick_entry = null; };
			this.dialog.show();

			this.dialog.refresh_dependency();
			this.set_defaults();

			if (this.init_callback) {
				this.init_callback(this.dialog);
			}
		},

		register_primary_action: function(){
			var me = this;
			this.dialog.set_primary_action(__('Save'), function() {
				if(me.dialog.working) {
					return;
				}
				var data = me.dialog.get_values();

				if(data) {
					me.dialog.working = true;
					me.dialog.set_message(__('Saving...'));
					me.insert().then(function () {
						me.dialog.clear_message();
					});
				}
			});
		},

		insert: function() {
			var me = this;
			return new Promise(function (resolve) {
				me.update_doc();
				frappe.call({
					method: "frappe.client.save",
					args: {
						doc: me.dialog.doc
					},
					callback: function(r) {

						if (frappe.model.is_submittable(me.doctype)) {
							frappe.run_serially([
								function () { return me.dialog.working = true; },
								function () {
									me.dialog.set_primary_action(__('Submit'), function() {
										me.submit(r.message);
									});
								}
							]);
						} else {
							me.dialog.hide();
							// delete the old doc
							frappe.model.clear_doc(me.dialog.doc.doctype, me.dialog.doc.name);
							me.dialog.doc = r.message;
							if(frappe._from_link) {
								frappe.ui.form.update_calling_link(me.dialog.doc);
							} else {
								if(me.after_insert) {
									me.after_insert(me.dialog.doc);
								} else {
									me.open_form_if_not_list();
								}
							}
						}
					},
					error: function() {
						if (!me.skip_redirect_on_error) {
							me.open_doc();
						}
					},
					always: function() {
						me.dialog.working = false;
						resolve(me.dialog.doc);
					},
					freeze: true
				});
			});
		},

		submit: function(doc) {
			var me = this;
			frappe.call({
				method: "frappe.client.submit",
				args : {
					doc: doc
				},
				callback: function(r) {
					me.dialog.hide();
					// delete the old doc
					frappe.model.clear_doc(me.dialog.doc.doctype, me.dialog.doc.name);
					me.dialog.doc = r.message;
					if (frappe._from_link) {
						frappe.ui.form.update_calling_link(me.dialog.doc);
					}
					cur_frm.reload_doc();
				}
			});
		},

		open_form_if_not_list: function() {
			var route = frappe.get_route();
			var doc = this.dialog.doc;
			if (route && !(route[0]==='List' && route[1]===doc.doctype)) {
				frappe.run_serially([
					function () { return frappe.set_route('Form', doc.doctype, doc.name); }
				]);
			}
		},

		update_doc: function(){
			var me = this;
			var data = this.dialog.get_values(true);
			$.each(data, function(key, value) {
				if(key==='__newname') {
					me.dialog.doc.name = value;
				}
				else {
					if(!is_null(value)) {
						me.dialog.doc[key] = value;
					}
				}
			});
			return this.dialog.doc;
		},

		open_doc: function(){
			this.dialog.hide();
			this.update_doc();
			frappe.set_route('Form', this.doctype, this.doc.name);
		},

		render_edit_in_full_page_link: function(){
			var me = this;
			var $link = $('<div style="padding-left: 7px; padding-top: 30px; padding-bottom: 10px;">' +
				'<button class="edit-full btn-default btn-sm">' + __("Edit in full page") + '</button></div>').appendTo(this.dialog.body);

			$link.find('.edit-full').on('click', function() {
				// edit in form
				me.open_doc();
			});
		},

		set_defaults: function(){
			var me = this;
			// set defaults
			$.each(this.dialog.fields_dict, function(fieldname, field) {
				field.doctype = me.doc.doctype;
				field.docname = me.doc.name;

				if(!is_null(me.doc[fieldname])) {
					field.set_input(me.doc[fieldname]);
				}
			});
		}
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt


	frappe.ui.form.LinkedWith = class LinkedWith {

		constructor(opts) {
			$.extend(this, opts);
		}

		show() {
			if(!this.dialog)
				{ this.make_dialog(); }

			$(this.dialog.body).html(
				("<div class=\"text-muted text-center\" style=\"padding: 30px 0px\">\n\t\t\t\t" + (__("Loading")) + "...\n\t\t\t</div>"));

			this.dialog.show();
		}

		make_dialog() {
			var this$1 = this;


			this.dialog = new frappe.ui.Dialog({
				title: __("Linked With")
			});

			this.dialog.on_page_show = function () {
				// execute ajax calls sequentially
				// 1. get linked doctypes
				// 2. load all doctypes
				// 3. load linked docs
				this$1.get_linked_doctypes()
					.then(function () { return this$1.load_doctypes(); })
					.then(function () { return this$1.links_not_permitted_or_missing(); })
					.then(function () { return this$1.get_linked_docs(); })
					.then(function () { return this$1.make_html(); });
			};
		}

		make_html() {
			var this$1 = this;

			var linked_docs = this.frm.__linked_docs;

			var html = '';

			var linked_doctypes = Object.keys(linked_docs);

			if (linked_doctypes.length === 0) {
				html = __("Not Linked to any record");
			} else {
				html = linked_doctypes.map(function (doctype) {
					var docs = linked_docs[doctype];
					return ("\n\t\t\t\t\t<div class=\"list-item-table margin-bottom\">\n\t\t\t\t\t\t" + (this$1.make_doc_head(doctype)) + "\n\t\t\t\t\t\t" + (docs.map(function (doc) { return this$1.make_doc_row(doc, doctype); }).join('')) + "\n\t\t\t\t\t</div>\n\t\t\t\t");
				}).join('');
			}

			$(this.dialog.body).html(html);
		}

		load_doctypes() {
			var this$1 = this;

			var already_loaded = Object.keys(locals.DocType);
			var doctypes_to_load = [];

			if (this.frm.__linked_doctypes) {
				doctypes_to_load =
					Object.keys(this.frm.__linked_doctypes)
						.filter(function (doctype) { return !already_loaded.includes(doctype); });
			}

			// load all doctypes asynchronously using with_doctype
			var promises = doctypes_to_load.map(function (dt) {
				return frappe.model.with_doctype(dt, function () {
					if(frappe.listview_settings[dt]) {
						// add additional fields to __linked_doctypes
						this$1.frm.__linked_doctypes[dt].add_fields =
							frappe.listview_settings[dt].add_fields;
					}
				});
			});

			return Promise.all(promises);
		}

		links_not_permitted_or_missing() {
			var links = null;

			if (this.frm.__linked_doctypes) {
				links =
					Object.keys(this.frm.__linked_doctypes)
						.filter(frappe.model.can_get_report);
			}

			var flag;
			if(!links) {
				$(this.dialog.body).html(("" + (this.frm.__linked_doctypes
					? __("Not enough permission to see links")
					: __("Not Linked to any record"))));
				flag = true;
			}
			flag = false;

			// reject Promise if not_permitted or missing
			return new Promise(
				function (resolve, reject) { return flag ? reject() : resolve(); }
			);
		}

		get_linked_doctypes() {
			var this$1 = this;

			return new Promise(function (resolve) {
				if (this$1.frm.__linked_doctypes) {
					resolve();
				}

				frappe.call({
					method: "frappe.desk.form.linked_with.get_linked_doctypes",
					args: {
						doctype: this$1.frm.doctype
					},
					callback: function (r) {
						this$1.frm.__linked_doctypes = r.message;
						resolve();
					}
				});
			});
		}

		get_linked_docs() {
			var this$1 = this;

			return frappe.call({
				method: "frappe.desk.form.linked_with.get_linked_docs",
				args: {
					doctype: this.frm.doctype,
					name: this.frm.docname,
					linkinfo: this.frm.__linked_doctypes,
					for_doctype: this.for_doctype
				},
				callback: function (r) {
					this$1.frm.__linked_docs = r.message || {};
				}
			});
		}

		make_doc_head(heading) {
			return ("\n\t\t\t<header class=\"level list-row list-row-head text-muted small\">\n\t\t\t\t<div>" + (__(heading)) + "</div>\n\t\t\t</header>\n\t\t");
		}

		make_doc_row(doc, doctype) {
			return ("<div class=\"list-row-container\">\n\t\t\t<div class=\"level list-row small\">\n\t\t\t\t<div class=\"level-left bold\">\n\t\t\t\t\t<a href=\"#Form/" + doctype + "/" + (doc.name) + "\">" + (doc.name) + "</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>");
		}
	};

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors

	frappe.ui.form.Toolbar = Class.extend({
		init: function(opts) {
			$.extend(this, opts);
			this.refresh();
			this.add_update_button_on_dirty();
			this.setup_editable_title();
		},
		refresh: function() {
			this.make_menu();
			this.set_title();
			this.page.clear_user_actions();
			this.show_title_as_dirty();
			this.set_primary_action();

			if(this.frm.meta.hide_toolbar) {
				this.page.hide_menu();
			} else {
				if(this.frm.doc.__islocal) {
					this.page.hide_menu();
					this.print_icon && this.print_icon.addClass("hide");
				} else {
					this.page.show_menu();
					this.print_icon && this.print_icon.removeClass("hide");
				}
			}
		},
		set_title: function() {
			if(this.frm.meta.title_field) {
				var title_field = (this.frm.doc[this.frm.meta.title_field] || "").toString().trim();
				var title = strip_html(title_field || this.frm.docname);
				if(this.frm.doc.__islocal || title === this.frm.docname || this.frm.meta.autoname==="hash") {
					this.page.set_title_sub("");
				} else {
					this.page.set_title_sub(this.frm.docname);
				}
			} else {
				var title = this.frm.docname;
			}
			title = __(title);
			this.page.set_title(title);
			if(this.frm.meta.title_field) {
				frappe.utils.set_title(title + " - " + this.frm.docname);
			}
			this.page.$title_area.toggleClass("editable-title",
				!!(this.is_title_editable() || this.can_rename()));

			this.set_indicator();
		},
		is_title_editable: function() {
			var title_field = this.frm.meta.title_field;
			var doc_field = this.frm.get_docfield(title_field);

			if (title_field
				&& this.frm.perm[0].write
				&& !this.frm.doc.__islocal
				&& doc_field.fieldtype === "Data"
				&& !doc_field.read_only) {
				return true;
			} else {
				return false;
			}
		},
		can_rename: function() {
			return this.frm.perm[0].write && this.frm.meta.allow_rename && !this.frm.doc.__islocal;
		},
		setup_editable_title: function () {
			var me = this;

			this.page.$title_area.find(".title-text").on("click", function () {
				var fields = [];
				var doctype = me.frm.doctype;
				var docname = me.frm.doc.name;
				var title_field = me.frm.meta.title_field || '';

				// check if title is updateable
				if (me.is_title_editable()) {
					var title_field_label = me.frm.get_docfield(title_field).label;

					fields.push({
						label: __("New {0}", [__(title_field_label)]),
						fieldname: "title",
						fieldtype: "Data",
						reqd: 1,
						default: me.frm.doc[title_field]
					});
				}

				// check if docname is updateable
				if (me.can_rename()) {
					fields.push.apply(fields, [{
						label: __("New Name"),
						fieldname: "name",
						fieldtype: "Data",
						reqd: 1,
						default: docname
					}, {
						label: __("Merge with existing"),
						fieldname: "merge",
						fieldtype: "Check",
						default: 0
					}]);
				}

				// create dialog
				if (fields.length > 0) {
					var d = new frappe.ui.Dialog({
						title: __("Rename"),
						fields: fields
					});
					d.show();

					d.set_primary_action(__("Rename"), function () {
						var args = d.get_values();
						if (args.title != me.frm.doc[title_field] || args.name != docname) {
							frappe.call({
								method: "frappe.model.rename_doc.update_document_title",
								args: {
									doctype: doctype,
									docname: docname,
									title_field: title_field,
									old_title: me.frm.doc[title_field],
									new_title: args.title,
									new_name: args.name,
									merge: args.merge
								},
								btn: d.get_primary_btn()
							}).then(function (res) {
								me.frm.reload_doc();
								if (!res.exc && (args.name != docname)) {
									$(document).trigger("rename", [doctype, docname, res.message || args.name]);
									if (locals[doctype] && locals[doctype][docname]) { delete locals[doctype][docname]; }
								}
							});
						} else {
							frappe.show_alert({
								indicator: "yellow",
								message: __("Unchanged")
							});
						}
						d.hide();
					});
				}
			});
		},
		get_dropdown_menu: function(label) {
			return this.page.add_dropdown(label);
		},
		set_indicator: function() {
			var indicator = frappe.get_indicator(this.frm.doc);

			if (indicator) {
				if (this.frm.save_disabled && [__('Saved'), __('Not Saved')].includes(indicator[0])) {
					return;
				}
				this.page.set_indicator(indicator[0], indicator[1]);
			} else {
				this.page.clear_indicator();
			}
		},
		make_menu: function() {
			var this$1 = this;

			this.page.clear_icons();
			this.page.clear_menu();
			var me = this;
			var p = this.frm.perm[0];
			var docstatus = cint(this.frm.doc.docstatus);
			var is_submittable = frappe.model.is_submittable(this.frm.doc.doctype);
			var issingle = this.frm.meta.issingle;
			var print_settings = frappe.model.get_doc(":Print Settings", "Print Settings");
			var allow_print_for_draft = cint(print_settings.allow_print_for_draft);
			var allow_print_for_cancelled = cint(print_settings.allow_print_for_cancelled);

			// Print
			if(!is_submittable || docstatus == 1  ||
				(allow_print_for_cancelled && docstatus == 2)||
				(allow_print_for_draft && docstatus == 0)) {
				if(frappe.model.can_print(null, me.frm) && !issingle) {
					this.page.add_menu_item(__("Print"), function() {
						me.frm.print_doc();}, true);
					this.print_icon = this.page.add_action_icon("fa fa-print", function() {
						me.frm.print_doc();
					});
				}
			}

			// email
			if(frappe.model.can_email(null, me.frm) && me.frm.doc.docstatus < 2) {
				this.page.add_menu_item(__("Email"), function() {
					me.frm.email_doc();
				}, true, {
					shortcut: 'Ctrl+E',
					condition: function () { return !this$1.frm.is_new(); }
				});
			}

			// go to field modal
			this.page.add_menu_item(__("Jump to field"), function() {
				me.show_jump_to_field_dialog();
			}, true, 'Ctrl+J');

			// Linked With
			if(!me.frm.meta.issingle) {
				this.page.add_menu_item(__('Links'), function() {
					me.show_linked_with();
				}, true);
			}

			// copy
			if(in_list(frappe.boot.user.can_create, me.frm.doctype) && !me.frm.meta.allow_copy) {
				this.page.add_menu_item(__("Duplicate"), function() {
					me.frm.copy_doc();
				}, true);
			}

			// rename
			if(this.can_rename()) {
				this.page.add_menu_item(__("Rename"), function() {
					me.frm.rename_doc();
				}, true);
			}

			// reload
			this.page.add_menu_item(__("Reload"), function() {
				me.frm.reload_doc();
			}, true);

			// delete
			if((cint(me.frm.doc.docstatus) != 1) && !me.frm.doc.__islocal
				&& frappe.model.can_delete(me.frm.doctype)) {
				this.page.add_menu_item(__("Delete"), function() {
					me.frm.savetrash();
				}, true, {
					shortcut: 'Shift+Ctrl+D',
					condition: function () { return !this$1.frm.is_new(); }
				});
			}

			if (frappe.user_roles.includes("System Manager") && me.frm.meta.issingle === 0) {
				var is_doctype_form = me.frm.doctype === 'DocType';
				var doctype = is_doctype_form ? me.frm.docname : me.frm.doctype;
				var is_doctype_custom = is_doctype_form ? me.frm.doc.custom : false;

				if (doctype != 'DocType' && !is_doctype_custom) {
					this.page.add_menu_item(__("Customize"), function() {
						if (me.frm.meta && me.frm.meta.custom) {
							frappe.set_route('Form', 'DocType', doctype);
						} else {
							frappe.set_route('Form', 'Customize Form', {
								doc_type: doctype
							});
						}
					}, true);
				}

				if (frappe.boot.developer_mode===1 && !is_doctype_form) {
					// edit doctype
					this.page.add_menu_item(__("Edit DocType"), function() {
						frappe.set_route('Form', 'DocType', me.frm.doctype);
					}, true);
				}
			}

			// Auto Repeat
			if(this.can_repeat()) {
				this.page.add_menu_item(__("Repeat"), function(){
					frappe.utils.new_auto_repeat_prompt(me.frm);
				}, true);
			}

			// New
			if(p[CREATE] && !this.frm.meta.issingle) {
				this.page.add_menu_item(__("New {0}", [__(me.frm.doctype)]), function() {
					frappe.new_doc(me.frm.doctype, true);
				}, true, {
					shortcut: 'Ctrl+B',
					condition: function () { return !this$1.frm.is_new(); }
				});
			}

			// Navigate
			if(!this.frm.is_new() && !issingle) {
				this.page.add_action_icon("fa fa-chevron-left prev-doc", function() {
					me.frm.navigate_records(1);
				});
				this.page.add_action_icon("fa fa-chevron-right next-doc", function() {
					me.frm.navigate_records(0);
				});
			}
		},
		can_repeat: function() {
			return this.frm.meta.allow_auto_repeat
				&& !this.frm.is_new()
				&& !this.frm.doc.auto_repeat;
		},
		can_save: function() {
			return this.get_docstatus()===0;
		},
		can_submit: function() {
			return this.get_docstatus()===0
				&& !this.frm.doc.__islocal
				&& !this.frm.doc.__unsaved
				&& this.frm.perm[0].submit
				&& !this.has_workflow();
		},
		can_update: function() {
			return this.get_docstatus()===1
				&& !this.frm.doc.__islocal
				&& this.frm.perm[0].submit
				&& this.frm.doc.__unsaved
		},
		can_cancel: function() {
			return this.get_docstatus()===1
				&& this.frm.perm[0].cancel
				&& !this.read_only;
		},
		can_amend: function() {
			return this.get_docstatus()===2
				&& this.frm.perm[0].amend
				&& !this.read_only;
		},
		has_workflow: function() {
			if(this._has_workflow === undefined)
				{ this._has_workflow = frappe.get_list("Workflow", {document_type: this.frm.doctype}).length; }
			return this._has_workflow;
		},
		get_docstatus: function() {
			return cint(this.frm.doc.docstatus);
		},
		show_linked_with: function() {
			if(!this.frm.linked_with) {
				this.frm.linked_with = new frappe.ui.form.LinkedWith({
					frm: this.frm
				});
			}
			this.frm.linked_with.show();
		},
		set_primary_action: function(dirty) {
			var this$1 = this;

			if (!dirty) {
				// don't clear actions menu if dirty
				this.page.clear_user_actions();
			}

			var status = this.get_action_status();
			if (status) {
				// When moving from a page with status amend to another page with status amend
				// We need to check if document is already amend specifically and hide
				// or clear the menu actions accordingly

				if (status !== this.current_status && status === 'Amend') {
					var doc = this.frm.doc;
					frappe.xcall('frappe.client.is_document_amended', {
						'doctype': doc.doctype,
						'docname': doc.name
					}).then(function (is_amended) {
						if (is_amended) {
							this$1.page.clear_actions();
							return;
						}
						this$1.set_page_actions(status);
					});
				} else {
					this.set_page_actions(status);
				}
			} else {
				this.page.clear_actions();
				this.current_status = null;
			}
		},
		get_action_status: function() {
			var status = null;
			if (this.frm.page.current_view_name==='print' || this.frm.hidden) {
				status = "Edit";
			} else if (this.can_submit()) {
				status = "Submit";
			} else if (this.can_save()) {
				if (!this.frm.save_disabled) {
					//Show the save button if there is no workflow or if there is a workflow and there are changes
					if (this.has_workflow() ? this.frm.doc.__unsaved : true) {
						status = "Save";
					}
				}
			} else if (this.can_update()) {
				status = "Update";
			} else if (this.can_cancel()) {
				status = "Cancel";
			} else if (this.can_amend()) {
				status = "Amend";
			}
			return status;
		},
		set_page_actions: function(status) {
			var this$1 = this;

			var me = this;
			this.page.clear_actions();

			if(status!== 'Edit') {
				var perm_to_check = this.frm.action_perm_type_map[status];
				if(!this.frm.perm[0][perm_to_check]) {
					return;
				}
			}

			if(status === "Edit") {
				this.page.set_primary_action(__("Edit"), function() {
					me.frm.page.set_view('main');
				}, 'octicon octicon-pencil');
			} else if(status === "Cancel") {
				var add_cancel_button = function () {
					this$1.page.set_secondary_action(__(status), function() {
						me.frm.savecancel(this);
					}, "octicon octicon-circle-slash");
				};
				if (this.has_workflow()) {
					frappe.xcall(
						'frappe.model.workflow.can_cancel_document', {
							'doctype': this.frm.doc.doctype,
						}).then(function (can_cancel) {
						if (can_cancel) {
							add_cancel_button();
						}
					});
				} else {
					add_cancel_button();
				}
			} else {
				var click = {
					"Save": function() {
						return me.frm.save('Save', null, this);
					},
					"Submit": function() {
						return me.frm.savesubmit(this);
					},
					"Update": function() {
						return me.frm.save('Update', null, this);
					},
					"Amend": function() {
						return me.frm.amend_doc();
					}
				}[status];

				var icon = {
					"Save": "octicon octicon-check",
					"Submit": "octicon octicon-lock",
					"Update": "octicon octicon-check",
					"Amend": "octicon octicon-split"
				}[status];

				this.page.set_primary_action(__(status), click, icon);
			}

			this.current_status = status;
		},
		add_update_button_on_dirty: function() {
			var me = this;
			$(this.frm.wrapper).on("dirty", function() {
				me.show_title_as_dirty();

				// clear workflow actions
				me.frm.page.clear_actions_menu();

				// enable save action
				if(!me.frm.save_disabled) {
					me.set_primary_action(true);
				}
			});
		},
		show_title_as_dirty: function() {
			if(this.frm.save_disabled)
				{ return; }

			if(this.frm.doc.__unsaved) {
				this.page.set_indicator(__("Not Saved"), "orange");
			}

			$(this.frm.wrapper).attr("data-state", this.frm.doc.__unsaved ? "dirty" : "clean");
		},

		show_jump_to_field_dialog: function show_jump_to_field_dialog() {
			var this$1 = this;

			var visible_fields_filter = function (f) { return !['Section Break', 'Column Break'].includes(f.df.fieldtype)
				&& !f.df.hidden
				&& f.disp_status !== 'None'; };

			var fields = this.frm.fields
				.filter(visible_fields_filter)
				.map(function (f) { return ({ label: f.df.label, value: f.df.fieldname }); });

			var dialog = new frappe.ui.Dialog({
				title: __('Jump to field'),
				fields: [
					{
						fieldtype: 'Autocomplete',
						fieldname: 'fieldname',
						label: __('Select Field'),
						options: fields,
						reqd: 1
					}
				],
				primary_action_label: __('Go'),
				primary_action: function (ref) {
					var fieldname = ref.fieldname;

					dialog.hide();
					this$1.frm.scroll_to_field(fieldname);
				}
			});

			dialog.show();
		}
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	frappe.ui.form.Dashboard = Class.extend({
		init: function(opts) {
			$.extend(this, opts);
			this.section = this.frm.fields_dict._form_dashboard.wrapper;
			this.parent = this.section.find('.section-body');
			this.wrapper = $(frappe.render_template('form_dashboard',
				{frm: this.frm})).appendTo(this.parent);

			this.progress_area = this.wrapper.find(".progress-area");
			this.heatmap_area = this.wrapper.find('.form-heatmap');
			this.chart_area = this.wrapper.find('.form-graph');
			this.stats_area = this.wrapper.find('.form-stats');
			this.stats_area_row = this.stats_area.find('.row');
			this.links_area = this.wrapper.find('.form-links');
			this.transactions_area = this.links_area.find('.transactions');

		},
		reset: function() {
			this.section.addClass('hidden');
			this.clear_headline();

			// clear progress
			this.progress_area.empty().addClass('hidden');

			// clear links
			this.links_area.addClass('hidden');
			this.links_area.find('.count, .open-notification').addClass('hidden');

			// clear stats
			this.stats_area.addClass('hidden');
			this.stats_area_row.empty();

			// clear custom
			this.wrapper.find('.custom').remove();
		},
		set_headline: function(html, color) {
			this.frm.layout.show_message(html, color);
		},
		clear_headline: function() {
			this.frm.layout.show_message();
		},

		add_comment: function(text, alert_class, permanent) {
			var me = this;
			this.set_headline_alert(text, alert_class);
			if(!permanent) {
				setTimeout(function() {
					me.clear_headline();
				}, 10000);
			}
		},

		clear_comment: function() {
			this.clear_headline();
		},

		set_headline_alert: function(text, color) {
			if(text) {
				this.set_headline(("<div>" + text + "</div>"), color);
			} else {
				this.clear_headline();
			}
		},

		add_section: function(html) {
			return $('<div class="form-dashboard-section custom">'+html+'</div>').appendTo(this.wrapper);
		},

		add_progress: function(title, percent, message) {
			var progress_chart = this.make_progress_chart(title);

			if(!$.isArray(percent)) {
				percent = this.format_percent(title, percent);
			}

			var progress = $('<div class="progress"></div>').appendTo(progress_chart);
			$.each(percent, function(i, opts) {
				$(repl('<div class="progress-bar %(progress_class)s" style="width: %(width)s" \
				title="%(title)s"></div>', opts)).appendTo(progress);
			});

			if (!message) { message = ''; }
			$(("<p class=\"progress-message text-muted small\">" + message + "</p>")).appendTo(progress_chart);

			this.show();

			return progress_chart;
		},

		show_progress: function(title, percent, message) {
			this._progress_map = this._progress_map || {};
			var progress_chart = this._progress_map[title];
			// create a new progress chart if it doesnt exist
			// or the previous one got detached from the DOM
			if (!progress_chart || progress_chart.parent().length == 0) {
				progress_chart = this.add_progress(title, percent, message);
				this._progress_map[title] = progress_chart;
			}

			if (!$.isArray(percent)) {
				percent = this.format_percent(title, percent);
			}
			progress_chart.find('.progress-bar').each(function (i, progress_bar) {
				var ref = percent[i];
				var progress_class = ref.progress_class;
				var width = ref.width;
				$(progress_bar).css('width', width)
					.removeClass('progress-bar-danger progress-bar-success')
					.addClass(progress_class);
			});

			if (!message) { message = ''; }
			progress_chart.find('.progress-message').text(message);
		},

		hide_progress: function(title) {
			if (title){
				this._progress_map[title].remove();
				delete this._progress_map[title];
			} else {
				this._progress_map = {};
				this.progress_area.empty();
			}
		},

		format_percent: function(title, percent) {
			var width = cint(percent) < 1 ? 1 : cint(percent);
			var progress_class = "progress-bar-success";

			return [{
				title: title,
				width: width + '%',
				progress_class: progress_class
			}];
		},
		make_progress_chart: function(title) {
			var progress_chart = $('<div class="progress-chart" title="'+(title || '')+'"></div>')
				.appendTo(this.progress_area.removeClass('hidden'));
			return progress_chart;
		},

		refresh: function() {
			this.reset();
			if(this.frm.doc.__islocal) {
				return;
			}

			if(!this.data) {
				this.init_data();
			}

			var show = false;

			if(this.data && ((this.data.transactions || []).length
				|| (this.data.reports || []).length)) {
				if(this.data.docstatus && this.frm.doc.docstatus !== this.data.docstatus) {
					// limited docstatus
					return;
				}
				this.render_links();
				this.set_open_count();
				show = true;
			}

			if(this.data.heatmap) {
				this.render_heatmap();
				show = true;
			}

			if(this.data.graph) {
				this.setup_graph();
				show = true;
			}

			if(show) {
				this.show();
			}
		},

		after_refresh: function() {
			var me = this;
			// show / hide new buttons (if allowed)
			this.links_area.find('.btn-new').each(function() {
				if(me.frm.can_create($(this).attr('data-doctype'))) {
					$(this).removeClass('hidden');
				}
			});
		},

		init_data: function() {
			this.data = this.frm.meta.__dashboard || {};
			if(!this.data.transactions) { this.data.transactions = []; }
			if(!this.data.internal_links) { this.data.internal_links = {}; }
			this.filter_permissions();
		},

		add_transactions: function(opts) {
			var this$1 = this;

			// add additional data on dashboard
			var group_added = [];

			if(!Array.isArray(opts)) { opts=[opts]; }

			if(!this.data) {
				this.init_data();
			}

			if(this.data && (this.data.transactions || []).length) {
				// check if label already exists, add items to it
				this.data.transactions.map(function (group) {
					opts.map(function (d) {
						var ref;

						if(d.label == group.label) {
							group_added.push(d.label);
							(ref = group.items).push.apply(ref, d.items);
						}
					});
				});

				// if label not already present, add new label and items under it
				opts.map(function (d) {
					if(!group_added.includes(d.label)) {
						this$1.data.transactions.push(d);
					}
				});

				this.filter_permissions();
			}
		},

		filter_permissions: function() {
			// filter out transactions for which the user
			// does not have permission
			var transactions = [];
			(this.data.transactions || []).forEach(function(group) {
				var items = [];
				group.items.forEach(function(doctype) {
					if(frappe.model.can_read(doctype)) {
						items.push(doctype);
					}
				});

				// only add thie group, if there is atleast
				// one item with permission
				if(items.length) {
					group.items = items;
					transactions.push(group);
				}
			});
			this.data.transactions = transactions;
		},
		render_links: function() {
			var me = this;
			this.links_area.removeClass('hidden');
			this.links_area.find('.btn-new').addClass('hidden');
			if(this.data_rendered) {
				return;
			}

			//this.transactions_area.empty();

			this.data.frm = this.frm;

			$(frappe.render_template('form_links', this.data))
				.appendTo(this.transactions_area);

			if (this.data.reports && this.data.reports.length) {
				$(frappe.render_template('report_links', this.data))
					.appendTo(this.transactions_area);
			}

			// bind links
			this.transactions_area.find(".badge-link").on('click', function() {
				me.open_document_list($(this).parent());
			});

			// bind reports
			this.transactions_area.find(".report-link").on('click', function() {
				me.open_report($(this).parent());
			});

			// bind open notifications
			this.transactions_area.find('.open-notification').on('click', function() {
				me.open_document_list($(this).parent(), true);
			});

			// bind new
			this.transactions_area.find('.btn-new').on('click', function() {
				me.frm.make_new($(this).attr('data-doctype'));
			});

			this.data_rendered = true;
		},
		open_report: function($link) {

			var report = $link.attr('data-report');

			var fieldname = this.data.non_standard_fieldnames
				? (this.data.non_standard_fieldnames[report] || this.data.fieldname)
				: this.data.fieldname;

			frappe.route_options[fieldname] = this.frm.doc.name;
			frappe.set_route("query-report", report);
		},
		open_document_list: function($link, show_open) {
			// show document list with filters
			var doctype = $link.attr('data-doctype'),
				names = $link.attr('data-names') || [];

			if(this.data.internal_links[doctype]) {
				if(names.length) {
					frappe.route_options = {'name': ['in', names]};
				} else {
					return false;
				}
			} else if(this.data.fieldname) {
				frappe.route_options = this.get_document_filter(doctype);
				if(show_open) {
					frappe.ui.notifications.show_open_count_list(doctype);
				}
			}

			frappe.set_route("List", doctype, "List");
		},
		get_document_filter: function(doctype) {
			// return the default filter for the given document
			// like {"customer": frm.doc.name}
			var filter = {};
			var fieldname = this.data.non_standard_fieldnames
				? (this.data.non_standard_fieldnames[doctype] || this.data.fieldname)
				: this.data.fieldname;

			if (this.data.dynamic_links && this.data.dynamic_links[fieldname]) {
				var dynamic_fieldname = this.data.dynamic_links[fieldname][1];
				filter[dynamic_fieldname] = this.data.dynamic_links[fieldname][0];
			}

			filter[fieldname] = this.frm.doc.name;
			return filter;
		},
		set_open_count: function() {
			if(!this.data.transactions || !this.data.fieldname) {
				return;
			}

			// list all items from the transaction list
			var items = [],
				me = this;

			this.data.transactions.forEach(function(group) {
				group.items.forEach(function(item) { items.push(item); });
			});

			var method = this.data.method || 'frappe.desk.notifications.get_open_count';
			frappe.call({
				type: "GET",
				method: method,
				args: {
					doctype: this.frm.doctype,
					name: this.frm.doc.name,
					items: items
				},
				callback: function(r) {
					if(r.message.timeline_data) {
						me.update_heatmap(r.message.timeline_data);
					}

					// update badges
					$.each(r.message.count, function(i, d) {
						me.frm.dashboard.set_badge_count(d.name, cint(d.open_count), cint(d.count));
					});

					// update from internal links
					$.each(me.data.internal_links, function (doctype, link) {
						var names = [];
						if (typeof link === 'string' || link instanceof String) {
							// get internal links in parent document
							var value = me.frm.doc[link];
							if (value && !names.includes(value)) {
								names.push(value);
							}
						} else if (Array.isArray(link)) {
							// get internal links in child documents
							var table_fieldname = link[0];
							var link_fieldname = link[1];
							(me.frm.doc[table_fieldname] || []).forEach(function (d) {
								var value = d[link_fieldname];
								if (value && !names.includes(value)) {
									names.push(value);
								}
							});
						}
						me.frm.dashboard.set_badge_count(doctype, 0, names.length, names);
					});

					me.frm.dashboard_data = r.message;
					me.frm.trigger('dashboard_update');
				}
			});

		},
		set_badge_count: function(doctype, open_count, count, names) {
			var $link = $(this.transactions_area)
				.find('.document-link[data-doctype="'+doctype+'"]');

			if(open_count) {
				$link.find('.open-notification')
					.removeClass('hidden')
					.html((open_count > 99) ? '99+' : open_count);
			}

			if(count) {
				$link.find('.count')
					.removeClass('hidden')
					.html((count > 99) ? '99+' : count);
			}

			if(this.data.internal_links[doctype]) {
				if(names && names.length) {
					$link.attr('data-names', names ? names.join(',') : '');
				} else {
					$link.find('a').attr('disabled', true);
				}
			}
		},

		update_heatmap: function(data) {
			if(this.heatmap) {
				this.heatmap.update({dataPoints: data});
			}
		},

		// heatmap
		render_heatmap: function() {
			if(!this.heatmap) {
				this.heatmap = new frappe.Chart("#heatmap-" + frappe.model.scrub(this.frm.doctype), {
					type: 'heatmap',
					start: new Date(moment().subtract(1, 'year').toDate()),
					count_label: "interactions",
					discreteDomains: 0,
					data: {}
				});

				// center the heatmap
				this.heatmap_area.removeClass('hidden').find('svg').css({'margin': 'auto'});

				// message
				var heatmap_message = this.heatmap_area.find('.heatmap-message');
				if(this.data.heatmap_message) {
					heatmap_message.removeClass('hidden').html(this.data.heatmap_message);
				} else {
					heatmap_message.addClass('hidden');
				}
			}
		},

		add_indicator: function(label, color) {
			this.show();
			this.stats_area.removeClass('hidden');


			// set colspan
			var indicators = this.stats_area_row.find('.indicator-column');
			var n_indicators = indicators.length + 1;
			var colspan;
			if(n_indicators > 4) { colspan = 3; }
			else { colspan = 12 / n_indicators; }

			// reset classes in existing indicators
			if(indicators.length) {
				indicators.removeClass().addClass('col-sm-'+colspan).addClass('indicator-column');
			}

			var indicator = $('<div class="col-sm-'+colspan+' indicator-column"><span class="indicator '+color+'">'
				+label+'</span></div>').appendTo(this.stats_area_row);

			return indicator;
		},

		// graphs
		setup_graph: function() {
			var me = this;
			var method = this.data.graph_method;
			var args = {
				doctype: this.frm.doctype,
				docname: this.frm.doc.name,
			};
			$.extend(args, this.data.graph_method_args);

			frappe.call({
				type: "GET",
				method: method,
				args: args,

				callback: function(r) {
					if(r.message) {
						me.render_graph(r.message);
					}
				}
			});
		},

		render_graph: function(args) {
			this.chart_area.empty().removeClass('hidden');
			$.extend(args, {
				type: 'line',
				colors: ['green'],
				truncateLegends: 1,
				axisOptions: {
					shortenYAxisNumbers: 1
				}
			});
			this.show();

			this.chart = new frappe.Chart('.form-graph', args);
			if(!this.chart) {
				this.hide();
			}
		},

		show: function() {
			this.section.removeClass('hidden');
		},

		hide: function() {
			this.section.addClass('hidden');
		}
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	frappe.ui.form.States = Class.extend({
		init: function(opts) {
			$.extend(this, opts);
			this.state_fieldname = frappe.workflow.get_state_fieldname(this.frm.doctype);

			// no workflow?
			if(!this.state_fieldname)
				{ return; }

			this.update_fields = frappe.workflow.get_update_fields(this.frm.doctype);

			var me = this;
			$(this.frm.wrapper).bind("render_complete", function() {
				me.refresh();
			});
		},

		setup_help: function() {
			var me = this;
			this.frm.page.add_action_item(__("Help"), function() {
				frappe.workflow.setup(me.frm.doctype);
				var state = me.get_state();
				var d = new frappe.ui.Dialog({
					title: "Workflow: "
						+ frappe.workflow.workflows[me.frm.doctype].name
				});

				frappe.workflow.get_transitions(me.frm.doc).then(function (transitions) {
					var next_html = $.map(transitions,
						function(d) {
							return d.action.bold() + __(" by Role ") + d.allowed;
						}).join(", ") || __("None: End of Workflow").bold();

					$(d.body).html("<p>"+__("Current status")+": " + state.bold() + "</p>"
						+ "<p>"+__("Document is only editable by users of role")+": "
							+ frappe.workflow.get_document_state(me.frm.doctype,
								state).allow_edit.bold() + "</p>"
						+ "<p>"+__("Next actions")+": "+ next_html +"</p>"
						+ (me.frm.doc.__islocal ? ("<div class='alert alert-info'>"
							+__("Workflow will start after saving.")+"</div>") : "")
						+ "<p class='help'>"+__("Note: Other permission rules may also apply")+"</p>"
					).css({padding: '15px'});
					d.show();
				});
			}, true);
		},

		refresh: function() {
			// hide if its not yet saved
			if(this.frm.doc.__islocal) {
				this.set_default_state();
				return;
			}

			// state text
			var state = this.get_state();

			if(state) {
				// show actions from that state
				this.show_actions(state);
			}
		},

		show_actions: function() {
			var this$1 = this;

			var added = false;
			var me = this;

			// if the loaded doc is dirty, don't show workflow buttons
			if (this.frm.doc.__unsaved===1) {
				return;
			}

			function has_approval_access(transition) {
				var approval_access = false;
				var user = frappe.session.user;
				if (user === 'Administrator'
					|| transition.allow_self_approval
					|| user !== me.frm.doc.owner) {
					approval_access = true;
				}
				return approval_access;
			}

			frappe.workflow.get_transitions(this.frm.doc).then(function (transitions) {
				this$1.frm.page.clear_actions_menu();
				transitions.forEach(function (d) {
					if (frappe.user_roles.includes(d.allowed) && has_approval_access(d)) {
						added = true;
						me.frm.page.add_action_item(__(d.action), function() {
							// set the workflow_action for use in form scripts
							me.frm.selected_workflow_action = d.action;
							me.frm.script_manager.trigger('before_workflow_action').then(function () {
								frappe.xcall('frappe.model.workflow.apply_workflow',
									{doc: me.frm.doc, action: d.action})
									.then(function (doc) {
										frappe.model.sync(doc);
										me.frm.refresh();
										me.frm.selected_workflow_action = null;
										me.frm.script_manager.trigger("after_workflow_action");
									});
							});
						});
					}
				});

				this$1.setup_btn(added);
			});

		},

		setup_btn: function(action_added) {
			if(action_added) {
				this.frm.page.btn_primary.addClass("hide");
				this.frm.page.btn_secondary.addClass("hide");
				this.frm.toolbar.current_status = "";
				this.setup_help();
			}
		},

		set_default_state: function() {
			var default_state = frappe.workflow.get_default_state(this.frm.doctype, this.frm.doc.docstatus);
			if(default_state) {
				this.frm.set_value(this.state_fieldname, default_state);
			}
		},

		get_state: function() {
			if(!this.frm.doc[this.state_fieldname]) {
				this.set_default_state();
			}
			return this.frm.doc[this.state_fieldname];
		}
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt



	frappe.ui.form.save = function (frm, action, callback, btn) {
		$(btn).prop("disabled", true);

		// specified here because there are keyboard shortcuts to save
		var working_label = {
			"Save": __("Saving"),
			"Submit": __("Submitting"),
			"Update": __("Updating"),
			"Amend": __("Amending"),
			"Cancel": __("Cancelling")
		}[toTitle(action)];

		var freeze_message = working_label ? __(working_label) : "";

		var save = function () {
			remove_empty_rows();

			$(frm.wrapper).addClass('validated-form');
			if (check_mandatory()) {
				_call({
					method: "frappe.desk.form.save.savedocs",
					args: { doc: frm.doc, action: action },
					callback: function (r) {
						$(document).trigger("save", [frm.doc]);
						callback(r);
					},
					error: function (r) {
						callback(r);
					},
					btn: btn,
					freeze_message: freeze_message
				});
			} else {
				$(btn).prop("disabled", false);
			}
		};

		var remove_empty_rows = function() {
			/*
				This function removes empty rows. Note that in this function, a row is considered
				empty if the fields with `in_list_view: 1` are undefined or falsy because that's
				what users also consider to be an empty row
			*/
			var docs = frappe.model.get_all_docs(frm.doc);

			// we should only worry about table data
			var tables = docs.filter(function (d) {
				return frappe.model.is_table(d.doctype);
			});

			var modified_table_fields = [];

			tables.map(function (doc) {
				var cells = frappe.meta.docfield_list[doc.doctype] || [];

				var in_list_view_cells = cells.filter(function (df) {
					return cint(df.in_list_view) === 1;
				});

				var is_empty_row = function(cells) {
					for (var i = 0; i < cells.length; i++) {
						if (locals[doc.doctype][doc.name][cells[i].fieldname]) {
							return false;
						}
					}
					return true;
				};

				if (is_empty_row(in_list_view_cells)) {
					frappe.model.clear_doc(doc.doctype, doc.name);
					modified_table_fields.push(doc.parentfield);
				}
			});

			modified_table_fields.forEach(function (field) {
				frm.refresh_field(field);
			});
		};

		var cancel = function () {
			var args = {
				doctype: frm.doc.doctype,
				name: frm.doc.name
			};

			// update workflow state value if workflow exists
			var workflow_state_fieldname = frappe.workflow.get_state_fieldname(frm.doctype);
			if (workflow_state_fieldname) {
				$.extend(args, {
					workflow_state_fieldname: workflow_state_fieldname,
					workflow_state: frm.doc[workflow_state_fieldname]

				});
			}

			_call({
				method: "frappe.desk.form.save.cancel",
				args: args,
				callback: function (r) {
					$(document).trigger("save", [frm.doc]);
					callback(r);
				},
				btn: btn,
				freeze_message: freeze_message
			});
		};

		var check_mandatory = function () {
			var has_errors = false;
			frm.scroll_set = false;

			if (frm.doc.docstatus == 2) { return true; } // don't check for cancel

			$.each(frappe.model.get_all_docs(frm.doc), function (i, doc) {
				var error_fields = [];
				var folded = false;

				$.each(frappe.meta.docfield_list[doc.doctype] || [], function (i, docfield) {
					if (docfield.fieldname) {
						var df = frappe.meta.get_docfield(doc.doctype,
							docfield.fieldname, frm.doc.name);

						if (df.fieldtype === "Fold") {
							folded = frm.layout.folded;
						}

						if (df.reqd && !frappe.model.has_value(doc.doctype, doc.name, df.fieldname)) {
							has_errors = true;
							error_fields[error_fields.length] = __(df.label);
							// scroll to field
							if (!frm.scroll_set) {
								scroll_to(doc.parentfield || df.fieldname);
							}

							if (folded) {
								frm.layout.unfold();
								folded = false;
							}
						}

					}
				});

				if (frm.is_new() && frm.meta.autoname === 'Prompt' && !frm.doc.__newname) {
					error_fields = [__('Name') ].concat( error_fields);
				}

				if (error_fields.length) {
					var meta = frappe.get_meta(doc.doctype);
					if (meta.istable) {
						var message = __('Mandatory fields required in table {0}, Row {1}',
							[__(frappe.meta.docfield_map[doc.parenttype][doc.parentfield].label).bold(), doc.idx]);
					} else {
						var message = __('Mandatory fields required in {0}', [__(doc.doctype)]);
					}
					message = message + '<br><br><ul><li>' + error_fields.join('</li><li>') + "</ul>";
					frappe.msgprint({
						message: message,
						indicator: 'red',
						title: __('Missing Fields')
					});
				}
			});

			return !has_errors;
		};

		var scroll_to = function (fieldname) {
			var f = cur_frm.fields_dict[fieldname];
			if (f) {
				$(document).scrollTop($(f.wrapper).offset().top - 60);
			}
			frm.scroll_set = true;
		};

		var _call = function (opts) {
			// opts = {
			// 	method: "some server method",
			// 	args: {args to be passed},
			// 	callback: callback,
			// 	btn: btn
			// }

			if (frappe.ui.form.is_saving) {
				// this is likely to happen if the user presses the shortcut cmd+s for a longer duration or uses double click
				// no need to show this to user, as they can see "Saving" in freeze message
				console.log("Already saving. Please wait a few moments.");
				throw "saving";
			}

			// ensure we remove new docs routes ONLY
			if ( frm.is_new() ) {
				frappe.ui.form.remove_old_form_route();
			}
			frappe.ui.form.is_saving = true;

			return frappe.call({
				freeze: true,
				// freeze_message: opts.freeze_message,
				method: opts.method,
				args: opts.args,
				btn: opts.btn,
				callback: function (r) {
					opts.callback && opts.callback(r);
				},
				error: opts.error,
				always: function (r) {
					$(btn).prop("disabled", false);
					frappe.ui.form.is_saving = false;

					if (!r.exc) {
						frappe.show_alert({message: __('Saved'), indicator: 'green'});
					}

					if (r) {
						var doc = r.docs && r.docs[0];
						if (doc) {
							frappe.ui.form.update_calling_link(doc);
						}
					}
				}
			})
		};

		if (action === "cancel") {
			cancel();
		} else {
			save();
		}
	};

	frappe.ui.form.remove_old_form_route = function () {
		var current_route = frappe.get_route().join("/");
		frappe.route_history = frappe.route_history
			.filter(function (route) { return route.join("/") !== current_route; });
	};

	frappe.ui.form.update_calling_link = function (newdoc) {
		if (!frappe._from_link) { return; }
		var doc = frappe.get_doc(frappe._from_link.doctype, frappe._from_link.docname);

		var is_valid_doctype = function () {
			if (frappe._from_link.df.fieldtype==='Link') {
				return newdoc.doctype === frappe._from_link.df.options;
			} else {
				// dynamic link, type is dynamic
				return newdoc.doctype === doc[frappe._from_link.df.options];
			}
		};

		if (is_valid_doctype()) {
			// set value
			if (doc && doc.parentfield) {
				//update values for child table
				$.each(frappe._from_link.frm.fields_dict[doc.parentfield].grid.grid_rows, function (index, field) {
					if (field.doc && field.doc.name === frappe._from_link.docname) {
						frappe._from_link.set_value(newdoc.name);
					}
				});
			} else {
				frappe._from_link.set_value(newdoc.name);
			}

			// refresh field
			frappe._from_link.refresh();

			// if from form, switch
			if (frappe._from_link.frm) {
				frappe.set_route("Form",
					frappe._from_link.frm.doctype, frappe._from_link.frm.docname)
					.then(function () {
						frappe.utils.scroll_to(frappe._from_link_scrollY);
					});
			}

			frappe._from_link = null;
		}
	};

	frappe.ui.form.PrintPreview = Class.extend({
		init: function (opts) {
			$.extend(this, opts);
			this.make();
			this.bind_events();
			this.setup_keyboard_shortcuts();
		},
		make: function () {
			this.wrapper = this.frm.page.add_view("print", frappe.render_template("print_layout", {}));

			// only system manager can edit
			this.wrapper.find(".btn-print-edit").toggle(frappe.user.has_role("System Manager"));
			if (frappe.model.get_doc(":Print Settings", "Print Settings").enable_raw_printing == "1") {
				this.wrapper.find(".btn-printer-setting").toggle(true);
			}
		},
		bind_events: function () {
			var this$1 = this;

			var me = this;
			this.wrapper.find(".btn-print-close").click(function () {
				me.hide();
			});

			// hide print view on pressing escape, only if there is no focus on any input
			$(document).on("keydown", function (e) {
				if (e.which === 27 && me.frm && e.target === document.body) {
					me.hide();
				}
			});

			this.print_formats = frappe.meta.get_print_formats(this.frm.meta.name);
			this.print_letterhead = this.wrapper
				.find(".print-letterhead")
				.on("change", function () { me.print_sel.trigger("change"); })
				.prop("checked", cint(
					(frappe.model.get_doc(":Print Settings", "Print Settings")
						|| { with_letterhead: 1 }).with_letterhead) ? true : false);
			this.print_sel = this.wrapper
				.find(".print-preview-select")
				.on("change", function () {
					me.set_default_print_language();
					me.multilingual_preview();
				});

			//On selection of language get code and pass it to preview method
			this.language_sel = this.wrapper
				.find(".languages")
				.on("change", function () {
					me.lang_code = me.language_sel.val();
					me.multilingual_preview();
				});

			this.wrapper.find(".btn-printer-setting").click(function () {
				me.printer_setting_dialog();
			});

			this.wrapper.find(".btn-print-print").click(function () {
				me.printit();
			});

			this.wrapper.find(".btn-print-preview").click(function () {
				me.new_page_preview();
			});

			this.wrapper.find(".btn-download-pdf").click(function () {
				var w = window.open(
					frappe.urllib.get_full_url("/api/method/frappe.utils.print_format.download_pdf?"
						+ "doctype=" + encodeURIComponent(me.frm.doc.doctype)
						+ "&name=" + encodeURIComponent(me.frm.doc.name)
						+ "&format=" + encodeURIComponent(me.selected_format())
						+ "&no_letterhead=" + (me.with_letterhead() ? "0" : "1")
						+ (me.lang_code ? ("&_lang=" + me.lang_code) : ""))
				);
				if (!w) {
					frappe.msgprint(__("Please enable pop-ups")); return;
				}
			});

			this.wrapper.find(".btn-print-edit").on("click", function () {
				var print_format = me.get_print_format();
				var is_custom_format = print_format.name
					&& print_format.print_format_builder
					&& print_format.standard === 'No';
				var is_standard_but_editable = print_format.name && print_format.custom_format;

				if (is_standard_but_editable) {
					frappe.set_route("Form", "Print Format", print_format.name);
					return;
				}
				if (is_custom_format) {
					frappe.set_route("print-format-builder", print_format.name);
					return;
				}
				// start a new print format
				frappe.prompt([
					{
						label: __("New Print Format Name"),
						fieldname: "print_format_name",
						fieldtype: "Data",
						reqd: 1,
					},
					{
						label: __('Based On'),
						fieldname: 'based_on',
						fieldtype: 'Read Only',
						default: print_format.name || 'Standard'
					}
				], function (data) {
					frappe.route_options = {
						make_new: true,
						doctype: me.frm.doctype,
						name: data.print_format_name,
						based_on: data.based_on
					};
					frappe.set_route("print-format-builder");
				}, __("New Custom Print Format"), __("Start"));
			});

			$(document).on('new-print-format', function (e) {
				this$1.refresh_print_options();
				if (e.print_format) {
					this$1.print_sel.val(e.print_format);
				}
				// start a new print format
				frappe.prompt([
					{
						label: __("New Print Format Name"),
						fieldname: "print_format_name",
						fieldtype: "Data",
						reqd: 1,
					},
					{
						label: __('Based On'),
						fieldname: 'based_on',
						fieldtype: 'Read Only',
						default: print_format.name || 'Standard'
					}
				], function (data) {
					frappe.route_options = {
						make_new: true,
						doctype: me.frm.doctype,
						name: data.print_format_name,
						based_on: data.based_on
					};
					frappe.set_route("print-format-builder");
				}, __("New Custom Print Format"), __("Start"));
			});
		},
		setup_keyboard_shortcuts: function setup_keyboard_shortcuts() {
			var this$1 = this;

			this.wrapper.find('.print-toolbar a.btn-default').each(function (i, el) {
				frappe.ui.keys.get_shortcut_group(this$1.frm.page).add($(el));
			});
		},
		set_user_lang: function () {
			this.lang_code = this.frm.doc.language;
			// Load all languages in the field
			this.language_sel.empty()
				.add_options([{value:'', label:__("Select Language...")}]
					.concat(frappe.get_languages()))
				.val(this.lang_code);
			this.preview();
		},
		set_default_print_language: function () {
			var print_format = this.get_print_format();
			this.lang_code = print_format.default_print_language || this.frm.doc.language || frappe.boot.lang;
			this.language_sel.val(this.lang_code);
	 	},
		multilingual_preview: function () {
			var me = this;
			if (this.is_raw_printing()) {
				me.wrapper.find(".btn-print-preview").toggle(false);
				me.wrapper.find(".btn-download-pdf").toggle(false);
				me.preview();
			} else {
				me.wrapper.find(".btn-print-preview").toggle(true);
				me.wrapper.find(".btn-download-pdf").toggle(true);
				me.preview();
			}
		},
		toggle: function() {
			if(this.wrapper.is(":visible")) {
				// hide
				this.hide();
				return;
			} else {
				// show
				if(!frappe.model.can_print(this.frm.doc.doctype, this.frm)) {
					frappe.msgprint(__("You are not allowed to print this document"));
					return;
				}
				this.refresh_print_options().trigger("change");
				this.frm.page.set_view("print");
				this.set_user_lang();
				this.set_default_print_language();
				this.preview();
			}
		},
		preview: function () {
			var this$1 = this;

			var me = this;
			this.get_print_html(function (out) {
				if (!out.html) {
					out.html = this$1.get_no_preview_html();
				}
				var $print_format = me.wrapper.find(".print-format");
				$print_format.html(out.html);
				me.show_footer();
				me.set_style(out.style);

				var print_height = $print_format.get(0).offsetHeight;
				var $message = me.wrapper.find(".page-break-message");

				var print_height_inches = frappe.dom.pixel_to_inches(print_height);
				// if contents are large enough, indicate that it will get printed on multiple pages
				// Maximum height for an A4 document is 11.69 inches
				if (print_height_inches > 11.69) {
					$message.text(__('This may get printed on multiple pages'));
				} else {
					$message.text('');
				}
			});
		},
		hide: function() {
			if(this.frm.setup_done && this.frm.page.current_view_name==="print") {
				this.frm.page.set_view(this.frm.page.previous_view_name==="print" ?
					"main" : (this.frm.page.previous_view_name || "main"));
			}
		},
		show_footer: function() {
			// footer is hidden by default as reqd by pdf generation
			// simple hack to show it in print preview
			this.wrapper.find('.print-format').css({
				display: 'flex',
				flexDirection: 'column'
			});
			this.wrapper.find('.page-break').css({
				'display': 'flex',
				'flex-direction': 'column',
				'flex': '1'
			});
			this.wrapper.find('#footer-html').attr('style', "\n\t\t\tdisplay: block !important;\n\t\t\torder: 1;\n\t\t\tmargin-top: auto;\n\t\t");
		},
		printit: function () {
			var me = this;
			frappe.call({
				method: "frappe.printing.doctype.print_settings.print_settings.is_print_server_enabled",
				callback: function (data) {
					if (data.message) {
						frappe.call({
							"method": "frappe.utils.print_format.print_by_server",
							args: {
								doctype: me.frm.doc.doctype,
								name: me.frm.doc.name,
								print_format:  me.selected_format(),
								no_letterhead: me.with_letterhead() ? "0" : "1"
							},
							callback: function (data) {
							}
						});
					} else if (me.get_mapped_printer().length === 1) {
						// printer is already mapped in localstorage (applies for both raw and pdf )
						if (me.is_raw_printing()) {
							me.get_raw_commands(function (out) {
								frappe.ui.form.qz_connect().then(function () {
									var printer_map = me.get_mapped_printer()[0];
									var data = [out.raw_commands];
									var config = qz.configs.create(printer_map.printer);
									return qz.print(config, data);
								}).then(frappe.ui.form.qz_success).catch(function (err) {
									frappe.ui.form.qz_fail(err);
								});
							});
						} else {
							frappe.show_alert({
								message: __('PDF printing via "Raw Print" is not yet supported. Please remove the printer mapping in Printer Settings and try again.'),
								indicator: 'blue'
							}, 14);
							//Note: need to solve "Error: Cannot parse (FILE)<URL> as a PDF file" to enable qz pdf printing.
						}
					} else if (me.is_raw_printing()) {
						// printer not mapped in localstorage and the current print format is raw printing
						frappe.show_alert({
							message: __('Please set a printer mapping for this print format in the Printer Settings'),
							indicator: 'blue'
						}, 14);
						me.printer_setting_dialog();
					} else {
						me.new_page_preview(true);
					}
				}
			});
		},
		new_page_preview: function (printit) {
			var me = this;
			var w = window.open(frappe.urllib.get_full_url("/printview?"
				+ "doctype=" + encodeURIComponent(me.frm.doc.doctype)
				+ "&name=" + encodeURIComponent(me.frm.doc.name)
				+ (printit ? "&trigger_print=1" : "")
				+ "&format=" + encodeURIComponent(me.selected_format())
				+ "&no_letterhead=" + (me.with_letterhead() ? "0" : "1")
				+ (me.lang_code ? ("&_lang=" + me.lang_code) : "")));
			if (!w) {
				frappe.msgprint(__("Please enable pop-ups")); return;
			}
		},
		get_print_html: function (callback) {
			var print_format = this.get_print_format();
			if (print_format.raw_printing) {
				callback({
					html: this.get_no_preview_html()
				});
				return;
			}
			if (this._req) {
				this._req.abort();
			}
			this._req = frappe.call({
				method: "frappe.www.printview.get_html_and_style",
				args: {
					doc: this.frm.doc,
					print_format: this.selected_format(),
					no_letterhead: !this.with_letterhead() ? 1 : 0,
					_lang: this.lang_code,
				},
				callback: function (r) {
					if (!r.exc) {
						callback(r.message);
					}
				}
			});
		},
		get_no_preview_html: function get_no_preview_html() {
			return ("<div class=\"text-muted text-center\" style=\"font-size: 1.2em;\">\n\t\t\t" + (__("No Preview Available")) + "\n\t\t</div>") ;
		},
		get_raw_commands: function (callback) {
			// fetches rendered raw commands from the server for the current print format.
			frappe.call({
				method: "frappe.www.printview.get_rendered_raw_commands",
				args: {
					doc: this.frm.doc,
					print_format: this.selected_format(),
					_lang: this.lang_code
				},
				callback: function (r) {
					if (!r.exc) {
						callback(r.message);
					}
				}
			});
		},
		get_mapped_printer: function () {
			var this$1 = this;

			// returns a list of "print format: printer" mapping filtered by the current print format
			var print_format_printer_map = this.get_print_format_printer_map();
			if (print_format_printer_map[this.frm.doctype]) {
				return print_format_printer_map[this.frm.doctype].filter(
					function (printer_map) { return printer_map.print_format == this$1.selected_format(); });
			} else {
				return [];
			}
		},
		get_print_format_printer_map: function () {
			// returns the whole object "print_format_printer_map" stored in the localStorage.
			try {
				var print_format_printer_map = JSON.parse(localStorage.print_format_printer_map);
				return print_format_printer_map;
			} catch (e) {
				return {};
			}
		},
		refresh_print_options: function () {
			this.print_formats = frappe.meta.get_print_formats(this.frm.doctype);
			return this.print_sel
				.empty().add_options(this.print_formats);

		},
		selected_format: function () {
			return this.print_sel.val() || this.frm.meta.default_print_format || "Standard";
		},
		is_raw_printing: function (format) {
			return this.get_print_format(format).raw_printing === 1;
		},
		get_print_format: function (format) {
			if (!format) {
				format = this.selected_format();
			}

			if (locals["Print Format"] && locals["Print Format"][format]) {
				return locals["Print Format"][format]
			} else {
				return {}
			}
		},
		with_letterhead: function () {
			return this.print_letterhead.is(":checked") ? 1 : 0;
		},
		set_style: function (style) {
			frappe.dom.set_style(style || frappe.boot.print_css, "print-style");
		},
		printer_setting_dialog: function () {
			var this$1 = this;

			// dialog for the Printer Settings
			var me = this;
			this.print_format_printer_map = me.get_print_format_printer_map();
			this.data = [];
			this.data = this.print_format_printer_map[this.frm.doctype] || [];
			this.printer_list = [];
			frappe.ui.form.qz_get_printer_list().then(function (data) {
				this$1.printer_list = data;
				var dialog = new frappe.ui.Dialog({
					title: __("Printer Settings"),
					fields: [{
						fieldtype: 'Section Break'
					},
					{
						fieldname: "printer_mapping",
						fieldtype: "Table",
						label: __('Printer Mapping'),
						in_place_edit: true,
						data: this$1.data,
						get_data: function () {
							return this$1.data;
						},
						fields: [{
							fieldtype: 'Select',
							fieldname: "print_format",
							default: 0,
							options: this$1.print_formats,
							read_only: 0,
							in_list_view: 1,
							label: __('Print Format')
						}, {
							fieldtype: 'Select',
							fieldname: "printer",
							default: 0,
							options: this$1.printer_list,
							read_only: 0,
							in_list_view: 1,
							label: __('Printer')
						}]
					} ],
					primary_action: function () {
						var printer_mapping = this.get_values()["printer_mapping"];
						if (printer_mapping && printer_mapping.length) {
							var print_format_list = printer_mapping.map(function (a) { return a.print_format; });
							var has_duplicate = print_format_list.some(function (item, idx) { return print_format_list.indexOf(item) != idx; });
							if (has_duplicate)
								{ frappe.throw(__("Cannot have multiple printers mapped to a single print format.")); }
						} else {
							printer_mapping = [];
						}
						this.print_format_printer_map = me.get_print_format_printer_map();
						this.print_format_printer_map[me.frm.doctype] = printer_mapping;
						localStorage.print_format_printer_map = JSON.stringify(this.print_format_printer_map);
						this.hide();
					},
					primary_action_label: __('Save')
				});
				dialog.show();
				if (!(this$1.printer_list && this$1.printer_list.length)) {
					frappe.throw(__("No Printer is Available."));
				}
			});
		}
	});

	frappe.ui.get_print_settings = function (pdf, callback, letter_head, pick_columns) {
		var print_settings = locals[":Print Settings"]["Print Settings"];

		var default_letter_head = locals[":Company"] && frappe.defaults.get_default('company')
			? locals[":Company"][frappe.defaults.get_default('company')]["default_letter_head"]
			: '';

		var columns = [{
			fieldtype: "Check",
			fieldname: "with_letter_head",
			label: __("With Letter head")
		}, {
			fieldtype: "Select",
			fieldname: "letter_head",
			label: __("Letter Head"),
			depends_on: "with_letter_head",
			options: $.map(frappe.boot.letter_heads, function (i, d) { return d }),
			default: letter_head || default_letter_head
		}, {
			fieldtype: "Select",
			fieldname: "orientation",
			label: __("Orientation"),
			options: [
				{ "value": "Landscape", "label": __("Landscape") },
				{ "value": "Portrait", "label": __("Portrait") }
			],
			default: "Landscape"
		}];

		if (pick_columns) {
			columns.push(
				{
					label: __("Pick Columns"),
					fieldtype: "Check",
					fieldname: "pick_columns",
				},
				{
					label: __("Select Columns"),
					fieldtype: "MultiCheck",
					fieldname: "columns",
					depends_on: "pick_columns",
					columns: 2,
					options: pick_columns.map(function (df) { return ({
						label: __(df.label),
						value: df.fieldname
					}); })
				}
			);
		}

		return frappe.prompt(columns, function (data) {
			var data = $.extend(print_settings, data);
			if (!data.with_letter_head) {
				data.letter_head = null;
			}
			if (data.letter_head) {
				data.letter_head = frappe.boot.letter_heads[print_settings.letter_head];
			}
			callback(data);
		}, __("Print Settings"));
	};


	// qz tray connection wrapper
	//  - allows active and inactive connections to resolve regardless
	//  - try to connect once before firing the mimetype launcher
	//  - if connection fails, catch the reject, fire the mimetype launcher
	//  - after mimetype launcher is fired, try to connect 3 more times
	//  - display success/fail message to user
	frappe.ui.form.qz_connect = function () {
		return new Promise(function (resolve, reject) {
			frappe.ui.form.qz_init().then(function () {
				if (qz.websocket.isActive()) { // if already active, resolve immediately
					// frappe.show_alert({message: __('QZ Tray Connection Active!'), indicator: 'green'});
					resolve();
				} else {
					// try to connect once before firing the mimetype launcher
					frappe.show_alert({
						message: __('Attempting Connection to QZ Tray...'),
						indicator: 'blue'
					});
					qz.websocket.connect().then(function () {
						frappe.show_alert({
							message: __('Connected to QZ Tray!'),
							indicator: 'green'
						});
						resolve();
					}, function retry(err) {
						if (err.message === 'Unable to establish connection with QZ') {
							// if a connect was not successful, launch the mimetype, try 3 more times
							frappe.show_alert({
								message: __('Attempting to launch QZ Tray...'),
								indicator: 'blue'
							}, 14);
							window.location.assign("qz:launch");
							qz.websocket.connect({
								retries: 3,
								delay: 1
							}).then(function () {
								frappe.show_alert({
									message: __('Connected to QZ Tray!'),
									indicator: 'green'
								});
								resolve();
							},
							function () {
								frappe.throw(__('Error connecting to QZ Tray Application...<br><br> You need to have QZ Tray application installed and running, to use the Raw Print feature.<br><br><a target="_blank" href="https://qz.io/download/">Click here to Download and install QZ Tray</a>.<br> <a target="_blank" href="https://erpnext.com/docs/user/manual/en/setting-up/print/raw-printing">Click here to learn more about Raw Printing</a>.'));
								reject();
							});
						} else {
							frappe.show_alert({
								message: 'QZ Tray ' + err.toString(),
								indicator: 'red'
							}, 14);
							reject();
						}
					});
				}
			});
		});
	};

	frappe.ui.form.qz_init = function () {
		// Initializing qz tray library
		return new Promise(function (resolve) {
			if (typeof qz === "object" && typeof qz.version === "string") {
				// resolve immediately if already Initialized
				resolve();
			} else {
				var qz_required_assets = [
					"/assets/frappe/node_modules/js-sha256/build/sha256.min.js",
					"/assets/frappe/node_modules/qz-tray/qz-tray.js"
				];
				frappe.require(qz_required_assets,function () {
					qz.api.setPromiseType(function promise(resolver) {
						return new Promise(resolver);
					});
					qz.api.setSha256Type(function (data) {
						// Codacy fix
						/*global sha256*/
						return sha256(data);
					});
					resolve();
				});
				// note 'frappe.require' does not have callback on fail. Hence, any failure cannot be communicated to the user.
			}

		});
	};

	frappe.ui.form.qz_get_printer_list = function () {
		// returns the list of printers that are available to the QZ Tray
		return frappe.ui.form.qz_connect().then(function () {
			return qz.printers.find();
		}).then(function (data) {
			return data;
		}).catch(function (err) {
			frappe.ui.form.qz_fail(err);
		});
	};

	frappe.ui.form.qz_success = function () {
		// notify qz successful print
		frappe.show_alert({
			message: __('Print Sent to the printer!'),
			indicator: 'green'
		});
	};

	frappe.ui.form.qz_fail = function (e) {
		// notify qz errors
		frappe.show_alert({
			message: __("QZ Tray Failed: ") + e.toString(),
			indicator: 'red'
		}, 20);
	};

	frappe.provide('frappe.ui.form');
	frappe.provide('frappe.success_action');

	frappe.ui.form.SuccessAction = class SuccessAction {
		constructor(form) {
			this.form = form;
			this.load_setting();
		}

		load_setting() {
			var this$1 = this;

			this.setting = frappe.boot.success_action
				.find(function (setting) { return setting.ref_doctype === this$1.form.doctype; });
		}

		show() {
			if (!this.setting) { return; }
			if (this.form.doc.docstatus === 0 && !this.is_first_creation()) { return; }

			this.prepare_dom();
			this.show_alert();
		}

		prepare_dom() {
			this.container = $(document.body).find('.success-container');
			if (!this.container.length) {
				this.container = $('<div class="success-container">').appendTo(document.body);
			}
		}

		show_alert() {
			var this$1 = this;

			frappe.db.count(this.form.doctype)
				.then(function (count) {
					var setting = this$1.setting;
					var message = count === 1 ?
						setting.first_success_message :
						setting.message;

					var $buttons = this$1.get_actions().map(function (action) {
						var $btn = $(("<button class=\"next-action\"><span>" + (action.label) + "</span></button>"));
						$btn.click(function () { return action.action(this$1.form); });
						return $btn;
					});

					var next_action_container = $("<div class=\"next-action-container\"></div>");
					next_action_container.append($buttons);
					var html = next_action_container;

					frappe.show_alert({
						message: message,
						body: html,
						indicator: 'green',
					}, setting.action_timeout || 7);
				});
		}

		get_actions() {
			var this$1 = this;

			var actions = [];
			var checked_actions = this.setting.next_actions.split("\n");
			checked_actions
				.forEach(function (action) {
					if (typeof action === 'string' && this$1.default_actions[action]) {
						actions.push(this$1.default_actions[action]);
					} else if (typeof action === 'object') {
						actions.push(action);
					}
				});

			return actions;
		}

		get default_actions() {
			return {
				'new': {
					label: __('New'),
					action: function (frm) { return frappe.new_doc(frm.doctype); }
				},
				'print': {
					label: __('Print'),
					action: function (frm) { return frm.print_doc(); }
				},
				'email': {
					label: __('Email'),
					action: function (frm) { return frm.email_doc(); }
				},
				'list': {
					label: __('View All'),
					action: function (frm) {
						frappe.set_route('List', frm.doctype);
					}
				}
			};
		}

		is_first_creation() {
			var ref = this.form.doc;
			var modified = ref.modified;
			var creation = ref.creation;

			// strip out milliseconds
			modified = modified.split('.')[0];
			creation = creation.split('.')[0];

			return modified === creation;
		}

	};

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	frappe.provide("frappe.ui.form.handlers");

	frappe.ui.form.get_event_handler_list = function(doctype, fieldname) {
		if(!frappe.ui.form.handlers[doctype]) {
			frappe.ui.form.handlers[doctype] = {};
		}
		if(!frappe.ui.form.handlers[doctype][fieldname]) {
			frappe.ui.form.handlers[doctype][fieldname] = [];
		}
		return frappe.ui.form.handlers[doctype][fieldname];
	};

	frappe.ui.form.on = frappe.ui.form.on_change = function(doctype, fieldname, handler) {
		var add_handler = function(fieldname, handler) {
			var handler_list = frappe.ui.form.get_event_handler_list(doctype, fieldname);
			handler_list.push(handler);

			// add last handler to events so it can be called as
			// frm.events.handler(frm)
			if(cur_frm && cur_frm.doctype===doctype) {
				cur_frm.events[fieldname] = handler;
			}
		};

		if (!handler && $.isPlainObject(fieldname)) {
			// a dict of handlers {fieldname: handler, ...}
			for (var key in fieldname) {
				var fn = fieldname[key];
				if (typeof fn === "function") {
					add_handler(key, fn);
				}
			}
		} else {
			add_handler(fieldname, handler);
		}
	};

	// remove standard event handlers
	frappe.ui.form.off = function(doctype, fieldname, handler) {
		var handler_list = frappe.ui.form.get_event_handler_list(doctype, fieldname);
		if(handler_list.length) {
			frappe.ui.form.handlers[doctype][fieldname] = [];
		}

		if(cur_frm && cur_frm.doctype===doctype && cur_frm.events[fieldname]) {
			delete cur_frm.events[fieldname];
		}

		if(cur_frm && cur_frm.cscript && cur_frm.cscript[fieldname]) {
			delete cur_frm.cscript[fieldname];
		}
	};


	frappe.ui.form.trigger = function(doctype, fieldname) {
		cur_frm.script_manager.trigger(fieldname, doctype);
	};

	frappe.ui.form.ScriptManager = Class.extend({
		init: function(opts) {
			$.extend(this, opts);
		},
		make: function(ControllerClass) {
			this.frm.cscript = $.extend(this.frm.cscript,
				new ControllerClass({frm: this.frm}));
		},
		trigger: function(event_name, doctype, name) {
			// trigger all the form level events that
			// are bound to this event_name
			var me = this;
			doctype = doctype || this.frm.doctype;
			name = name || this.frm.docname;

			var tasks = [];
			var handlers = this.get_handlers(event_name, doctype);

			// helper for child table
			this.frm.selected_doc = frappe.get_doc(doctype, name);

			var runner = function (_function, is_old_style) {
				var _promise = null;
				if(is_old_style) {
					// old style arguments (doc, cdt, cdn)
					_promise = me.frm.cscript[_function](me.frm.doc, doctype, name);
				} else {
					// new style (frm, doctype, name)
					_promise = _function(me.frm, doctype, name);
				}

				// if the trigger returns a promise, return it,
				// or use the default promise frappe.after_ajax
				if (_promise && _promise.then) {
					return _promise;
				} else {
					return frappe.after_server_call();
				}
			};

			// make list of functions to be run serially
			handlers.new_style.forEach(function (_function) {
				if(event_name==='setup') {
					// setup must be called immediately
					runner(_function, false);
				} else {
					tasks.push(function () { return runner(_function, false); });
				}
			});

			handlers.old_style.forEach(function (_function) {
				if(event_name==='setup') {
					// setup must be called immediately
					runner(_function, true);
				} else {
					tasks.push(function () { return runner(_function, true); });
				}
			});

			// run them serially
			return frappe.run_serially(tasks);
		},
		has_handlers: function(event_name, doctype) {
			var handlers = this.get_handlers(event_name, doctype);
			return handlers && (handlers.old_style.length || handlers.new_style.length);
		},
		get_handlers: function(event_name, doctype) {
			var handlers = {
				old_style: [],
				new_style: []
			};
			if(frappe.ui.form.handlers[doctype] && frappe.ui.form.handlers[doctype][event_name]) {
				$.each(frappe.ui.form.handlers[doctype][event_name], function(i, fn) {
					handlers.new_style.push(fn);
				});
			}
			if(this.frm.cscript[event_name]) {
				handlers.old_style.push(event_name);
			}
			if(this.frm.cscript["custom_" + event_name]) {
				handlers.old_style.push("custom_" + event_name);
			}
			return handlers;
		},
		setup: function() {
			var doctype = this.frm.meta;
			var me = this;

			// js
			var cs = doctype.__js;
			if(cs) {
				var tmp = eval(cs);
			}

			if(doctype.__custom_js) {
				try {
					eval(doctype.__custom_js);
				} catch(e) {
					frappe.msgprint({
						title: __('Error in Custom Script'),
						indicator: 'orange',
						message: '<pre class="small"><code>' + e.stack  + '</code></pre>'
					});
				}
			}

			function setup_add_fetch(df) {
				if((['Data', 'Read Only', 'Text', 'Small Text', 'Currency',
					'Text Editor', 'Code', 'Link', 'Float', 'Int', 'Date', 'Select'].includes(df.fieldtype) || df.read_only==1)
					&& df.fetch_from && df.fetch_from.indexOf(".")!=-1) {
					var parts = df.fetch_from.split(".");
					me.frm.add_fetch(parts[0], parts[1], df.fieldname);
				}
			}

			// setup add fetch
			$.each(this.frm.fields, function(i, field) {
				setup_add_fetch(field.df);
				if(frappe.model.table_fields.includes(field.df.fieldtype)) {
					$.each(frappe.meta.get_docfields(field.df.options, me.frm.docname), function(i, df) {
						setup_add_fetch(df);
					});
				}
			});

			// css
			doctype.__css && frappe.dom.set_style(doctype.__css);

			this.trigger('setup');
		},
		log_error: function(caller, e) {
			frappe.show_alert("Error in Client Script.");
			console.group && console.group();
			console.log("----- error in client script -----");
			console.log("method: " + caller);
			console.log(e);
			console.log("error message: " + e.message);
			console.trace && console.trace();
			console.log("----- end of error message -----");
			console.group && console.groupEnd();
		},
		copy_from_first_row: function(parentfield, current_row, fieldnames) {
			var data = this.frm.doc[parentfield];
			if(data.length===1 || data[0]===current_row) { return; }

			if(typeof fieldnames==='string') {
				fieldnames = [fieldnames];
			}

			$.each(fieldnames, function(i, fieldname) {
				frappe.model.set_value(current_row.doctype, current_row.name, fieldname,
					data[0][fieldname]);
			});
		}
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt
	/* eslint-disable no-console */

	window.refresh_many = function(flist, dn, table_field) {
		for(var i in flist) {
			if (table_field)
				{ refresh_field(flist[i], dn, table_field); }
			else
				{ refresh_field(flist[i]); }
		}
	};

	window.refresh_field = function(n, docname, table_field) {
		// multiple
		if(typeof n==typeof [])
			{ refresh_many(n, docname, table_field); }

		if (n && typeof n==='string' && table_field){
			var grid = cur_frm.fields_dict[table_field].grid,
				field = frappe.utils.filter_dict(grid.docfields, {fieldname: n});
			if (field && field.length){
				field = field[0];
				var meta = frappe.meta.get_docfield(field.parent, field.fieldname, docname);
				$.extend(field, meta);
				if (docname){
					cur_frm.fields_dict[table_field].grid.grid_rows_by_docname[docname].refresh_field(n);
				} else {
					cur_frm.fields_dict[table_field].grid.refresh();
				}
			}
		} else if(cur_frm) {
			cur_frm.refresh_field(n);
		}
	};

	window.set_field_options = function(n, txt) {
		cur_frm.set_df_property(n, 'options', txt);
	};

	window.toggle_field = function(n, hidden) {
		var df = frappe.meta.get_docfield(cur_frm.doctype, n, cur_frm.docname);
		if(df) {
			df.hidden = hidden;
			refresh_field(n);
		} else {
			console.log((hidden ? "hide_field" : "unhide_field") + " cannot find field " + n);
		}
	};

	window.hide_field = function(n) {
		if(cur_frm) {
			if(n.substr) { toggle_field(n, 1); }
			else {
				for(var i in n) { toggle_field(n[i], 1); }
			}
		}
	};

	window.unhide_field = function(n) {
		if(cur_frm) {
			if(n.substr) { toggle_field(n, 0); }
			else {
				for(var i in n) { toggle_field(n[i], 0); }
			}
		}
	};

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt



	frappe.ui.form.AssignTo = Class.extend({
		init: function(opts) {
			var me = this;

			$.extend(this, opts);
			this.btn = this.parent.find(".add-assignment").on("click", function() { me.add(); });
			this.btn_wrapper = this.btn.parent();

			this.refresh();
		},
		refresh: function() {
			if(this.frm.doc.__islocal) {
				this.parent.toggle(false);
				return;
			}
			this.parent.toggle(true);
			this.render(this.frm.get_docinfo().assignments);
		},
		render: function(d) {
			var me = this;
			this.frm.get_docinfo().assignments = d;
			this.parent.find(".assignment-row").remove();

			if(me.primary_action) {
				me.primary_action.remove();
				me.primary_action = null;
			}

			if(this.dialog) {
				this.dialog.hide();
			}

			if(d && d.length) {
				for(var i=0; i<d.length; i++) {
					var info = frappe.user_info(d[i].owner);
					info.assign_to_name = d[i].name;
					info.owner = d[i].owner;
					info.avatar = frappe.avatar(d[i].owner);
					info.description = d[i].description || "";

					info._fullname = info.fullname;
					if(info.fullname.length > 10) {
						info._fullname = info.fullname.substr(0, 10) + '...';
					}

					$(repl('<li class="assignment-row">\
					<a class="close" data-owner="%(owner)s">&times;</a>\
					%(avatar)s\
					<span><a href="#Form/ToDo/%(assign_to_name)s">%(_fullname)s</a></span>\
				</li>', info))
						.insertBefore(this.parent.find('.add-assignment'));

					if(d[i].owner===frappe.session.user) {
						me.primary_action = this.frm.page.add_menu_item(__("Assignment Complete"), function() {
							me.remove(frappe.session.user);
						}, "fa fa-check", "btn-success");
					}

					if(!(d[i].owner === frappe.session.user || me.frm.perm[0].write)) {
						me.parent.find('a.close').remove();
					}
				}

				// set remove
				this.parent.find('a.close').click(function() {
					me.remove($(this).attr('data-owner'));
					return false;
				});

				//this.btn_wrapper.addClass("hide");
			}
		},
		add: function() {
			var me = this;

			if(this.frm.is_new()) {
				frappe.throw(__("Please save the document before assignment"));
				return;
			}

			if(!me.assign_to) {
				me.assign_to = new frappe.ui.form.AssignToDialog({
					obj: me,
					method: 'frappe.desk.form.assign_to.add',
					doctype: me.frm.doctype,
					docname: me.frm.docname,
					callback: function(r) {
						me.render(r.message);
					}
				});
			}
			me.assign_to.dialog.clear();

			if(me.frm.meta.title_field) {
				me.assign_to.dialog.set_value("description", me.frm.doc[me.frm.meta.title_field]);
			}

			me.assign_to.dialog.show();
			me.assign_to = null;
		},
		remove: function(owner) {
			var me = this;

			if(this.frm.is_new()) {
				frappe.throw(__("Please save the document before removing assignment"));
				return;
			}

			frappe.call({
				method:'frappe.desk.form.assign_to.remove',
				args: {
					doctype: me.frm.doctype,
					name: me.frm.docname,
					assign_to: owner
				},
				callback:function(r,rt) {
					me.render(r.message);
				}
			});
		}
	});


	frappe.ui.form.AssignToDialog = Class.extend({
		init: function(opts){
			var me = this;
			var dialog = new frappe.ui.Dialog({
				title: __('Add to To Do'),
				fields: [
					{ fieldtype: 'Link', fieldname: 'assign_to', options: 'User', label: __("Assign To"), reqd: true, filters: { 'user_type': 'System User' }},
					{ fieldtype: 'Check', fieldname: 'myself', label: __("Assign to me"), "default": 0 },
					{ fieldtype: 'Small Text', fieldname: 'description', label: __("Comment") },
					{ fieldtype: 'Section Break' },
					{ fieldtype: 'Column Break' },
					{ fieldtype: 'Date', fieldname: 'date', label: __("Complete By") },
					{ fieldtype: 'Column Break' },
					{ fieldtype: 'Select', fieldname: 'priority', label: __("Priority"),
						options: [
							{ value: 'Low', label: __('Low') },
							{ value: 'Medium', label: __('Medium') },
							{ value: 'High', label: __('High') }
						],
						// Pick up priority from the source document, if it exists and is available in ToDo
						'default': ["Low", "Medium", "High"].includes(opts.obj.frm && opts.obj.frm.doc.priority
							? opts.obj.frm.doc.priority : 'Medium')
					} ],
				primary_action: function() { frappe.ui.add_assignment(opts, this); },
				primary_action_label: __("Add")
			});
			$.extend(me, dialog);

			me.dialog = dialog;

			me.dialog.fields_dict.assign_to.get_query = "frappe.core.doctype.user.user.user_query";

			var myself = me.dialog.get_input("myself").on("click", function() {
				me.toggle_myself(this);
			});
			me.toggle_myself(myself);
		},
		toggle_myself: function(myself) {
			var me = this;
			if($(myself).prop("checked")) {
				me.dialog.set_value("assign_to", frappe.session.user);
				me.dialog.get_field("notify").$wrapper.toggle(false);
				me.dialog.get_field("assign_to").$wrapper.toggle(false);
			} else {
				me.dialog.set_value("assign_to", "");
				me.dialog.get_field("assign_to").$wrapper.toggle(true);
			}
		},

	});

	frappe.ui.add_assignment = function(opts, dialog) {
		var assign_to = dialog.fields_dict.assign_to.get_value();
		var args = dialog.get_values();
		if(args && assign_to) {
			dialog.set_message('Assigning...');
			return frappe.call({
				method: opts.method,
				args: $.extend(args, {
					doctype: opts.doctype,
					name: opts.docname,
					assign_to: assign_to,
					bulk_assign:  opts.bulk_assign || false,
					re_assign: opts.re_assign || false
				}),
				btn: dialog.get_primary_btn(),
				callback: function(r) {
					if(!r.exc) {
						if(opts.callback){
							opts.callback(r);
						}
						dialog && dialog.hide();
					} else {
						dialog.clear_message();
					}
				},
			});
		}
	};

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt



	frappe.ui.form.Attachments = Class.extend({
		init: function(opts) {
			$.extend(this, opts);
			this.make();
		},
		make: function() {
			var me = this;
			this.parent.find(".add-attachment").click(function() {
				me.new_attachment();
			});
			this.add_attachment_wrapper = this.parent.find(".add_attachment").parent();
			this.attachments_label = this.parent.find(".attachments-label");
		},
		max_reached: function() {
			// no of attachments
			var n = Object.keys(this.get_attachments()).length;

			// button if the number of attachments is less than max
			if(n < this.frm.meta.max_attachments || !this.frm.meta.max_attachments) {
				return false;
			}
			return true;
		},
		refresh: function() {
			var me = this;

			if(this.frm.doc.__islocal) {
				this.parent.toggle(false);
				return;
			}
			this.parent.toggle(true);
			this.parent.find(".attachment-row").remove();

			var max_reached = this.max_reached();
			this.add_attachment_wrapper.toggleClass("hide", !max_reached);

			// add attachment objects
			var attachments = this.get_attachments();
			if(attachments.length) {
				attachments.forEach(function(attachment) {
					me.add_attachment(attachment);
				});
			} else {
				this.attachments_label.removeClass("has-attachments");
			}

		},
		get_attachments: function() {
			return this.frm.get_docinfo().attachments;
		},
		add_attachment: function(attachment) {
			var file_name = attachment.file_name;
			var file_url = this.get_file_url(attachment);
			var fileid = attachment.name;
			if (!file_name) {
				file_name = file_url;
			}

			var me = this;

			var $attach = $(frappe.render_template("attachment", {
				"file_path": "/desk#Form/File/" + fileid,
				"icon": attachment.is_private ? "fa fa-lock" : "fa fa-unlock-alt",
				"file_name": file_name,
				"file_url": frappe.urllib.get_full_url(file_url)
			})).insertAfter(this.attachments_label.addClass("has-attachments"));

			var $close =
				$attach.find(".close")
				.data("fileid", fileid)
				.click(function() {
					var remove_btn = this;
					frappe.confirm(__("Are you sure you want to delete the attachment?"),
						function() {
							me.remove_attachment($(remove_btn).data("fileid"));
						}
					);
					return false
				});

			if(!frappe.model.can_write(this.frm.doctype, this.frm.name)) {
				$close.remove();
			}
		},
		get_file_url: function(attachment) {
			var file_url = attachment.file_url;
			if (!file_url) {
				if (attachment.file_name.indexOf('files/') === 0) {
					file_url = '/' + attachment.file_name;
				}
				else {
					file_url = '/files/' + attachment.file_name;
				}
			}
			// hash is not escaped, https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI
			return encodeURI(file_url).replace(/#/g, '%23');
		},
		get_file_id_from_file_url: function(file_url) {
			var fid;
			$.each(this.get_attachments(), function(i, attachment) {
				if (attachment.file_url === file_url) {
					fid = attachment.name;
					return false;
				}
			});
			return fid;
		},
		remove_attachment_by_filename: function(filename, callback) {
			this.remove_attachment(this.get_file_id_from_file_url(filename), callback);
		},
		remove_attachment: function(fileid, callback) {
			if (!fileid) {
				if (callback) { callback(); }
				return;
			}

			var me = this;
			return frappe.call({
				method: 'frappe.desk.form.utils.remove_attach',
				args: {
					fid: fileid,
					dt: me.frm.doctype,
					dn: me.frm.docname
				},
				callback: function(r,rt) {
					if(r.exc) {
						if(!r._server_messages)
							{ frappe.msgprint(__("There were errors")); }
						return;
					}
					me.remove_fileid(fileid);
					me.frm.sidebar.reload_docinfo();
					if (callback) { callback(); }
				}
			});
		},
		new_attachment: function(fieldname) {
			var this$1 = this;
			if (this.dialog) {
				// remove upload dialog
				this.dialog.$wrapper.remove();
			}

			new frappe.ui.FileUploader({
				doctype: this.frm.doctype,
				docname: this.frm.docname,
				folder: 'Home/Attachments',
				on_success: function (file_doc) {
					this$1.attachment_uploaded(file_doc);
				}
			});
		},
		get_args: function() {
			return {
				from_form: 1,
				doctype: this.frm.doctype,
				docname: this.frm.docname,
			}
		},
		attachment_uploaded:  function(attachment) {
			this.dialog && this.dialog.hide();
			this.update_attachment(attachment);
			this.frm.sidebar.reload_docinfo();

			if(this.fieldname) {
				this.frm.set_value(this.fieldname, attachment.file_url);
			}
		},
		update_attachment: function(attachment) {
			if(attachment.name) {
				this.add_to_attachments(attachment);
				this.refresh();
			}
		},
		add_to_attachments: function (attachment) {
			var form_attachments = this.get_attachments();
			for(var i in form_attachments) {
				// prevent duplicate
				if(form_attachments[i]["name"] === attachment.name) { return; }
			}
			form_attachments.push(attachment);
		},
		remove_fileid: function(fileid) {
			var attachments = this.get_attachments();
			var new_attachments = [];
			$.each(attachments, function(i, attachment) {
				if(attachment.name!=fileid) {
					new_attachments.push(attachment);
				}
			});
			this.frm.get_docinfo().attachments = new_attachments;
			this.refresh();
		}
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt



	frappe.ui.form.Share = Class.extend({
		init: function(opts) {
			$.extend(this, opts);
		},
		refresh: function() {
			this.render_sidebar();
		},
		render_sidebar: function() {
			var me = this;
			this.parent.empty();

			var shared = this.shared || this.frm.get_docinfo().shared;
			shared = shared.filter(function(d) { return d });
			var users = [];
			for (var i=0, l=shared.length; i < l; i++) {
				var s = shared[i];

				if (s.everyone) {
					users.push({
						icon: "octicon octicon-megaphone text-muted",
						avatar_class: "avatar-empty share-doc-btn shared-with-everyone",
						title: __("Shared with everyone")
					});
				} else {
					var user_info = frappe.user_info(s.user);
					users.push({
						image: user_info.image,
						fullname: user_info.fullname,
						abbr: user_info.abbr,
						color: user_info.color,
						title: __("Shared with {0}", [user_info.fullname])
					});
				}
			}

			if (!me.frm.doc.__islocal) {
				users.push({
					icon: "octicon octicon-plus text-muted",
					avatar_class: "avatar-empty share-doc-btn",
					title: __("Share")
				});
			}

			this.parent.append(frappe.render_template("users_in_sidebar", {"users": users}));
			this.parent.find(".avatar").on("click", function() {
				me.frm.share_doc();
			});
		},
		show: function() {
			var me = this;
			var d = new frappe.ui.Dialog({
				title: __("Share {0} with", [this.frm.doc.name]),
			});

			this.dialog = d;
			this.dirty = false;

			frappe.call({
				method: "frappe.share.get_users",
				args: {
					doctype: this.frm.doctype,
					name: this.frm.doc.name
				},
				callback: function(r) {
					me.render_shared(r.message || []);
				}
			});

			$(d.body).html('<p class="text-muted">' + __("Loading...") + '</p>');

			d.onhide = function() {
				// reload comments
				if(me.dirty) { me.frm.sidebar.reload_docinfo(); }
			};

			d.show();
		},
		render_shared: function(shared) {
			if(shared)
				{ this.shared = shared; }
			var d = this.dialog;
			$(d.body).empty();

			var everyone = {};
			$.each(this.shared, function(i, s) {
				// pullout everyone record from shared list
				if (s && s.everyone) {
					everyone = s;
				}
			});

			$(frappe.render_template("set_sharing", {frm: this.frm, shared: this.shared, everyone: everyone}))
				.appendTo(d.body);

			if(frappe.model.can_share(null, this.frm)) {
				this.make_user_input();
				this.add_share_button();
				this.set_edit_share_events();
			} else {
				// if cannot share, disable sharing settings.
				$(d.body).find(".edit-share").prop("disabled", true);
			}
		},
		make_user_input: function() {
			// make add-user input
			this.dialog.share_with = frappe.ui.form.make_control({
				parent: $(this.dialog.body).find(".input-wrapper-add-share"),
				df: {
					fieldtype: "Link",
					label: __("Share With"),
					fieldname: "share_with",
					options: "User",
					filters: {
						"user_type": "System User",
						"name": ["!=", frappe.session.user]
					}
				},
				only_input: true,
				render_input: true
			});

		},
		add_share_button: function() {
			var me = this, d = this.dialog;
			$(d.body).find(".btn-add-share").on("click", function() {
				var user = d.share_with.get_value();
				if(!user) {
					return;
				}
				frappe.call({
					method: "frappe.share.add",
					args: {
						doctype: me.frm.doctype,
						name: me.frm.doc.name,
						user: user,
						read: $(d.body).find(".add-share-read").prop("checked") ? 1 : 0,
						write: $(d.body).find(".add-share-write").prop("checked") ? 1 : 0,
						share: $(d.body).find(".add-share-share").prop("checked") ? 1 : 0,
						notify: 1,
					},
					btn: this,
					callback: function(r) {
						$.each(me.shared, function(i, s) {
							if(s && s.user===r.message.user) {
								// re-adding / remove the old share rule.
								delete me.shared[i];
							}
						});
						me.dirty = true;
						me.shared.push(r.message);
						me.render_shared();
						me.frm.shared.refresh();
					}
				});
			});
		},
		set_edit_share_events: function() {
			var me = this, d = this.dialog;
			$(d.body).find(".edit-share").on("click", function() {
				var user = $(this).parents(".shared-user:first").attr("data-user") || "",
					value = $(this).prop("checked") ? 1 : 0,
					property = $(this).attr("name"),
					everyone = cint($(this).parents(".shared-user:first").attr("data-everyone"));

				frappe.call({
					method: "frappe.share.set_permission",
					args: {
						doctype: me.frm.doctype,
						name: me.frm.doc.name,
						user: user,
						permission_to: property,
						value: value,
						everyone: everyone
					},
					callback: function(r) {
						var found = null;
						$.each(me.shared, function(i, s) {
							// update shared object
							if(s && (s.user===user || (everyone && s.everyone===1))) {
								if(!r.message) {
									delete me.shared[i];
								} else {
									me.shared[i] = $.extend(s, r.message);
								}
								found = true;
								return false;
							}
						});

						if (!found) {
							me.shared.push(r.message);
						}

						me.dirty = true;
						me.render_shared();
						me.frm.shared.refresh();
					}
				});
			});
		},
	});

	// Copyright (c) 2019, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt



	frappe.ui.form.Review = class Review {
		constructor(ref) {
		var parent = ref.parent;
		var frm = ref.frm;

			this.parent = parent;
			this.frm = frm;
			this.points = frappe.boot.points;
			this.make_review_container();
			this.add_review_button();
			this.update_reviewers();
		}
		update_points() {
			var this$1 = this;

			return frappe.xcall('frappe.social.doctype.energy_point_log.energy_point_log.get_energy_points', {
				user: frappe.session.user
			}).then(function (data) {
				frappe.boot.points = data;
				this$1.points = data;
			});
		}
		make_review_container() {
			this.review_list_wrapper = this.parent.find('.review-list');
		}
		add_review_button() {
			var this$1 = this;


			this.review_list_wrapper.append(("\n\t\t\t<span class=\"avatar avatar-small avatar-empty btn-add-review\" title=\"" + (__('Add Review')) + "\">\n\t\t\t\t<i class=\"octicon octicon-plus text-muted\"></i>\n\t\t\t</span>\n\t\t"));

			var review_button = this.review_list_wrapper.find('.btn-add-review');

			if (!this.points.review_points) {
				review_button.click(false);
				review_button.popover({
					trigger: 'hover',
					content: function () {
						return ("<div class=\"text-medium\">\n\t\t\t\t\t\t" + (__('You do not have enough review points')) + "\n\t\t\t\t\t</div>");
					},
					html: true
				});
			} else {
				review_button.click(function () { return this$1.show_review_dialog(); });
			}
		}
		get_involved_users() {
			var this$1 = this;

			var user_fields = this.frm.meta.fields
				.filter(function (d) { return d.fieldtype === 'Link' && d.options === 'User'; })
				.map(function (d) { return d.fieldname; });

			user_fields.push('owner');
			var involved_users = user_fields.map(function (field) { return this$1.frm.doc[field]; });

			var docinfo = this.frm.get_docinfo();

			involved_users = involved_users.concat(
				docinfo.communications.map(function (d) { return d.sender && d.delivery_status==='sent'; }),
				docinfo.comments.map(function (d) { return d.owner; }),
				docinfo.versions.map(function (d) { return d.owner; }),
				docinfo.assignments.map(function (d) { return d.owner; })
			);

			return involved_users
				.uniqBy(function (u) { return u; })
				.filter(function (user) { return !['Administrator', frappe.session.user].includes(user); })
				.filter(Boolean);
		}
		show_review_dialog() {
			var this$1 = this;

			var user_options = this.get_involved_users();
			var doc_owner = this.frm.doc.owner;
			var review_dialog = new frappe.ui.Dialog({
				'title': __('Add Review'),
				'fields': [{
					fieldname: 'to_user',
					fieldtype: 'Autocomplete',
					label: __('To User'),
					reqd: 1,
					options: user_options,
					ignore_validation: 1,
					description: __('Only users involved in the document are listed')
				}, {
					fieldname: 'review_type',
					fieldtype: 'Select',
					label: __('Action'),
					options: [{
						'label': __('Appreciate'),
						'value': 'Appreciation'
					}, {
						'label': __('Criticize'),
						'value': 'Criticism'
					}],
					default: 'Appreciation'
				}, {
					fieldname: 'points',
					fieldtype: 'Int',
					label: __('Points'),
					reqd: 1,
					description: __(("Currently you have " + (this.points.review_points) + " review points"))
				}, {
					fieldtype: 'Small Text',
					fieldname: 'reason',
					reqd: 1,
					label: __('Reason')
				}],
				primary_action: function (values) {
					review_dialog.disable_primary_action();
					if (values.points > this$1.points.review_points) {
						return frappe.msgprint(__('You do not have enough points'));
					}
					frappe.xcall('frappe.social.doctype.energy_point_log.energy_point_log.review', {
						doc: {
							doctype: this$1.frm.doc.doctype,
							name: this$1.frm.doc.name,
						},
						to_user: values.to_user,
						points: values.points,
						review_type: values.review_type,
						reason: values.reason
					}).then(function (review) {
						review_dialog.hide();
						review_dialog.clear();
						this$1.frm.get_docinfo().energy_point_logs.unshift(review);
						this$1.frm.timeline.refresh();
						this$1.update_reviewers();
						this$1.update_points();
					}).finally(function () {
						review_dialog.enable_primary_action();
					});
				},
				primary_action_label: __('Submit')
			});
			review_dialog.show();
		}
		update_reviewers() {
			var this$1 = this;

			var review_logs = this.frm.get_docinfo().energy_point_logs
				.filter(function (log) { return ['Appreciation', 'Criticism'].includes(log.type); });

			this.review_list_wrapper.find('.review-pill').remove();
			review_logs.forEach(function (log) {
				var review_pill = $(("\n\t\t\t\t<span class=\"review-pill\">\n\t\t\t\t\t" + (frappe.avatar(log.owner)) + "\n\t\t\t\t\t" + (frappe.energy_points.get_points(log.points)) + "\n\t\t\t\t</span>\n\t\t\t"));
				this$1.review_list_wrapper.prepend(review_pill);
				this$1.setup_detail_popover(review_pill, log);
			});
		}
		setup_detail_popover(el, data) {
			var subject = '';
			var fullname = frappe.user.full_name(data.user);
			var timestamp = "<span class=\"text-muted\">" + (frappe.datetime.comment_when(data.creation)) + "</span>";
			var message_parts = [Math.abs(data.points), fullname, timestamp];
			if (data.type === 'Appreciation') {
				if (data.points == 1) {
					subject = __('{0} appreciation point for {1} {2}', message_parts);
				} else {
					subject = __('{0} appreciation points for {1} {2}', message_parts);
				}
			} else {
				if (data.points == -1) {
					subject = __('{0} criticism point for {1} {2}', message_parts);
				} else {
					subject = __('{0} criticism points for {1} {2}', message_parts);
				}
			}
			el.popover({
				animation: true,
				trigger: 'hover',
				delay: 500,
				placement: 'top',
				template:"\n\t\t\t\t<div class=\"review-popover popover\">\n\t\t\t\t\t<div class=\"arrow\"></div>\n\t\t\t\t\t<div class=\"popover-content\"></div>\n\t\t\t\t</div>\n\t\t\t",
				content: function () {
					return ("\n\t\t\t\t\t<div class=\"text-medium\">\n\t\t\t\t\t\t<div class=\"subject\">\n\t\t\t\t\t\t\t" + subject + "\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"body\">\n\t\t\t\t\t\t\t<div>" + (data.reason) + "</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t");
				},
				html: true,
				container: 'body'
			});
			return el;
		}
	};

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	frappe.provide('frappe.ui.form');

	frappe.ui.form.DocumentFollow = class DocumentFollow {
		constructor(opts) {
			$.extend(this, opts);
			this.follow_document_link = this.parent.find('.follow-document-link');
			this.unfollow_document_link = this.parent.find('.unfollow-document-link');
			this.follow_span = this.parent.find('.anchor-document-follow > span');
			this.followed_by = this.parent.find('.followed-by');
			this.followed_by_label = this.parent.find('.followed-by-label');
		}

		refresh() {
			this.set_followers();
			this.render_sidebar();
		}

		render_sidebar() {
			var docinfo = this.frm.get_docinfo();
			var document_follow_enabled = frappe.boot.user.document_follow_notify;
			var document_can_be_followed = frappe.get_meta(this.frm.doctype).track_changes;
			if (frappe.session.user === 'Administrator'
				|| !document_follow_enabled
				|| !document_can_be_followed
			) {
				this.hide_follow_section();
				return;
			}
			this.bind_events();

			var is_followed = docinfo && docinfo.is_document_followed;

			if(is_followed > 0) {
				this.unfollow_document_link.removeClass('hidden');
				this.follow_document_link.addClass('hidden');
			} else {
				this.followed_by_label.addClass('hidden');
				this.followed_by.addClass('hidden');
				this.unfollow_document_link.addClass('hidden');
				this.follow_document_link.removeClass('hidden');
			}
		}

		bind_events() {
			var this$1 = this;

			this.follow_document_link.on('click', function () {
				this$1.follow_document_link.addClass('text-muted disable-click');
				frappe.call({
					method: 'frappe.desk.form.document_follow.follow_document',
					args: {
						'doctype': this$1.frm.doctype,
						'doc_name': this$1.frm.doc.name,
						'user': frappe.session.user,
						'force': true
					},
					callback: function (r) {
						if (r.message) {
							this$1.follow_action();
						}
					}
				});
			});

			this.unfollow_document_link.on('click', function () {
				this$1.unfollow_document_link.addClass('text-muted disable-click');
				frappe.call({
					method: 'frappe.desk.form.document_follow.unfollow_document',
					args: {
						'doctype': this$1.frm.doctype,
						'doc_name': this$1.frm.doc.name,
						'user': frappe.session.user
					},
					callback: function (r) {
						if(r.message) {
							this$1.unfollow_action();
						}
					}
				});
			});
		}

		hide_follow_section() {
			this.parent.hide();
		}

		set_followers() {
			var this$1 = this;

			this.followed_by.removeClass('hidden');
			this.followed_by_label.removeClass('hidden');
			this.followed_by.empty();
			this.get_followed_user().then(function (user) {
				$(user).appendTo(this$1.followed_by);
			});
		}

		get_followed_user() {
			var this$1 = this;

			var html = '';
			return new Promise(function (resolve) {
				frappe.call({
					method: 'frappe.desk.form.document_follow.get_follow_users',
					args: {
						'doctype': this$1.frm.doctype,
						'doc_name': this$1.frm.doc.name,
					},
				}).then(function (r) {
					this$1.count_others = 0;
					for (var d in r.message) {
						this$1.count_others++;
						if(this$1.count_others < 4){
							html += frappe.avatar(r.message[d].user, 'avatar-small');
						}
						if(this$1.count_others === 0){
							this$1.followed_by.addClass('hidden');
						}
					}
					resolve(html);
				});
			});
		}

		follow_action() {
			frappe.show_alert({
				message: __('You are now following this document. You will receive daily updates via email. You can change this in User Settings.'),
				indicator: 'orange'
			});
			this.follow_document_link.removeClass('text-muted disable-click');
			this.follow_document_link.addClass('hidden');
			this.unfollow_document_link.removeClass('hidden');
			this.set_followers();
		}

		unfollow_action() {
			frappe.show_alert({
				message: __('You unfollowed this document'),
				indicator: 'red'
			});
			this.unfollow_document_link.removeClass('text-muted disable-click');
			this.unfollow_document_link.addClass('hidden');
			this.follow_document_link.removeClass('hidden');
			this.followed_by.addClass('hidden');
			this.followed_by_label.addClass('hidden');
		}
	};

	frappe.ui.form.set_user_image = function(frm) {

		var image_section = frm.sidebar.image_section;
		var image_field = frm.meta.image_field;
		var image = frm.doc[image_field];
		var title_image = frm.page.$title_area.find('.title-image');
		var image_actions = frm.sidebar.image_wrapper.find('.sidebar-image-actions');


		image_section.toggleClass('hide', image_field ? false : true);
		title_image.toggleClass('hide', image_field ? false : true);

		if(!image_field) {
			return;
		}

		// if image field has value
		if (image) {
			image = (window.cordova && image.indexOf('http')===-1) ?
				frappe.base_url + image : image;

			image_section
				.find(".sidebar-image")
				.css("background-image", 'url("' + image + '")')
				.removeClass("hide");

			image_section
				.find('.sidebar-standard-image')
				.addClass('hide');

			title_image
				.css('background-color', '')
				.css("background-image", 'url("' + image + '")')
				.html('');

			image_actions.find('.sidebar-image-change, .sidebar-image-remove').show();

		} else {
			image_section
				.find(".sidebar-image")
				.css("background-image", null)
				.addClass("hide");

			var title = frm.get_title();

			image_section
				.find('.sidebar-standard-image')
				.removeClass('hide')
				.find('.standard-image')
				.css({'background-color': frappe.get_palette(title)})
				.html(frappe.get_abbr(title));

			title_image.css("background-image", '')
				.css({'background-color': frappe.get_palette(title)})
				.html(frappe.get_abbr(title));

			image_actions.find('.sidebar-image-change').show();
			image_actions.find('.sidebar-image-remove').hide();
		}

	};

	frappe.ui.form.setup_user_image_event = function(frm) {
		// re-draw image on change of user image
		if(frm.meta.image_field) {
			frappe.ui.form.on(frm.doctype, frm.meta.image_field, function(frm) {
				frappe.ui.form.set_user_image(frm);
			});
		}

		frm.sidebar.image_wrapper.on('click', ':not(.sidebar-image-actions)', function (e) {
			var $target = $(e.currentTarget);
			if ($target.is('a.dropdown-toggle, .dropdown')) {
				return;
			}
			var dropdown = frm.sidebar.image_wrapper.find('.sidebar-image-actions .dropdown');
			dropdown.toggleClass('open');
			e.stopPropagation();
		});

		// bind click on image_wrapper
		frm.sidebar.image_wrapper.on('click', '.sidebar-image-change, .sidebar-image-remove', function(e) {
			var $target = $(e.currentTarget);
			var field = frm.get_field(frm.meta.image_field);
			if ($target.is('.sidebar-image-change')) {
				if(!field.$input) {
					field.make_input();
				}
				field.$input.trigger('click');
			} else {
				/// on remove event for a sidebar image wrapper remove attach file.
				frm.attachments.remove_attachment_by_filename(frm.doc[frm.meta.image_field], function() {
					field.set_value('').then(function () { return frm.save(); });
				});
			}
		});
	};

	frappe.ui.form.Viewers = Class.extend({
		init: function(opts) {
			$.extend(this, opts);
		},
		get_viewers: function() {
			var docinfo = this.frm.get_docinfo();
			if (docinfo) {
				return docinfo.viewers || {};
			} else {
				return {};
			}
		},
		refresh: function(data_updated) {
			this.parent.empty();

			var viewers = this.get_viewers();

			var users = [];
			var new_users = [];
			for (var i=0, l=(viewers.current || []).length; i < l; i++) {
				var username = viewers.current[i];
				if (username===frappe.session.user) {
					// current user
					continue;
				}

				var user_info = frappe.user_info(username);
				users.push({
					image: user_info.image,
					fullname: user_info.fullname,
					abbr: user_info.abbr,
					color: user_info.color,
					title: __("{0} is currently viewing this document", [user_info.fullname])
				});

				if (viewers.new.indexOf(username)!==-1) {
					new_users.push(user_info.fullname);
				}
			}

			if (users.length) {
				this.parent.parent().removeClass("hidden");
				this.parent.append(frappe.render_template("users_in_sidebar", {"users": users}));
			} else {
				this.parent.parent().addClass("hidden");
			}

			if (data_updated && new_users.length) {
				// new user viewing this document, who wasn't viewing in the past
				if (new_users.length===1) {
					frappe.show_alert(__("{0} is currently viewing this document", [new_users[0]]));
				} else {
					frappe.show_alert(__("{0} are currently viewing this document", [frappe.utils.comma_and(new_users)]));
				}

			}
		}
	});

	frappe.ui.form.set_viewers = function(data) {
		var doctype = data.doctype;
		var docname = data.docname;
		var docinfo = frappe.model.get_docinfo(doctype, docname);
		var past_viewers = ((docinfo && docinfo.viewers) || {}).past || [];
		var viewers = data.viewers || [];

		var new_viewers = viewers.filter(function (viewer) { return !past_viewers.includes(viewer); });

		frappe.model.set_docinfo(doctype, docname, "viewers", {
			past: past_viewers.concat(new_viewers),
			new: new_viewers,
			current: viewers
		});

		if (cur_frm && cur_frm.doc && cur_frm.doc.doctype===doctype && cur_frm.doc.name==docname) {
			cur_frm.viewers.refresh(true);
		}
	};

	frappe.ui.form.Sidebar = Class.extend({
		init: function(opts) {
			$.extend(this, opts);
		},

		make: function() {
			var sidebar_content = frappe.render_template("form_sidebar", {doctype: this.frm.doctype, frm:this.frm});

			this.sidebar = $('<div class="form-sidebar overlay-sidebar hidden-xs hidden-sm"></div>')
				.html(sidebar_content)
				.appendTo(this.page.sidebar.empty());

			this.comments = this.sidebar.find(".sidebar-comments");
			this.user_actions = this.sidebar.find(".user-actions");
			this.image_section = this.sidebar.find(".sidebar-image-section");
			this.image_wrapper = this.image_section.find('.sidebar-image-wrapper');
			this.make_assignments();
			this.make_attachments();
			this.make_review();
			this.make_shared();
			this.make_viewers();

			this.make_tags();
			this.make_like();
			if (frappe.boot.user.document_follow_notify) {
				this.make_follow();
			}

			this.bind_events();
			this.setup_keyboard_shortcuts();
			this.show_auto_repeat_status();
			frappe.ui.form.setup_user_image_event(this.frm);

			this.refresh();

		},

		bind_events: function() {
			var me = this;

			// scroll to comments
			this.comments.on("click", function() {
				frappe.utils.scroll_to(me.frm.footer.wrapper.find(".form-comments"), true);
			});

			this.like_icon.on("click", function() {
				frappe.ui.toggle_like(me.like_icon, me.frm.doctype, me.frm.doc.name, function() {
					me.refresh_like();
				});
			});
		},

		setup_keyboard_shortcuts: function setup_keyboard_shortcuts() {
			// add assignment shortcut
			var assignment_link = this.sidebar.find('.add-assignment');
			frappe.ui.keys
				.get_shortcut_group(this.page)
				.add(assignment_link);
		},

		refresh: function() {
			if(this.frm.doc.__islocal) {
				this.sidebar.toggle(false);
			} else {
				this.sidebar.toggle(true);
				this.frm.assign_to.refresh();
				this.frm.attachments.refresh();
				this.frm.shared.refresh();
				if (frappe.boot.user.document_follow_notify) {
					this.frm.follow.refresh();
				}
				this.frm.viewers.refresh();
				this.frm.tags && this.frm.tags.refresh(this.frm.get_docinfo().tags);
				this.sidebar.find(".modified-by").html(__("{0} edited this {1}",
					["<strong>" + frappe.user.full_name(this.frm.doc.modified_by) + "</strong>",
						"<br>" + comment_when(this.frm.doc.modified)]));
				this.sidebar.find(".created-by").html(__("{0} created this {1}",
					["<strong>" + frappe.user.full_name(this.frm.doc.owner) + "</strong>",
						"<br>" + comment_when(this.frm.doc.creation)]));

				this.refresh_like();
				frappe.ui.form.set_user_image(this.frm);
			}
		},

		show_auto_repeat_status: function() {
			if (this.frm.meta.allow_auto_repeat && this.frm.doc.auto_repeat) {
				var me = this;
				frappe.call({
					method: "frappe.client.get_value",
					args:{
						doctype: "Auto Repeat",
						filters: {
							name: this.frm.doc.auto_repeat
						},
						fieldname: ["frequency"]
					},
					callback: function(res) {
						me.sidebar.find(".auto-repeat-status").html(__("Repeats {0}", [res.message.frequency]));
						me.sidebar.find(".auto-repeat-status").on("click", function(){
							frappe.set_route("Form", "Auto Repeat", me.frm.doc.auto_repeat);
						});
					}
				});
			}
		},

		refresh_comments: function() {
			$.map(this.frm.timeline.get_communications(), function(c) {
				return (c.communication_type==="Communication" || (c.communication_type=="Comment" && c.comment_type==="Comment")) ? c : null;
			});
			this.comments.find(".n-comments").html(this.frm.get_docinfo().total_comments);
		},

		make_tags: function() {
			if (this.frm.meta.issingle) {
				this.sidebar.find(".form-tags").toggle(false);
				return;
			}

			this.frm.tags = new frappe.ui.TagEditor({
				parent: this.sidebar.find(".tag-area"),
				frm: this.frm,
				on_change: function(user_tags) {
					this.frm.tags && this.frm.tags.refresh(user_tags);
				}
			});
		},
		make_attachments: function() {
			var me = this;
			this.frm.attachments = new frappe.ui.form.Attachments({
				parent: me.sidebar.find(".form-attachments"),
				frm: me.frm
			});
		},
		make_assignments: function() {
			this.frm.assign_to = new frappe.ui.form.AssignTo({
				parent: this.sidebar.find(".form-assignments"),
				frm: this.frm
			});
		},
		make_shared: function() {
			this.frm.shared = new frappe.ui.form.Share({
				frm: this.frm,
				parent: this.sidebar.find(".form-shared")
			});
		},
		make_viewers: function() {
			this.frm.viewers = new frappe.ui.form.Viewers({
				frm: this.frm,
				parent: this.sidebar.find(".form-viewers")
			});
		},
		add_user_action: function(label, click) {
			return $('<a>').html(label).appendTo($('<li class="user-action-row">')
				.appendTo(this.user_actions.removeClass("hidden"))).on("click", click);
		},
		clear_user_actions: function() {
			this.user_actions.addClass("hidden");
			this.user_actions.find(".user-action-row").remove();
		},

		make_like: function() {
			this.like_wrapper = this.sidebar.find(".liked-by");
			this.like_icon = this.sidebar.find(".liked-by .octicon-heart");
			this.like_count = this.sidebar.find(".liked-by .likes-count");
			frappe.ui.setup_like_popover(this.sidebar.find(".liked-by-parent"), ".liked-by");
		},
		make_follow: function(){
			this.frm.follow = new frappe.ui.form.DocumentFollow({
				frm: this.frm,
				parent: this.sidebar.find(".followed-by-section")
			});
		},
		refresh_like: function() {
			if (!this.like_icon) {
				return;
			}

			this.like_wrapper.attr("data-liked-by", this.frm.doc._liked_by);

			this.like_icon.toggleClass("text-extra-muted not-liked",
				!frappe.ui.is_liked(this.frm.doc))
				.attr("data-doctype", this.frm.doctype)
				.attr("data-name", this.frm.doc.name);

			this.like_count.text(JSON.parse(this.frm.doc._liked_by || "[]").length);
		},

		refresh_image: function() {
		},

		make_review: function() {
			if (frappe.boot.energy_points_enabled && !this.frm.is_new()) {
				this.frm.reviews = new frappe.ui.form.Review({
					parent: this.sidebar.find(".form-reviews"),
					frm: this.frm
				});
			}
		},

		reload_docinfo: function(callback) {
			var this$1 = this;

			frappe.call({
				method: "frappe.desk.form.load.get_docinfo",
				args: {
					doctype: this.frm.doctype,
					name: this.frm.docname
				},
				callback: function (r) {
					// docinfo will be synced
					if(callback) { callback(r.docinfo); }
					this$1.frm.timeline && this$1.frm.timeline.refresh();
					this$1.frm.assign_to.refresh();
					this$1.frm.attachments.refresh();
				}
			});
		}

	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// MIT License. See license.txt

	frappe.provide('frappe.timeline');
	frappe.provide('frappe.email');
	frappe.separator_element = '<div>---</div>';

	frappe.ui.form.Timeline = class Timeline {
		constructor(opts) {
			$.extend(this, opts);
			this.make();
		}

		make() {
			var this$1 = this;

			var me = this;
			this.wrapper = $(frappe.render_template("timeline",{doctype: me.frm.doctype,allow_events_in_timeline: me.frm.meta.allow_events_in_timeline})).appendTo(me.parent);

			this.display_automatic_link_email();
			this.list = this.wrapper.find(".timeline-items");
			this.email_link = this.wrapper.find(".timeline-email-import");

			this.comment_area = frappe.ui.form.make_control({
				parent: this.wrapper.find('.timeline-head'),
				df: {
					fieldtype: 'Comment',
					fieldname: 'comment',
					label: 'Comment'
				},
				mentions: this.get_names_for_mentions(),
				render_input: true,
				only_input: true,
				on_submit: function (val) {
					if(strip_html(val).trim() != "") {
						this$1.insert_comment(val, this$1.comment_area.button);
					}
				}
			});

			this.setup_email_button();
			this.setup_interaction_button();

			this.list.on("click", ".toggle-blockquote", function() {
				$(this).parent().siblings("blockquote").toggleClass("hidden");
			});

			this.setup_comment_like();

			this.list.on("click", ".btn-more", function() {
				var communications = me.get_communications();
				frappe.call({
					btn: this,
					method: "frappe.desk.form.load.get_communications",
					args: {
						doctype: me.frm.doc.doctype,
						name: me.frm.doc.name,
						start: communications.length
					},
					callback: function(r) {
						if (!r.exc) {
							if (r.message) {
								var new_communications = r.message;
								var communications = me.get_communications().concat(new_communications);
								frappe.model.set_docinfo(me.frm.doc.doctype, me.frm.doc.name, "communications", communications);

								if (new_communications.length < 20) {
									me.more = false;
								}

							} else {
								me.more = false;
							}

							me.refresh();
						}
					}
				});
			});

			this.email_link.on("click", function(e) {
				var text = $(e.currentTarget).find(".copy-to-clipboard").text();
				frappe.utils.copy_to_clipboard(text);
			});
		}

		setup_email_button() {
			var me = this;
			var selector = this.frm.doctype === "Communication"? ".btn-reply-email": ".btn-new-email";
			this.email_button = this.wrapper.find(selector)
				.on("click", function() {
					var $btn = $(this);
					var is_a_reply = true;
					if ($btn.is('.btn-new-email')) {
						is_a_reply = false;
					}

					var args = {
						doc: me.frm.doc,
						frm: me.frm,
						recipients: me.get_recipient(),
						is_a_reply: is_a_reply
					};

					if(me.frm.doctype === "Communication") {
						$.extend(args, {
							txt: "",
							last_email: me.frm.doc,
							recipients: me.frm.doc.sender,
							subject: __("Re: {0}", [me.frm.doc.subject]),
						});
					} else {
						var comment_value = frappe.markdown(me.comment_area.get_value());
						$.extend(args, {
							txt: strip_html(comment_value) ? comment_value : ''
						});
					}
					new frappe.views.CommunicationComposer(args);
				});
		}

		display_automatic_link_email() {
			var docinfo = this.frm.get_docinfo();

			if (docinfo.document_email){
				var link = __("Send an email to {0} to link it here", [("<b><a class=\"timeline-email-import-link copy-to-clipboard\">" + (docinfo.document_email) + "</a></b>")]);
				$('.timeline-email-import').html(link);
			}
		}

		setup_interaction_button() {
			var me = this;
			var selector = ".btn-new-interaction";
			this.activity_button = this.wrapper.find(selector)
				.on("click", function() {
					var args = {
						doc: me.frm.doc,
						frm: me.frm,
						recipients: me.get_recipient()
					};
					$.extend(args, {
						txt: frappe.markdown(me.comment_area.get_value())
					});
					new frappe.views.InteractionComposer(args);
				});
		}

		setup_editing_area() {
			this.$editing_area = $('<div class="timeline-editing-area">');

			this.editing_area = new frappe.ui.CommentArea({
				parent: this.$editing_area,
				mentions: this.get_names_for_mentions(),
				no_wrapper: true
			});

			this.editing_area.destroy();
		}

		refresh(scroll_to_end) {
			var me = this;
			this.last_type = "Comment";

			if(this.frm.doc.__islocal) {
				this.wrapper.toggle(false);
				return;
			}
			this.wrapper.toggle(true);
			this.list.empty();
			this.comment_area.set_value('');

			// get all communications
			var communications = this.get_communications(true);

			// append views
			var views = this.get_view_logs();
			var timeline = communications.concat(views);

			// append comments
			timeline = timeline.concat(this.get_comments());

			// append energy point logs
			timeline = timeline.concat(this.get_energy_point_logs());

			// append milestones
			timeline = timeline.concat(this.get_milestones());

			// sort
			timeline
				.filter(function (a) { return a.content; })
				.sort(function (b, c) { return me.compare_dates(b, c); })
				.forEach(function (d) {
					d.frm = me.frm;
					me.render_timeline_item(d);
				});

			me.display_automatic_link_email();

			// more btn
			if (this.more===undefined && timeline.length===20) {
				this.more = true;
			}

			if (this.more) {
				$('<div class="timeline-item">\
				<button class="btn btn-default btn-xs btn-more">More</button>\
			</div>').appendTo(me.list);
			}

			// if a created comment is not added, add the default one
			if (!timeline.find(function (comment) { return comment.comment_type === 'Created'; })) {
				me.render_timeline_item({
					content: __("created"),
					comment_type: "Created",
					communication_type: "Comment",
					sender: this.frm.doc.owner,
					communication_date: this.frm.doc.creation,
					creation: this.frm.doc.creation,
					frm: this.frm
				});
			}

			this.wrapper.find(".is-email").prop("checked", this.last_type==="Email").change();

			this.frm.sidebar.refresh_comments();

			this.frm.trigger('timeline_refresh');
		}

		compare_dates(b, c) {
			var b_date = b.communication_date ? b.communication_date : b.creation;
			var c_date = c.communication_date ? c.communication_date : c.creation;
			var comparison = new Date(b_date) > new Date(c_date) ? -1 : 1;
			return comparison;
		}

		make_editing_area(container) {
			return frappe.ui.form.make_control({
				parent: container,
				df: {
					fieldtype: 'Comment',
					fieldname: 'comment',
					label: 'Comment'
				},
				mentions: this.get_names_for_mentions(),
				render_input: true,
				only_input: true,
				no_wrapper: true
			});
		}

		render_timeline_item(c) {
			var me = this;
			this.prepare_timeline_item(c);
			var $timeline_item = $(frappe.render_template("timeline_item", {data:c, frm:this.frm}))
				.appendTo(me.list)
				.on("click", ".delete-comment", function() {
					var name = $timeline_item.data('name');
					me.delete_comment(name);
					return false;
				})
				.on('click', '.edit-comment', function(e) {
					e.preventDefault();
					var name = $timeline_item.data('name');

					// fix quill editor's tooltip
					$timeline_item.attr('style', 'overflow: visible;');
					$timeline_item.find('.timeline-content-show').attr('style', 'overflow: visible;');

					if($timeline_item.hasClass('is-editing')) {
						me.current_editing_area.submit();
					} else {
						var $edit_btn = $(this);
						var $timeline_content = $timeline_item.find('.timeline-item-content');
						var $timeline_edit = $timeline_item.find('.timeline-item-edit');
						var content = $timeline_content.html();

						// update state
						$edit_btn
							.text(__("Save"))
							.find('i')
							.removeClass('octicon-pencil')
							.addClass('octicon-check');
						$timeline_content.hide();
						$timeline_item.addClass('is-editing');

						// initialize editing area
						me.current_editing_area = me.make_editing_area($timeline_edit);
						me.current_editing_area.set_value(content);

						// submit handler
						me.current_editing_area.on_submit = function (value) {
							$timeline_edit.empty();
							$timeline_content.show();

							// set content to new val so that on save and refresh the new content is shown
							c.content = value;
							frappe.timeline.update_communication(c);
							me.update_comment(name, value);
							// all changes to the timeline_item for editing are reset after calling refresh
							me.refresh();
						};
					}

					return false;
				});


			if(c.communication_type=="Communication" && c.communication_medium==="Email") {
				this.last_type = c.communication_medium;
				this.add_reply_btn_event($timeline_item, c);
			}

		}

		add_reply_btn_event($timeline_item, c) {
			var this$1 = this;

			$timeline_item.on('click', '.reply-link, .reply-link-all', function (e) {
				var last_email = null;

				var $target = $(e.currentTarget);
				var name = $target.data().name;

				// find the email to reply to
				this$1.get_communications().forEach(function(c) {
					if(c.name == name) {
						last_email = c;
						return false;
					}
				});

				var opts = {
					doc: this$1.frm.doc,
					txt: "",
					title: __('Reply'),
					frm: this$1.frm,
					last_email: last_email,
					is_a_reply: true
				};

				if ($target.is('.reply-link-all')) {
					if (last_email) {
						opts.cc = last_email.cc;
						opts.bcc = last_email.bcc;
					}
				}

				// make the composer
				new frappe.views.CommunicationComposer(opts);
			});
		}

		prepare_timeline_item(c) {
			if(!c.sender) { c.sender = c.owner || 'Guest'; }

			if(c.sender && c.sender.indexOf("<")!==-1) {
				c.sender = c.sender.split("<")[1].split(">")[0];
			}

			if (!c.doctype && ['Comment', 'Communication'].includes(c.communication_type)) {
				c.doctype = c.communication_type;
			}

			c.user_info = frappe.user_info(c.sender);

			c["delete"] = "";
			c["edit"] = "";
			if(c.communication_type=="Comment" && (c.comment_type || "Comment") === "Comment") {
				if(frappe.model.can_delete("Comment")) {
					c["delete"] = "<a class=\"close delete-comment\" title=\"" + (__('Delete')) + "\"  href=\"#\"><i class=\"octicon octicon-x\"></i></a>";
				}

				if(frappe.user.name == c.sender || (frappe.user.name == 'Administrator')) {
					c["edit"] = "<a class=\"edit-comment text-muted\" title=\"" + (__('Edit')) + "\" href=\"#\">" + (__('Edit')) + "</a>";
				}
			}
			var communication_date = c.communication_date || c.creation;
			c.comment_on_small = comment_when(communication_date, true);
			c.comment_on = comment_when(communication_date);
			c.futur_date = communication_date > frappe.datetime.now_datetime() ? true : false;
			if(!c.fullname) {
				c.fullname = c.sender_full_name || frappe.user.full_name(c.sender);
			}

			if(c.attachments && typeof c.attachments==="string")
				{ c.attachments = JSON.parse(c.attachments); }

			if(c.communication_type=="Comment" && !c.comment_type) {
				c.comment_type = "Comment";
			}

			this.set_icon_and_color(c);

			// label view
			if(c.comment_type==="Workflow" || c.comment_type==="Label") {
				c.comment_html = repl('<span class="label label-%(style)s">%(text)s</span>', {
					style: frappe.utils.guess_style(c.content),
					text: __(c.content)
				});
			} else {
				if(c.communication_type=="Communication" && c.communication_medium=="Email") {
					c.content = c.content.split(frappe.separator_element)[0];
					c.content = frappe.utils.strip_original_content(c.content);

					c.original_content = c.content;
					c.content = frappe.utils.toggle_blockquote(c.content);
				} else if (c.communication_type==="Feedback") {
					c.content = frappe.utils.strip_original_content(c.content);

					c.original_content = c.content;
					c.content = frappe.utils.toggle_blockquote(c.content);
				}
				if(!frappe.utils.is_html(c.content)) {
					c.content_html = frappe.markdown(__(c.content));
				} else {
					c.content_html = c.content;
					c.content_html = frappe.utils.strip_whitespace(c.content_html);
				}

				if (this.is_communication_or_comment(c)) {
					c.user_content = true;
					if (!$.isArray(c._liked_by)) {
						c._liked_by = JSON.parse(c._liked_by || "[]");
					}

					c.liked_by_user = c._liked_by.indexOf(frappe.session.user)!==-1;
				}
			}

			// basic level of XSS protection
			c.content_html = frappe.dom.remove_script_and_style(c.content_html);

			// subject
			c.show_subject = false;
			if(c.subject && c.communication_type==="Communication") {
				if(this.frm.doc.subject && !this.frm.doc.subject.includes(c.subject)) {
					c.show_subject = true;
				} else if(this.frm.meta.title_field && this.frm.doc[this.frm.meta.title_field]
					&& !!this.frm.doc[this.frm.meta.title_field].includes(c.subject)) {
					c.show_subject = true;
				} else if(!this.frm.doc.name.includes(c.subject)) {
					c.show_subject = true;
				}
			}
		}

		is_communication_or_comment(c) {
			return c.communication_type==="Communication"
			|| c.communication_type==="Feedback"
			|| (c.communication_type==="Comment" && (c.comment_type==="Comment"||c.comment_type==="Relinked"));
		}

		set_icon_and_color(c) {
			if(c.communication_type == "Feedback"){
				c.icon = "octicon octicon-comment-discussion";
			} else {
				c.icon = {
					"Email": "octicon octicon-mail",
					"Chat": "octicon octicon-comment-discussion",
					"Phone": "octicon octicon-device-mobile",
					"SMS": "octicon octicon-comment",
					"Event": "fa fa-calendar",
					"Meeting": "octicon octicon-briefcase",
					"ToDo": "fa fa-check",
					"Submitted": "octicon octicon-lock",
					"Cancelled": "octicon octicon-x",
					"Assigned": "octicon octicon-person",
					"Assignment Completed": "octicon octicon-check",
					"Comment": "octicon octicon-comment-discussion",
					"Milestone": "octicon octicon-milestone",
					"Workflow": "octicon octicon-git-branch",
					"Label": "octicon octicon-tag",
					"Attachment": "octicon octicon-cloud-upload",
					"Attachment Removed": "octicon octicon-trashcan",
					"Shared": "octicon octicon-eye",
					"Unshared": "octicon octicon-circle-slash",
					"Like": "octicon octicon-heart",
					"Edit": "octicon octicon-pencil",
					"Relinked": "octicon octicon-check",
					"Reply": "octicon octicon-mail-reply"
				}[c.comment_type || c.communication_medium];

				c.icon_fg = {
					"Attachment Removed": "#333",
				}[c.comment_type || c.communication_medium];

			}
			if(!c.icon_fg)
				{ c.icon_fg = "#fff"; }
		}

		get_communications(with_versions) {
			var docinfo = this.frm.get_docinfo(),
				out = [].concat(docinfo.communications);
			if(with_versions) {
				this.build_version_comments(docinfo, out);
			}

			return out;
		}

		get_view_logs(){
			var docinfo = this.frm.get_docinfo(),
				out = [];
			for (var i = 0, list = docinfo.views; i < list.length; i += 1){
				var c = list[i];

				c.content = "<a href=\"#Form/View Log/" + (c.name) + "\"> " + (__("viewed")) + "</a>";
				c.comment_type = "Info";
				out.push(c);
			}		return out;
		}

		get_comments() {
			var docinfo = this.frm.get_docinfo();

			for (var i = 0, list = docinfo.comments; i < list.length; i += 1) {
				var c = list[i];

				this.cast_comment_as_communication(c);
			}

			return docinfo.comments;
		}

		get_energy_point_logs() {
			var energy_point_logs = this.frm.get_docinfo().energy_point_logs;
			energy_point_logs.map(function (log) {
				log.comment_type = 'Energy Points';
				log.content = frappe.energy_points.format_form_log(log);
				return log;
			});
			return energy_point_logs;
		}

		get_milestones() {
			var this$1 = this;

			var milestones = this.frm.get_docinfo().milestones;
			milestones.map(function (log) {
				log.color = 'dark';
				log.sender = log.owner;
				log.comment_type = 'Milestone';
				log.content = __('{0} changed {1} to {2}', [
					frappe.user.full_name(log.owner).bold(),
					frappe.meta.get_label(this$1.frm.doctype, log.track_field),
					log.value.bold()]);
				return log;
			});
			return milestones;
		}

		cast_comment_as_communication(c) {
			c.sender = c.comment_email;
			c.sender_full_name = c.comment_by;
			c.communication_type = 'Comment';
		}

		build_version_comments(docinfo, out) {
			var me = this;
			docinfo.versions.forEach(function(version) {
				if (!version.data) { return; }
				var data = JSON.parse(version.data);

				// comment
				if (data.comment) {
					out.push(me.get_version_comment(version, data.comment, data.comment_type));
					return;
				}

				var updater_reference_link = null;
				var updater_reference = data.updater_reference;
				if (!$.isEmptyObject(updater_reference)) {
					var label = updater_reference.label || __('via {0}', [updater_reference.doctype]);
					var doctype = updater_reference.doctype;
					var docname = updater_reference.docname;
					if (doctype && docname) {
						updater_reference_link = frappe.utils.get_form_link(
							doctype,
							docname,
							true,
							label
						);
					} else {
						updater_reference_link = label;
					}
				}

				// value changed in parent
				if (data.changed && data.changed.length) {
					var parts = [];
					data.changed.every(function(p) {
						if (p[0]==='docstatus') {
							if (p[2]==1) {
								var message = updater_reference_link
									? __('submitted this document {0}', [updater_reference_link])
									: __('submitted this document');
								out.push(me.get_version_comment(version, message));
							} else if (p[2]==2) {
								var message$1 = updater_reference_link
									? __('cancelled this document {0}', [updater_reference_link])
									: __('cancelled this document');
								out.push(me.get_version_comment(version, message$1));
							}
						} else {
							p = p.map(frappe.utils.escape_html);
							var df = frappe.meta.get_docfield(me.frm.doctype, p[0], me.frm.docname);
							if (df && !df.hidden) {
								var field_display_status = frappe.perm.get_field_display_status(df, null,
									me.frm.perm);
								if (field_display_status === 'Read' || field_display_status === 'Write') {
									parts.push(__('{0} from {1} to {2}', [
										__(df.label),
										(frappe.ellipsis(frappe.utils.html2text(p[1]), 40) || '""').bold(),
										(frappe.ellipsis(frappe.utils.html2text(p[2]), 40) || '""').bold()
									]));
								}
							}
						}
						return parts.length < 3;
					});
					if (parts.length) {
						var message;
						if (updater_reference_link) {
							message = __("changed value of {0} {1}", [parts.join(', ').bold(), updater_reference_link]);
						} else {
							message = __("changed value of {0}", [parts.join(', ').bold()]);
						}
						out.push(me.get_version_comment(version, message));
					}
				}

				// value changed in table field
				if (data.row_changed && data.row_changed.length) {
					var parts = [];
					data.row_changed.every(function(row) {
						row[3].every(function(p) {
							var df = me.frm.fields_dict[row[0]] &&
								frappe.meta.get_docfield(me.frm.fields_dict[row[0]].grid.doctype,
									p[0], me.frm.docname);

							if(df && !df.hidden) {
								var field_display_status = frappe.perm.get_field_display_status(df,
									null, me.frm.perm);

								if(field_display_status === 'Read' || field_display_status === 'Write') {
									parts.push(__('{0} from {1} to {2} in row #{3}', [
										frappe.meta.get_label(me.frm.fields_dict[row[0]].grid.doctype,
											p[0]),
										(frappe.ellipsis(p[1], 40) || '""').bold(),
										(frappe.ellipsis(p[2], 40) || '""').bold(),
										row[1]
									]));
								}
							}
							return parts.length < 3;
						});
						return parts.length < 3;
					});
					if (parts.length) {
						var message$1;
						if (updater_reference_link) {
							message$1 = __("changed values for {0} {1}", [parts.join(', '), updater_reference_link]);
						} else {
							message$1 = __("changed values for {0}", [parts.join(', ')]);
						}
						out.push(me.get_version_comment(version, message$1));
					}
				}

				// rows added / removed
				// __('added'), __('removed') # for translation, don't remove
				['added', 'removed'].forEach(function(key) {
					if(data[key] && data[key].length) {
						parts = (data[key] || []).map(function(p) {
							var df = frappe.meta.get_docfield(me.frm.doctype, p[0], me.frm.docname);
							if(df && !df.hidden) {
								var field_display_status = frappe.perm.get_field_display_status(df, null,
									me.frm.perm);

								if(field_display_status === 'Read' || field_display_status === 'Write') {
									return frappe.meta.get_label(me.frm.doctype, p[0])
								}
							}
						});
						parts = parts.filter(function(p) { return p; });
						if(parts.length) {
							out.push(me.get_version_comment(version, __("{0} rows for {1}",
								[__(key), parts.join(', ')])));
						}
					}
				});

				// creation by updater reference
				if (data.creation && data.created_by) {
					if (updater_reference_link) {
						out.push(me.get_version_comment(version, __('created {0}', [updater_reference_link]), 'Created'));
					} else {
						out.push(me.get_version_comment(version, __('created'), 'Created'));
					}
				}
			});
		}

		get_version_comment(version, text, comment_type) {
			if(!comment_type) {
				text = '<a href="#Form/Version/'+version.name+'">' + text + '</a>';
			}
			return {
				comment_type: comment_type || 'Edit',
				creation: version.creation,
				owner: version.owner,
				version_name: version.name,
				sender: version.owner,
				comment_by: version.owner,
				content: text
			};
		}

		insert_comment(comment, btn) {
			var me = this;
			return frappe.call({
				method: "frappe.desk.form.utils.add_comment",
				args: {
					reference_doctype: this.frm.doctype,
					reference_name: this.frm.docname,
					content: comment,
					comment_email: frappe.session.user
				},
				btn: btn,
				callback: function(r) {
					if(!r.exc) {
						me.comment_area.set_value('');
						frappe.utils.play_sound("click");
						frappe.timeline.new_communication(r.message);
					}
				}
			});

		}

		delete_comment(name) {
			var me = this;

			frappe.confirm(__('Delete comment?'), function() {
				return frappe.call({
					method: "frappe.client.delete",
					args: {
						doctype: "Comment",
						name: name
					},
					callback: function(r) {
						if(!r.exc) {
							frappe.utils.play_sound("delete");

							me.frm.get_docinfo().communications =
								$.map(me.frm.get_docinfo().communications,
									function(v) {
										if(v.name==name) { return null; }
										else { return v; }
									}
								);
							me.refresh(true);
						}
					}
				});
			});
		}

		/**
		 * Update comment
		 *
		 * @param {string} name
		 * @param {string} content
		 *
		 * @returns {boolean}
		 */
		update_comment(name, content){
			return frappe.call({
				method: 'frappe.desk.form.utils.update_comment',
				args: { name: name, content: content },
				callback: function(r) {
					if(!r.exc) {
						frappe.utils.play_sound('click');
					}
				}
			});
		}

		get_recipient() {
			if (this.frm.email_field) {
				return this.frm.doc[this.frm.email_field];
			} else {
				return this.frm.doc.email_id || this.frm.doc.email || "";
			}
		}

		get_last_email(from_recipient) {
			var last_email = null,
				communications = this.frm.get_docinfo().communications,
				email = this.get_recipient();

			$.each(communications && communications.sort(function(a, b) { return a.creation > b.creation ? -1 : 1 }), function(i, c) {
				if(c.communication_type=='Communication' && c.communication_medium=="Email") {
					if(from_recipient) {
						if(c.sender.indexOf(email)!==-1) {
							last_email = c;
							return false;
						}
					} else {
						last_email = c;
						return false;
					}
				}
			});

			return last_email;
		}

		get_names_for_mentions() {
			var valid_users = Object.keys(frappe.boot.user_info)
				.filter(function (user) { return !["Administrator", "Guest"].includes(user); });
			valid_users = valid_users
				.filter(function (user) { return frappe.boot.user_info[user].allowed_in_mentions==1; });
			return valid_users.map(function (user) {
				return {
					id: frappe.boot.user_info[user].name,
					value: frappe.boot.user_info[user].fullname,
				}
			});
		}

		setup_comment_like() {
			this.wrapper.on("click", ".comment-likes .octicon-heart", frappe.ui.click_toggle_like);

			frappe.ui.setup_like_popover(this.wrapper, ".comment-likes");
		}
	};

	$.extend(frappe.timeline, {
		new_communication: function(communication) {
			if (!communication.communication_type) {
				communication.communication_type = 'Comment';
			}
			var docinfo = frappe.model.get_docinfo(communication.reference_doctype, communication.reference_name);
			if (docinfo && docinfo.communications) {
				var communications = docinfo.communications;
				var communication_exists = false;
				for (var i=0, l=communications.length; i<l; i++) {
					if (communications[i].name==communication.name) {
						communication_exists = true;
						break;
					}
				}

				if (!communication_exists) {
					docinfo.communications = communications.concat([communication]);
				}
			}

			if (cur_frm.doctype === communication.reference_doctype && cur_frm.docname === communication.reference_name) {
				cur_frm.timeline && cur_frm.timeline.refresh();
			}
		},

		delete_communication: function(communication) {
			var docinfo = frappe.model.get_docinfo(communication.reference_doctype, communication.reference_name);
			var index = frappe.timeline.index_of_communication(communication, docinfo);
			if (index !== -1) {
				// remove it from communications list
				docinfo.communications.splice(index, 1);
			}

			if (cur_frm.doctype === communication.reference_doctype && cur_frm.docname === communication.reference_name) {
				cur_frm.timeline && cur_frm.timeline.refresh();
			}
		},

		update_communication: function(communication) {
			var docinfo = frappe.model.get_docinfo(communication.reference_doctype, communication.reference_name);
			var index = frappe.timeline.index_of_communication(communication, docinfo);

			if (index !== -1) {
				// update
				$.extend(docinfo.communications[index], communication);
			}

			if (cur_frm.doctype === communication.reference_doctype && cur_frm.docname === communication.reference_name) {
				cur_frm.timeline && cur_frm.timeline.refresh();
			}
		},

		index_of_communication: function(communication, docinfo) {
			var index = -1;

			if (docinfo && docinfo.communications) {
				var communications = docinfo.communications;

				for (var i=0, l=communications.length; i<l; i++) {
					if (communications[i].name==communication.name) {
						index = i;
						break;
					}
				}
			}

			return index;
		}
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors

	frappe.ui.form.Footer = Class.extend({
		init: function(opts) {
			var me = this;
			$.extend(this, opts);
			this.make();
			this.make_comments();
			// render-complete
			$(this.frm.wrapper).on("render_complete", function() {
				me.refresh();
			});
		},
		make: function() {
			var me = this;
			this.wrapper = $(frappe.render_template("form_footer", {}))
				.appendTo(this.parent);
			this.wrapper.find(".btn-save").click(function() {
				me.frm.save('Save', null, this);
			});

		},
		make_comments: function() {
			this.frm.timeline = new frappe.ui.form.Timeline({
				parent: this.wrapper.find(".form-comments"),
				frm: this.frm
			});
		},
		refresh: function() {
			if(this.frm.doc.__islocal) {
				this.parent.addClass("hide");
			} else {
				this.parent.removeClass("hide");
				this.frm.timeline.refresh();
			}
		},
	});

	frappe.provide('frappe.ui.form');

	frappe.ui.form.Controller = Class.extend({
		init: function(opts) {
			$.extend(this, opts);
		}
	});

	frappe.ui.form.Form = class FrappeForm {
		constructor(doctype, parent, in_form) {
			this.docname = '';
			this.doctype = doctype;
			this.hidden = false;
			this.refresh_if_stale_for = 120;

			var me = this;
			this.opendocs = {};
			this.custom_buttons = {};
			this.sections = [];
			this.grids = [];
			this.cscript = new frappe.ui.form.Controller({frm:this});
			this.events = {};
			this.pformat = {};
			this.fetch_dict = {};
			this.parent = parent;

			this.setup_meta(doctype);

			// show in form instead of in dialog, when called using url (router.js)
			this.in_form = in_form ? true : false;

			// notify on rename
			$(document).on('rename', function(event, dt, old_name, new_name) {
				if(dt==me.doctype)
					{ me.rename_notify(dt, old_name, new_name); }
			});
		}

		setup_meta() {
			this.meta = frappe.get_doc('DocType', this.doctype);

			if(this.meta.istable) {
				this.meta.in_dialog = 1;
			}

			this.perm = frappe.perm.get_perm(this.doctype); // for create
			this.action_perm_type_map = {
				"Create": "create",
				"Save": "write",
				"Submit": "submit",
				"Update": "submit",
				"Cancel": "cancel",
				"Amend": "amend",
				"Delete": "delete"
			};
		}

		setup() {
			this.fields = [];
			this.fields_dict = {};
			this.state_fieldname = frappe.workflow.get_state_fieldname(this.doctype);

			// wrapper
			this.wrapper = this.parent;
			this.$wrapper = $(this.wrapper);
			frappe.ui.make_app_page({
				parent: this.wrapper,
				single_column: this.meta.hide_toolbar
			});
			this.page = this.wrapper.page;
			this.layout_main = this.page.main.get(0);

			this.toolbar = new frappe.ui.form.Toolbar({
				frm: this,
				page: this.page
			});

			// navigate records keyboard shortcuts
			this.add_nav_keyboard_shortcuts();

			// print layout
			this.setup_print_layout();

			// 2 column layout
			this.setup_std_layout();

			// client script must be called after "setup" - there are no fields_dict attached to the frm otherwise
			this.script_manager = new frappe.ui.form.ScriptManager({
				frm: this
			});
			this.script_manager.setup();
			this.watch_model_updates();

			if(!this.meta.hide_toolbar) {
				this.footer = new frappe.ui.form.Footer({
					frm: this,
					parent: $('<div>').appendTo(this.page.main.parent())
				});
				$("body").attr("data-sidebar", 1);
			}
			this.setup_file_drop();

			this.setup_done = true;
		}

		add_nav_keyboard_shortcuts() {
			var this$1 = this;

			frappe.ui.keys.add_shortcut({
				shortcut: 'shift+ctrl+>',
				action: function () { return this$1.navigate_records(0); },
				page: this.page,
				description: __('Go to next record'),
				ignore_inputs: true,
				condition: function () { return !this$1.is_new(); }
			});

			frappe.ui.keys.add_shortcut({
				shortcut: 'shift+ctrl+<',
				action: function () { return this$1.navigate_records(1); },
				page: this.page,
				description: __('Go to previous record'),
				ignore_inputs: true,
				condition: function () { return !this$1.is_new(); }
			});
		}

		setup_print_layout() {
			var this$1 = this;

			this.print_preview = new frappe.ui.form.PrintPreview({
				frm: this
			});

			// show edit button for print view
			this.page.wrapper.on('view-change', function () {
				this$1.toolbar.set_primary_action();
			});
		}

		setup_std_layout() {
			this.form_wrapper 	= $('<div></div>').appendTo(this.layout_main);
			this.body 			= $('<div></div>').appendTo(this.form_wrapper);

			// only tray
			this.meta.section_style='Simple'; // always simple!

			// layout
			this.layout = new frappe.ui.form.Layout({
				parent: this.body,
				doctype: this.doctype,
				frm: this,
				with_dashboard: true
			});
			this.layout.make();

			this.fields_dict = this.layout.fields_dict;
			this.fields = this.layout.fields_list;

			this.dashboard = new frappe.ui.form.Dashboard({
				frm: this,
			});

			// workflow state
			this.states = new frappe.ui.form.States({
				frm: this
			});
		}

		watch_model_updates() {
			// watch model updates
			var me = this;

			// on main doc
			frappe.model.on(me.doctype, "*", function(fieldname, value, doc) {
				// set input
				if(doc.name===me.docname) {
					if ((value==='' || value===null) && !doc[fieldname]) ; else {
						me.dirty();
					}

					var field = me.fields_dict[fieldname];
					field && field.refresh(fieldname);

					// Validate value for link field explicitly
					field && ["Link", "Dynamic Link"].includes(field.df.fieldtype) && field.validate && field.validate(value);

					me.layout.refresh_dependency();
					var object = me.script_manager.trigger(fieldname, doc.doctype, doc.name);
					return object;
				}
			});

			// on table fields
			var table_fields = frappe.get_children("DocType", me.doctype, "fields", {
				fieldtype: ["in", frappe.model.table_fields]
			});

			// using $.each to preserve df via closure
			$.each(table_fields, function(i, df) {
				frappe.model.on(df.options, "*", function(fieldname, value, doc) {
					if(doc.parent===me.docname && doc.parentfield===df.fieldname) {
						me.dirty();
						me.fields_dict[df.fieldname].grid.set_value(fieldname, value, doc);
						me.script_manager.trigger(fieldname, doc.doctype, doc.name);
					}
				});
			});
		}

		setup_file_drop() {
			var me = this;
			this.$wrapper.on('dragenter dragover', false)
				.on('drop', function(e) {
					var dataTransfer = e.originalEvent.dataTransfer;
					if (!(dataTransfer && dataTransfer.files && dataTransfer.files.length > 0)) {
						return;
					}

					e.stopPropagation();
					e.preventDefault();

					if(me.doc.__islocal) {
						frappe.msgprint(__("Please save before attaching."));
						throw "attach error";
					}

					if(me.attachments.max_reached()) {
						frappe.msgprint(__("Maximum Attachment Limit for this record reached."));
						throw "attach error";
					}

					new frappe.ui.FileUploader({
						doctype: me.doctype,
						docname: me.docname,
						files: dataTransfer.files,
						folder: 'Home/Attachments',
						on_success: function on_success(file_doc) {
							me.attachments.attachment_uploaded(file_doc);
						}
					});
				});
		}

		// REFRESH

		refresh(docname) {
			var switched = docname ? true : false;

			if(docname) {
				this.switch_doc(docname);
			}

			cur_frm = this;

			if(this.docname) { // document to show

				// set the doc
				this.doc = frappe.get_doc(this.doctype, this.docname);

				// check permissions
				if(!this.has_read_permission()) {
					frappe.show_not_permitted(__(this.doctype) + " " + __(this.docname));
					return;
				}

				// read only (workflow)
				this.read_only = frappe.workflow.is_read_only(this.doctype, this.docname);
				if (this.read_only) { this.set_read_only(true); }

				// check if doctype is already open
				if (!this.opendocs[this.docname]) {
					this.check_doctype_conflict(this.docname);
				} else {
					if (this.check_reload()) {
						return;
					}
				}

				// do setup
				if(!this.setup_done) {
					this.setup();
				}

				// load the record for the first time, if not loaded (call 'onload')
				this.trigger_onload(switched);

				// if print format is shown, refresh the format
				if(this.print_preview.wrapper.is(":visible")) {
					this.print_preview.preview();
				}

				if(switched) {
					if(this.show_print_first && this.doc.docstatus===1) {
						// show print view
						this.print_doc();
					}
				}

				// set status classes
				this.$wrapper.removeClass('validated-form')
					.toggleClass('editable-form', this.doc.docstatus===0)
					.toggleClass('submitted-form', this.doc.docstatus===1)
					.toggleClass('cancelled-form', this.doc.docstatus===2);

				this.show_conflict_message();
			}
		}

		switch_doc(docname) {
			// record switch
			if(this.docname != docname && (!this.meta.in_dialog || this.in_form) && !this.meta.istable) {
				if (this.print_preview) {
					this.print_preview.hide();
				}
			}
			// reset visible columns, since column headings can change in different docs
			this.grids.forEach(function (grid_obj) { return grid_obj.grid.visible_columns = null; });
			frappe.ui.form.close_grid_form();
			this.docname = docname;
		}

		check_reload() {
			if(this.doc && (!this.doc.__unsaved) && this.doc.__last_sync_on &&
				(new Date() - this.doc.__last_sync_on) > (this.refresh_if_stale_for * 1000)) {
				this.reload_doc();
				return true;
			}
		}

		trigger_onload(switched) {
			this.cscript.is_onload = false;
			if(!this.opendocs[this.docname]) {
				var me = this;
				this.cscript.is_onload = true;
				this.initialize_new_doc();
				$(document).trigger("form-load", [this]);
				$(this.page.wrapper).on('hide',  function() {
					$(document).trigger("form-unload", [me]);
				});
			} else {
				this.render_form(switched);
				if (this.doc.localname) {
					// trigger form-rename and remove .localname
					delete this.doc.localname;
					$(document).trigger("form-rename", [this]);
				}
			}
		}

		initialize_new_doc() {
			// moved this call to refresh function
			// this.check_doctype_conflict(docname);
			var me = this;

			// hide any open grid
			this.script_manager.trigger("before_load", this.doctype, this.docname)
				.then(function () {
					me.script_manager.trigger("onload");
					me.opendocs[me.docname] = true;
					me.render_form();

					frappe.after_ajax(function() {
						me.trigger_link_fields();
					});

					frappe.breadcrumbs.add(me.meta.module, me.doctype);
				});

			// update seen
			if(this.meta.track_seen) {
				$('.list-id[data-name="'+ me.docname +'"]').addClass('seen');
			}
		}

		render_form(switched) {
			var this$1 = this;

			if(!this.meta.istable) {
				this.layout.doc = this.doc;
				this.layout.attach_doc_and_docfields();

				this.sidebar = new frappe.ui.form.Sidebar({
					frm: this,
					page: this.page
				});
				this.sidebar.make();

				// clear layout message
				this.layout.show_message();

				frappe.run_serially([
					// header must be refreshed before client methods
					// because add_custom_button
					function () { return this$1.refresh_header(switched); },
					// trigger global trigger
					// to use this
					function () { return $(document).trigger('form-refresh', [this$1]); },
					// fields
					function () { return this$1.refresh_fields(); },
					// call trigger
					function () { return this$1.script_manager.trigger("refresh"); },
					// call onload post render for callbacks to be fired
					function () {
						if(this$1.cscript.is_onload) {
							return this$1.script_manager.trigger("onload_post_render");
						}
					},
					function () { return this$1.dashboard.after_refresh(); }
				]);
				// focus on first input

				if(this.is_new()) {
					var first = this.form_wrapper.find('.form-layout input:first');
					if(!in_list(["Date", "Datetime"], first.attr("data-fieldtype"))) {
						first.focus();
					}
				}
			} else {
				this.refresh_header(switched);
			}

			this.$wrapper.trigger('render_complete');

			if(!this.hidden) {
				this.layout.show_empty_form_message();
			}

			this.scroll_to_element();
		}

		refresh_fields() {
			this.layout.refresh(this.doc);
			this.layout.primary_button = this.$wrapper.find(".btn-primary");

			// cleanup activities after refresh
			this.cleanup_refresh(this);
		}

		cleanup_refresh() {
			if(this.fields_dict['amended_from']) {
				if (this.doc.amended_from) {
					unhide_field('amended_from');
					if (this.fields_dict['amendment_date']) { unhide_field('amendment_date'); }
				} else {
					hide_field('amended_from');
					if (this.fields_dict['amendment_date']) { hide_field('amendment_date'); }
				}
			}

			if(this.fields_dict['trash_reason']) {
				if(this.doc.trash_reason && this.doc.docstatus == 2) {
					unhide_field('trash_reason');
				} else {
					hide_field('trash_reason');
				}
			}

			if(this.meta.autoname && this.meta.autoname.substr(0,6)=='field:' && !this.doc.__islocal) {
				var fn = this.meta.autoname.substr(6);

				if (this.doc[fn]) {
					this.toggle_display(fn, false);
				}
			}

			if(this.meta.autoname=="naming_series:" && !this.doc.__islocal) {
				this.toggle_display("naming_series", false);
			}
		}

		refresh_header(switched) {
			// set title
			// main title
			if(!this.meta.in_dialog || this.in_form) {
				frappe.utils.set_title(this.meta.issingle ? this.doctype : this.docname);
			}

			// show / hide buttons
			if(this.toolbar) {
				if (switched) {
					this.toolbar.current_status = undefined;
				}
				this.toolbar.refresh();
			}

			this.dashboard.refresh();

			this.show_submit_message();
			this.clear_custom_buttons();
			this.show_web_link();
		}

		// SAVE

		save_or_update() {
			if(this.save_disabled) { return; }

			if(this.doc.docstatus===0) {
				this.save();
			} else if(this.doc.docstatus===1 && this.doc.__unsaved) {
				this.save("Update");
			}
		}

		save(save_action, callback, btn, on_error) {
			var me = this;
			return new Promise(function (resolve, reject) {
				btn && $(btn).prop("disabled", true);
				$(document.activeElement).blur();

				frappe.ui.form.close_grid_form();
				// let any pending js process finish
				setTimeout(function() {
					me.validate_and_save(save_action, callback, btn, on_error, resolve, reject);
				}, 100);
			}).then(function () {
				me.show_success_action();
			}).catch(function (e) {
				console.error(e); // eslint-disable-line
			});
		}

		validate_and_save(save_action, callback, btn, on_error, resolve, reject) {
			var this$1 = this;

			var me = this;
			if(!save_action) { save_action = "Save"; }
			this.validate_form_action(save_action, resolve);

			if((!this.meta.in_dialog || this.in_form) && !this.meta.istable) {
				frappe.utils.scroll_to(0);
			}
			var after_save = function(r) {
				if(!r.exc) {
					if (["Save", "Update", "Amend"].indexOf(save_action)!==-1) {
						frappe.utils.play_sound("click");
					}

					me.script_manager.trigger("after_save");
					// submit comment if entered
					if (me.timeline) {
						me.timeline.comment_area.submit();
					}
					me.refresh();
				} else {
					if(on_error) {
						on_error();
						reject();
					}
				}
				callback && callback(r);
				resolve();
			};

			var fail = function (e) {
				if (e) {
					console.error(e);
				}
				btn && $(btn).prop("disabled", false);
				if(on_error) {
					on_error();
					reject();
				}
			};

			if(save_action != "Update") {
				// validate
				frappe.validated = true;
				frappe.run_serially([
					function () { return this$1.script_manager.trigger("validate"); },
					function () { return this$1.script_manager.trigger("before_save"); },
					function () {
						if(!frappe.validated) {
							fail();
							return;
						}

						frappe.ui.form.save(me, save_action, after_save, btn);
					}
				]).catch(fail);
			} else {
				frappe.ui.form.save(me, save_action, after_save, btn);
			}
		}

		savesubmit(btn, callback, on_error) {
			var this$1 = this;

			var me = this;
			return new Promise(function (resolve) {
				this$1.validate_form_action("Submit");
				frappe.confirm(__("Permanently Submit {0}?", [this$1.docname]), function() {
					frappe.validated = true;
					me.script_manager.trigger("before_submit").then(function() {
						if(!frappe.validated) {
							return me.handle_save_fail(btn, on_error);
						}

						me.save('Submit', function(r) {
							if(r.exc) {
								me.handle_save_fail(btn, on_error);
							} else {
								frappe.utils.play_sound("submit");
								callback && callback();
								me.script_manager.trigger("on_submit")
									.then(function () { return resolve(me); });
							}
						}, btn, function () { return me.handle_save_fail(btn, on_error); }, resolve);
					});
				}, function () { return me.handle_save_fail(btn, on_error); } );
			});
		}

		savecancel(btn, callback, on_error) {
			var me = this;

			this.validate_form_action('Cancel');
			frappe.confirm(__("Permanently Cancel {0}?", [this.docname]), function() {
				frappe.validated = true;
				me.script_manager.trigger("before_cancel").then(function() {
					if(!frappe.validated) {
						return me.handle_save_fail(btn, on_error);
					}

					var after_cancel = function(r) {
						if(r.exc) {
							me.handle_save_fail(btn, on_error);
						} else {
							frappe.utils.play_sound("cancel");
							me.refresh();
							callback && callback();
							me.script_manager.trigger("after_cancel");
						}
					};
					frappe.ui.form.save(me, "cancel", after_cancel, btn);
				});
			}, function () { return me.handle_save_fail(btn, on_error); });
		}

		savetrash() {
			this.validate_form_action("Delete");
			frappe.model.delete_doc(this.doctype, this.docname, function() {
				window.history.back();
			});
		}

		amend_doc() {
			var this$1 = this;

			if (!this.fields_dict['amended_from']) {
				frappe.msgprint(__('"amended_from" field must be present to do an amendment.'));
				return;
			}

			frappe.xcall('frappe.client.is_document_amended', {
				'doctype': this.doc.doctype,
				'docname': this.doc.name
			}).then(function (is_amended) {
				if (is_amended) {
					frappe.throw(__('This document is already amended, you cannot ammend it again'));
				}
				this$1.validate_form_action("Amend");
				var me = this$1;
				var fn = function(newdoc) {
					newdoc.amended_from = me.docname;
					if (me.fields_dict && me.fields_dict['amendment_date'])
						{ newdoc.amendment_date = frappe.datetime.obj_to_str(new Date()); }
				};
				this$1.copy_doc(fn, 1);
				frappe.utils.play_sound("click");
			});
		}

		validate_form_action(action, resolve) {
			var perm_to_check = this.action_perm_type_map[action];
			var allowed_for_workflow = false;
			var perms = frappe.perm.get_perm(this.doc.doctype)[0];

			// Allow submit, write, cancel and create permissions for read only documents that are assigned by
			// workflows if the user already have those permissions. This is to allow for users to
			// continue through the workflow states and to allow execution of functions like Duplicate.
			if ((frappe.workflow.is_read_only(this.doctype, this.docname) && (perms["write"] ||
				perms["create"] || perms["submit"] || perms["cancel"])) || !frappe.workflow.is_read_only(this.doctype, this.docname)) {
				allowed_for_workflow = true;
			}

			if (!this.perm[0][perm_to_check] && !allowed_for_workflow) {
				if(resolve) {
					// re-enable buttons
					resolve();
				}
				frappe.throw (__("No permission to '{0}' {1}", [__(action), __(this.doc.doctype)]));
			}
		}

		// HELPERS

		enable_save() {
			this.save_disabled = false;
			this.toolbar.set_primary_action();
		}

		disable_save() {
			// IMPORTANT: this function should be called in refresh event
			this.save_disabled = true;
			this.toolbar.current_status = null;
			this.page.clear_primary_action();
		}

		handle_save_fail(btn, on_error) {
			$(btn).prop('disabled', false);
			if (on_error) {
				on_error();
			}
		}

		trigger_link_fields() {
			// trigger link fields which have default values set
			if (this.is_new() && this.doc.__run_link_triggers) {
				$.each(this.fields_dict, function(fieldname, field) {
					if (field.df.fieldtype=="Link" && this.doc[fieldname]) {
						// triggers add fetch, sets value in model and runs triggers
						field.set_value(this.doc[fieldname]);
					}
				});

				delete this.doc.__run_link_triggers;
			}
		}

		show_conflict_message() {
			if(this.doc.__needs_refresh) {
				if(this.doc.__unsaved) {
					this.dashboard.clear_headline();
					this.dashboard.set_headline_alert(__("This form has been modified after you have loaded it")
						+ '<a class="btn btn-xs btn-primary pull-right" onclick="cur_frm.reload_doc()">'
						+ __("Refresh") + '</a>', "alert-warning");
				} else {
					this.reload_doc();
				}
			}
		}

		show_submit_message() {
			if(this.meta.is_submittable
				&& this.perm[0] && this.perm[0].submit
				&& !this.is_dirty()
				&& !this.is_new()
				&& !frappe.model.has_workflow(this.doctype) // show only if no workflow
				&& this.doc.docstatus===0) {
				this.dashboard.add_comment(__('Submit this document to confirm'), 'blue', true);
			}
		}

		show_web_link() {
			if(!this.doc.__islocal && this.doc.__onload && this.doc.__onload.is_website_generator) {
				this.web_link && this.web_link.remove();
				if(this.doc.__onload.published) {
					this.add_web_link("/" + this.doc.route);
				}
			}
		}

		add_web_link(path, label) {
			label = label || "See on Website";
			this.web_link = this.sidebar.add_user_action(__(label),
				function() {}).attr("href", path || this.doc.route).attr("target", "_blank");
		}

		has_read_permission() {
			// get perm
			var dt = this.parent_doctype ? this.parent_doctype : this.doctype;
			this.perm = frappe.perm.get_perm(dt, this.doc);

			if(!this.perm[0].read) {
				return 0;
			}
			return 1;
		}

		check_doctype_conflict(docname) {
			if(this.doctype=='DocType' && docname=='DocType') {
				frappe.msgprint(__('Allowing DocType, DocType. Be careful!'));
			} else if(this.doctype=='DocType') {
				if (frappe.views.formview[docname] || frappe.pages['List/'+docname]) {
					window.location.reload();
					//	frappe.msgprint(__("Cannot open {0} when its instance is open", ['DocType']))
					// throw 'doctype open conflict'
				}
			} else {
				if (frappe.views.formview.DocType && frappe.views.formview.DocType.frm.opendocs[this.doctype]) {
					window.location.reload();
					//	frappe.msgprint(__("Cannot open instance when its {0} is open", ['DocType']))
					// throw 'doctype open conflict'
				}
			}
		}

		// rename the form
		// notify this form of renamed records
		rename_notify(dt, old, name) {
			// from form
			if(this.meta.istable)
				{ return; }

			if(this.docname == old)
				{ this.docname = name; }
			else
				{ return; }

			// cleanup
			if(this && this.opendocs[old] && frappe.meta.docfield_copy[dt]) {
				// delete docfield copy
				frappe.meta.docfield_copy[dt][name] = frappe.meta.docfield_copy[dt][old];
				delete frappe.meta.docfield_copy[dt][old];
			}

			delete this.opendocs[old];
			this.opendocs[name] = true;

			if(this.meta.in_dialog || !this.in_form) {
				return;
			}

			frappe.re_route[window.location.hash] = '#Form/' + encodeURIComponent(this.doctype) + '/' + encodeURIComponent(name);
			frappe.set_route('Form', this.doctype, name);
		}

		// ACTIONS

		print_doc() {
			this.print_preview.toggle();
		}

		navigate_records(prev) {
			var this$1 = this;

			var filters, sort_field, sort_order;
			var list_view = frappe.get_list_view(this.doctype);
			if (list_view) {
				filters = list_view.get_filters_for_args();
				sort_field = list_view.sort_field;
				sort_order = list_view.sort_order;
			} else {
				var list_settings = frappe.get_user_settings(this.doctype)['List'];
				if (list_settings) {
					filters = list_settings.filters;
					sort_field = list_settings.sort_field;
					sort_order = list_settings.sort_order;
				}
			}

			var args = {
				doctype: this.doctype,
				value: this.docname,
				filters: filters,
				sort_order: sort_order,
				sort_field: sort_field,
				prev: prev,
			};

			frappe.call('frappe.desk.form.utils.get_next', args).then(function (r) {
				if (r.message) {
					frappe.set_route('Form', this$1.doctype, r.message);
					this$1.focus_on_first_input();
				}
			});
		}

		focus_on_first_input() {
			var $first_input_el = $(frappe.container.page).find('.frappe-control:visible').eq(0);
			$first_input_el.find('input, select, textarea').focus();
		}

		rename_doc() {
			var this$1 = this;

			frappe.model.rename_doc(this.doctype, this.docname, function () { return this$1.refresh_header(); });
		}

		share_doc() {
			this.shared.show();
		}

		email_doc(message) {
			new frappe.views.CommunicationComposer({
				doc: this.doc,
				frm: this,
				subject: __(this.meta.name) + ': ' + this.docname,
				recipients: this.doc.email || this.doc.email_id || this.doc.contact_email,
				attach_document_print: true,
				message: message,
				real_name: this.doc.real_name || this.doc.contact_display || this.doc.contact_name
			});
		}

		copy_doc(onload, from_amend) {
			this.validate_form_action("Create");
			var newdoc = frappe.model.copy_doc(this.doc, from_amend);

			newdoc.idx = null;
			newdoc.__run_link_triggers = false;
			if(onload) {
				onload(newdoc);
			}
			frappe.set_route('Form', newdoc.doctype, newdoc.name);
		}

		reload_doc() {
			var this$1 = this;

			this.check_doctype_conflict(this.docname);

			if(!this.doc.__islocal) {
				frappe.model.remove_from_locals(this.doctype, this.docname);
				frappe.model.with_doc(this.doctype, this.docname, function () {
					this$1.refresh();
				});
			}
		}

		refresh_field(fname) {
			if(this.fields_dict[fname] && this.fields_dict[fname].refresh) {
				this.fields_dict[fname].refresh();
				this.layout.refresh_dependency();
			}
		}

		// UTILITIES
		add_fetch(link_field, src_field, tar_field) {
			if(!this.fetch_dict[link_field]) {
				this.fetch_dict[link_field] = {'columns':[], 'fields':[]};
			}
			this.fetch_dict[link_field].columns.push(src_field);
			this.fetch_dict[link_field].fields.push(tar_field);
		}

		has_perm(ptype) {
			return frappe.perm.has_perm(this.doctype, 0, ptype, this.doc);
		}

		dirty() {
			this.doc.__unsaved = 1;
			this.$wrapper.trigger('dirty');
		}

		get_docinfo() {
			return frappe.model.docinfo[this.doctype][this.docname];
		}

		is_dirty() {
			return this.doc.__unsaved;
		}

		is_new() {
			return this.doc.__islocal;
		}

		get_perm(permlevel, access_type) {
			return this.perm[permlevel] ? this.perm[permlevel][access_type] : null;
		}

		set_intro(txt, color) {
			this.dashboard.set_headline_alert(txt, color);
		}

		set_footnote(txt) {
			this.footnote_area = frappe.utils.set_footnote(this.footnote_area, this.body, txt);
		}

		add_custom_button(label, fn, group) {
			// temp! old parameter used to be icon
			if(group && group.indexOf("fa fa-")!==-1) { group = null; }
			var btn = this.page.add_inner_button(label, fn, group);
			if(btn) {
				this.custom_buttons[label] = btn;
			}
			return btn;
		}

		clear_custom_buttons() {
			this.page.clear_inner_toolbar();
			this.page.clear_user_actions();
			this.custom_buttons = {};
		}

		//Remove specific custom button by button Label
		remove_custom_button(label, group) {
			this.page.remove_inner_button(label, group);
		}

		set_print_heading(txt) {
			this.pformat[this.docname] = txt;
		}

		scroll_to_element() {
			if (frappe.route_options && frappe.route_options.scroll_to) {
				var scroll_to = frappe.route_options.scroll_to;
				delete frappe.route_options.scroll_to;

				var selector = [];
				for (var key in scroll_to) {
					var value = scroll_to[key];
					selector.push(repl('[data-%(key)s="%(value)s"]', {key: key, value: value}));
				}

				selector = $(selector.join(" "));
				if (selector.length) {
					frappe.utils.scroll_to(selector);
				}
			}
		}

		show_success_action() {
			var route = frappe.get_route();
			if (route[0] !== 'Form') { return; }
			if (this.meta.is_submittable && this.doc.docstatus !== 1) { return; }

			var success_action = new frappe.ui.form.SuccessAction(this);
			success_action.show();
		}

		get_doc() {
			return locals[this.doctype][this.docname];
		}

		set_currency_labels(fields_list, currency, parentfield) {
			// To set the currency in the label
			// For example Total Cost(INR), Total Cost(USD)
			if (!currency) { return; }
			var me = this;
			var doctype = parentfield ? this.fields_dict[parentfield].grid.doctype : this.doc.doctype;
			var field_label_map = {};
			var grid_field_label_map = {};

			$.each(fields_list, function(i, fname) {
				var docfield = frappe.meta.docfield_map[doctype][fname];
				if(docfield) {
					var label = __(docfield.label || "").replace(/\([^\)]*\)/g, ""); // eslint-disable-line
					if(parentfield) {
						grid_field_label_map[doctype + "-" + fname] =
							label.trim() + " (" + __(currency) + ")";
					} else {
						field_label_map[fname] = label.trim() + " (" + currency + ")";
					}
				}
			});

			$.each(field_label_map, function(fname, label) {
				me.fields_dict[fname].set_label(label);
			});

			$.each(grid_field_label_map, function(fname, label) {
				fname = fname.split("-");
				var df = frappe.meta.get_docfield(fname[0], fname[1], me.doc.name);
				if(df) { df.label = label; }
			});
		}

		field_map(fnames, fn) {
			if(typeof fnames==='string') {
				if(fnames == '*') {
					fnames = Object.keys(this.fields_dict);
				} else {
					fnames = [fnames];
				}
			}
			for (var i=0, l=fnames.length; i<l; i++) {
				var fieldname = fnames[i];
				var field = frappe.meta.get_docfield(cur_frm.doctype, fieldname, this.docname);
				if(field) {
					fn(field);
					this.refresh_field(fieldname);
				}
			}
		}

		get_docfield(fieldname1, fieldname2) {
			if(fieldname2) {
				// for child
				var doctype = this.get_docfield(fieldname1).options;
				return frappe.meta.get_docfield(doctype, fieldname2, this.docname);
			} else {
				// for parent
				return frappe.meta.get_docfield(this.doctype, fieldname1, this.docname);
			}
		}

		set_df_property(fieldname, property, value, docname, table_field) {
			var df;
			if (!docname && !table_field){
				df = this.get_docfield(fieldname);
			} else {
				var grid = this.fields_dict[table_field].grid,
					fname = frappe.utils.filter_dict(grid.docfields, {'fieldname': fieldname});
				if (fname && fname.length)
					{ df = frappe.meta.get_docfield(fname[0].parent, fieldname, docname); }
			}
			if(df && df[property] != value) {
				df[property] = value;
				refresh_field(fieldname, table_field);
			}
		}

		toggle_enable(fnames, enable) {
			this.field_map(fnames, function(field) {
				field.read_only = enable ? 0 : 1;
			});
		}

		toggle_reqd(fnames, mandatory) {
			this.field_map(fnames, function(field) {
				field.reqd = mandatory ? true : false;
			});
		}

		toggle_display(fnames, show) {
			this.field_map(fnames, function(field) {
				field.hidden = show ? 0 : 1;
			});
		}

		get_files() {
			return this.attachments
				? frappe.utils.sort(this.attachments.get_attachments(), "file_name", "string")
				: [] ;
		}

		set_query(fieldname, opt1, opt2) {
			if(opt2) {
				// on child table
				// set_query(fieldname, parent fieldname, query)
				this.fields_dict[opt1].grid.get_field(fieldname).get_query = opt2;
			} else {
				// on parent table
				// set_query(fieldname, query)
				if(this.fields_dict[fieldname]) {
					this.fields_dict[fieldname].get_query = opt1;
				}
			}
		}

		clear_table(fieldname) {
			frappe.model.clear_table(this.doc, fieldname);
		}

		add_child(fieldname, values) {
			var doc = frappe.model.add_child(this.doc, frappe.meta.get_docfield(this.doctype, fieldname).options, fieldname);
			if(values) {
				// Values of unique keys should not be overridden
				var d = {};
				var unique_keys = ["idx", "name"];

				Object.keys(values).map(function (key) {
					if(!unique_keys.includes(key)) {
						d[key] = values[key];
					}
				});

				$.extend(doc, d);
			}
			return doc;
		}

		set_value(field, value, if_missing) {
			var me = this;
			var _set = function(f, v) {
				var fieldobj = me.fields_dict[f];
				if(fieldobj) {
					if(!if_missing || !frappe.model.has_value(me.doctype, me.doc.name, f)) {
						if(frappe.model.table_fields.includes(fieldobj.df.fieldtype) && $.isArray(v)) {

							frappe.model.clear_table(me.doc, fieldobj.df.fieldname);

							for (var i=0, j=v.length; i < j; i++) {
								var d = v[i];
								var child = frappe.model.add_child(me.doc, fieldobj.df.options,
									fieldobj.df.fieldname, i+1);
								$.extend(child, d);
							}

							me.refresh_field(f);
							return Promise.resolve();
						} else {
							return frappe.model.set_value(me.doctype, me.doc.name, f, v);
						}
					}
				} else {
					frappe.msgprint(__("Field {0} not found.",[f]));
					throw "frm.set_value";
				}
			};

			if(typeof field=="string") {
				return _set(field, value);
			} else if($.isPlainObject(field)) {
				var tasks = [];
				var loop = function ( f ) {
					var v = field[f];
					if(me.get_field(f)) {
						tasks.push(function () { return _set(f, v); });
					}
				};

				for (var f in field) loop( f );
				return frappe.run_serially(tasks);
			}
		}

		call(opts, args, callback) {
			var me = this;
			if(typeof opts==='string') {
				// called as frm.call('do_this', {with_arg: 'arg'});
				opts = {
					method: opts,
					doc: this.doc,
					args: args,
					callback: callback
				};
			}
			if(!opts.doc) {
				if(opts.method.indexOf(".")===-1)
					{ opts.method = frappe.model.get_server_module_name(me.doctype) + "." + opts.method; }
				opts.original_callback = opts.callback;
				opts.callback = function(r) {
					if($.isPlainObject(r.message)) {
						if(opts.child) {
							// update child doc
							opts.child = locals[opts.child.doctype][opts.child.name];

							var std_field_list = ["doctype"].concat(frappe.model.std_fields_list);
							for (var key in r.message) {
								if (std_field_list.indexOf(key)===-1) {
									opts.child[key] = r.message[key];
								}
							}

							me.fields_dict[opts.child.parentfield].refresh();
						} else {
							// update parent doc
							me.set_value(r.message);
						}
					}
					opts.original_callback && opts.original_callback(r);
				};
			} else {
				opts.original_callback = opts.callback;
				opts.callback = function(r) {
					if(!r.exc) { me.refresh_fields(); }

					opts.original_callback && opts.original_callback(r);
				};

			}
			return frappe.call(opts);
		}

		get_field(field) {
			return this.fields_dict[field];
		}

		set_read_only() {
			var docperms = frappe.perm.get_perm(this.doc.doctype);
			this.perm = docperms.map(function (p) {
				return {
					read: p.read,
					cancel: p.cancel,
					share: p.share,
					print: p.print,
					email: p.email
				};
			});
		}

		trigger(event, doctype, docname) {
			return this.script_manager.trigger(event, doctype, docname);
		}

		get_formatted(fieldname) {
			return frappe.format(this.doc[fieldname],
				frappe.meta.get_docfield(this.doctype, fieldname, this.docname),
				{no_icon:true}, this.doc);
		}

		open_grid_row() {
			return frappe.ui.form.get_open_grid_form();
		}

		get_title() {
			if(this.meta.title_field) {
				return this.doc[this.meta.title_field];
			} else {
				return this.doc.name;
			}
		}

		get_selected() {
			// returns list of children that are selected. returns [parentfield, name] for each
			var selected = {}, me = this;
			frappe.meta.get_table_fields(this.doctype).forEach(function(df) {
				// handle TableMultiselect child fields
				var _selected = [];

				if(me.fields_dict[df.fieldname].grid) {
					_selected = me.fields_dict[df.fieldname].grid.get_selected();
				}

				if(_selected.length) {
					selected[df.fieldname] = _selected;
				}
			});
			return selected;
		}

		set_indicator_formatter(fieldname, get_color, get_text) {
			// get doctype from parent
			var doctype;
			if(frappe.meta.docfield_map[this.doctype][fieldname]) {
				doctype = this.doctype;
			} else {
				frappe.meta.get_table_fields(this.doctype).every(function(df) {
					if(frappe.meta.docfield_map[df.options][fieldname]) {
						doctype = df.options;
						return false;
					} else {
						return true;
					}
				});
			}

			frappe.meta.docfield_map[doctype][fieldname].formatter =
				function(value, df, options, doc) {
					if(value) {
						var label;
						if(get_text) {
							label = get_text(doc);
						} else if(frappe.form.link_formatters[df.options]) {
							label = frappe.form.link_formatters[df.options](value, doc);
						} else {
							label = value;
						}

						var escaped_name = encodeURIComponent(value);

						return repl('<a class="indicator %(color)s" href="#Form/%(doctype)s/%(name)s">%(label)s</a>', {
							color: get_color(doc || {}),
							doctype: df.options,
							name: escaped_name,
							label: label
						});
					} else {
						return '';
					}
				};
		}

		can_create(doctype) {
			// return true or false if the user can make a particlar doctype
			// will check permission, `can_make_methods` if exists, or will decided on
			// basis of whether the document is submittable
			if(!frappe.model.can_create(doctype)) {
				return false;
			}

			if(this.custom_make_buttons && this.custom_make_buttons[doctype]) {
				// custom buttons are translated and so are the keys
				var key = __(this.custom_make_buttons[doctype]);
				// if the button is present, then show make
				return !!this.custom_buttons[key];
			}

			if(this.can_make_methods && this.can_make_methods[doctype]) {
				return this.can_make_methods[doctype](this);
			} else {
				if(this.meta.is_submittable && !this.doc.docstatus==1) {
					return false;
				} else {
					return true;
				}
			}
		}

		make_new(doctype) {
			// make new doctype from the current form
			// will handover to `make_methods` if defined
			// or will create and match link fields
			var me = this;
			if(this.make_methods && this.make_methods[doctype]) {
				return this.make_methods[doctype](this);
			} else if(this.custom_make_buttons && this.custom_make_buttons[doctype]) {
				this.custom_buttons[__(this.custom_make_buttons[doctype])].trigger('click');
			} else {
				frappe.model.with_doctype(doctype, function() {
					var new_doc = frappe.model.get_new_doc(doctype);

					// set link fields (if found)
					frappe.get_meta(doctype).fields.forEach(function(df) {
						if(df.fieldtype==='Link' && df.options===me.doctype) {
							new_doc[df.fieldname] = me.doc.name;
						} else if (['Link', 'Dynamic Link'].includes(df.fieldtype) && me.doc[df.fieldname]) {
							new_doc[df.fieldname] = me.doc[df.fieldname];
						}
					});

					frappe.ui.form.make_quick_entry(doctype, null, null, new_doc);
					// frappe.set_route('Form', doctype, new_doc.name);
				});
			}
		}

		update_in_all_rows(table_fieldname, fieldname, value) {
			// update the child value in all tables where it is missing
			if(!value) { return; }
			var cl = this.doc[table_fieldname] || [];
			for(var i = 0; i < cl.length; i++){
				if(!cl[i][fieldname]) { cl[i][fieldname] = value; }
			}
			refresh_field("items");
		}

		get_sum(table_fieldname, fieldname) {
			var sum = 0;
			for (var i = 0, list = (this.doc[table_fieldname] || []); i < list.length; i += 1) {
				var d = list[i];

				sum += d[fieldname];
			}
			return sum;
		}

		scroll_to_field(fieldname) {
			var field = this.get_field(fieldname);
			if (!field) { return; }

			var $el = field.$wrapper;

			// uncollapse section
			if (field.section.is_collapsed()) {
				field.section.collapse(false);
			}

			// scroll to input
			frappe.utils.scroll_to($el);

			// highlight input
			$el.addClass('has-error');
			setTimeout(function () {
				$el.removeClass('has-error');
				$el.find('input, select, textarea').focus();
			}, 1000);
		}
	};

	frappe.validated = 0;
	// Proxy for frappe.validated
	Object.defineProperty(window, 'validated', {
		get: function() {
			console.warn('Please use `frappe.validated` instead of `validated`. It will be deprecated soon.'); // eslint-disable-line
			return frappe.validated;
		},
		set: function(value) {
			console.warn('Please use `frappe.validated` instead of `validated`. It will be deprecated soon.'); // eslint-disable-line
			frappe.validated = value;
			return frappe.validated;
		}
	});

	frappe.provide('frappe.model');
	frappe.provide('frappe.utils');

	/**
	 * Opens the Website Meta Tag form if it exists for {route}
	 * or creates a new doc and opens the form
	 */
	frappe.utils.set_meta_tag = function(route) {
		frappe.db.exists('Website Route Meta', route)
			.then(function (exists) {
				if (exists) {
					frappe.set_route('Form', 'Website Route Meta', route);
				} else {
					// new doc
					var doc = frappe.model.get_new_doc('Website Route Meta');
					doc.__newname = route;
					frappe.set_route('Form', doc.doctype, doc.name);
				}
			});
	};

}());
//# sourceMappingURL=form.min.js.map

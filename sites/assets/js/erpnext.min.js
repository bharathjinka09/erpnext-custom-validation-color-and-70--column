(function () {
	'use strict';

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// License: GNU General Public License v3. See license.txt

	frappe.provide('erpnext');

	// add toolbar icon
	$(document).bind('toolbar_setup', function() {
		frappe.app.name = "ERPNext";

		frappe.help_feedback_link = '<p><a class="text-muted" \
		href="https://discuss.erpnext.com">Feedback</a></p>';


		$('[data-link="docs"]').attr("href", "https://erpnext.com/docs");
		$('[data-link="issues"]').attr("href", "https://github.com/frappe/erpnext/issues");


		// default documentation goes to erpnext
		// $('[data-link-type="documentation"]').attr('data-path', '/erpnext/manual/index');

		// additional help links for erpnext
		var $help_menu = $('.dropdown-help ul .documentation-links');
		$('<li><a data-link-type="forum" href="https://erpnext.com/docs/user/manual" \
		target="_blank">'+__('Documentation')+'</a></li>').insertBefore($help_menu);
		$('<li><a data-link-type="forum" href="https://discuss.erpnext.com" \
		target="_blank">'+__('User Forum')+'</a></li>').insertBefore($help_menu);
		$('<li><a href="https://github.com/frappe/erpnext/issues" \
		target="_blank">'+__('Report an Issue')+'</a></li>').insertBefore($help_menu);

	});



	// doctypes created via tree
	$.extend(frappe.create_routes, {
		"Customer Group": "Tree/Customer Group",
		"Territory": "Tree/Territory",
		"Item Group": "Tree/Item Group",
		"Sales Person": "Tree/Sales Person",
		"Account": "Tree/Account",
		"Cost Center": "Tree/Cost Center",
		"Department": "Tree/Department",
	});

	// preferred modules for breadcrumbs
	$.extend(frappe.breadcrumbs.preferred, {
		"Item Group": "Stock",
		"Customer Group": "Selling",
		"Supplier Group": "Buying",
		"Territory": "Selling",
		"Sales Person": "Selling",
		"Sales Partner": "Selling",
		"Brand": "Stock"
	});

	$.extend(frappe.breadcrumbs.module_map, {
		'ERPNext Integrations': 'Integrations',
		'Geo': 'Settings',
		'Portal': 'Website',
		'Utilities': 'Settings',
		'Shopping Cart': 'Website',
		'Contacts': 'CRM'
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// License: GNU General Public License v3. See license.txt
	frappe.provide("erpnext");
	frappe.provide("erpnext.utils");

	$.extend(erpnext, {
		get_currency: function(company) {
			if(!company && cur_frm)
				{ company = cur_frm.doc.company; }
			if(company)
				{ return frappe.get_doc(":Company", company).default_currency || frappe.boot.sysdefaults.currency; }
			else
				{ return frappe.boot.sysdefaults.currency; }
		},

		get_presentation_currency_list: function () {
			var docs = frappe.boot.docs;
			var currency_list = docs.filter(function (d) { return d.doctype === ":Currency"; }).map(function (d) { return d.name; });
			currency_list.unshift("");
			return currency_list;
		},

		toggle_naming_series: function() {
			if(cur_frm.fields_dict.naming_series) {
				cur_frm.toggle_display("naming_series", cur_frm.doc.__islocal?true:false);
			}
		},

		hide_company: function() {
			if(cur_frm.fields_dict.company) {
				var companies = Object.keys(locals[":Company"] || {});
				if(companies.length === 1) {
					if(!cur_frm.doc.company) { cur_frm.set_value("company", companies[0]); }
					cur_frm.toggle_display("company", false);
				} else if(erpnext.last_selected_company) {
					if(!cur_frm.doc.company) { cur_frm.set_value("company", erpnext.last_selected_company); }
				}
			}
		},

		is_perpetual_inventory_enabled: function(company) {
			if(company) {
				return frappe.get_doc(":Company", company).enable_perpetual_inventory
			}
		},

		stale_rate_allowed: function () {
			return cint(frappe.boot.sysdefaults.allow_stale);
		},

		setup_serial_no: function() {
			var grid_row = cur_frm.open_grid_row();
			if(!grid_row || !grid_row.grid_form.fields_dict.serial_no ||
				grid_row.grid_form.fields_dict.serial_no.get_status()!=="Write") { return; }

			var $btn = $('<button class="btn btn-sm btn-default">'+__("Add Serial No")+'</button>')
				.appendTo($("<div>")
					.css({"margin-bottom": "10px", "margin-top": "10px"})
					.appendTo(grid_row.grid_form.fields_dict.serial_no.$wrapper));

			var me = this;
			$btn.on("click", function() {
				var callback = '';
				var on_close = '';

				frappe.model.get_value('Item', {'name':grid_row.doc.item_code}, 'has_serial_no',
					function (data) {
						if(data) {
							grid_row.doc.has_serial_no = data.has_serial_no;
							me.show_serial_batch_selector(grid_row.frm, grid_row.doc,
								callback, on_close, true);
						}
					}
				);
			});
		},

		route_to_adjustment_jv: function (args) {
			frappe.model.with_doctype('Journal Entry', function () {
				// route to adjustment Journal Entry to handle Account Balance and Stock Value mismatch
				var journal_entry = frappe.model.get_new_doc('Journal Entry');

				args.accounts.forEach(function (je_account) {
					var child_row = frappe.model.add_child(journal_entry, "accounts");
					child_row.account = je_account.account;
					child_row.debit_in_account_currency = je_account.debit_in_account_currency;
					child_row.credit_in_account_currency = je_account.credit_in_account_currency;
					child_row.party_type = "" ;
				});
				frappe.set_route('Form','Journal Entry', journal_entry.name);
			});
		}
	});


	$.extend(erpnext.utils, {
		set_party_dashboard_indicators: function(frm) {
			if(frm.doc.__onload && frm.doc.__onload.dashboard_info) {
				var company_wise_info = frm.doc.__onload.dashboard_info;
				if(company_wise_info.length > 1) {
					company_wise_info.forEach(function(info) {
						erpnext.utils.add_indicator_for_multicompany(frm, info);
					});
				} else if (company_wise_info.length === 1) {
					frm.dashboard.add_indicator(__('Annual Billing: {0}',
						[format_currency(company_wise_info[0].billing_this_year, company_wise_info[0].currency)]), 'blue');
					frm.dashboard.add_indicator(__('Total Unpaid: {0}',
						[format_currency(company_wise_info[0].total_unpaid, company_wise_info[0].currency)]),
					company_wise_info[0].total_unpaid ? 'orange' : 'green');

					if(company_wise_info[0].loyalty_points) {
						frm.dashboard.add_indicator(__('Loyalty Points: {0}',
							[company_wise_info[0].loyalty_points]), 'blue');
					}
				}
			}
		},

		add_indicator_for_multicompany: function(frm, info) {
			frm.dashboard.stats_area.removeClass('hidden');
			frm.dashboard.stats_area_row.addClass('flex');
			frm.dashboard.stats_area_row.css('flex-wrap', 'wrap');

			var color = info.total_unpaid ? 'orange' : 'green';

			var indicator = $('<div class="flex-column col-xs-6">'+
				'<div style="margin-top:10px"><h6>'+info.company+'</h6></div>'+

				'<div class="badge-link small" style="margin-bottom:10px"><span class="indicator blue">'+
				'Annual Billing: '+format_currency(info.billing_this_year, info.currency)+'</span></div>'+

				'<div class="badge-link small" style="margin-bottom:10px">'+
				'<span class="indicator '+color+'">Total Unpaid: '
				+format_currency(info.total_unpaid, info.currency)+'</span></div>'+


				'</div>').appendTo(frm.dashboard.stats_area_row);

			if(info.loyalty_points){
				$('<div class="badge-link small" style="margin-bottom:10px"><span class="indicator blue">'+
				'Loyalty Points: '+info.loyalty_points+'</span></div>').appendTo(indicator);
			}

			return indicator;
		},

		get_party_name: function(party_type) {
			var dict = {'Customer': 'customer_name', 'Supplier': 'supplier_name', 'Employee': 'employee_name',
				'Member': 'member_name'};
			return dict[party_type];
		},

		copy_value_in_all_rows: function(doc, dt, dn, table_fieldname, fieldname) {
			var d = locals[dt][dn];
			if(d[fieldname]){
				var cl = doc[table_fieldname] || [];
				for(var i = 0; i < cl.length; i++) {
					if(!cl[i][fieldname]) { cl[i][fieldname] = d[fieldname]; }
				}
			}
			refresh_field(table_fieldname);
		},

		get_terms: function(tc_name, doc, callback) {
			if(tc_name) {
				return frappe.call({
					method: 'erpnext.setup.doctype.terms_and_conditions.terms_and_conditions.get_terms_and_conditions',
					args: {
						template_name: tc_name,
						doc: doc
					},
					callback: function(r) {
						callback(r);
					}
				});
			}
		},

		make_bank_account: function(doctype, docname) {
			frappe.call({
				method: "erpnext.accounts.doctype.bank_account.bank_account.make_bank_account",
				args: {
					doctype: doctype,
					docname: docname
				},
				freeze: true,
				callback: function(r) {
					var doclist = frappe.model.sync(r.message);
					frappe.set_route("Form", doclist[0].doctype, doclist[0].name);
				}
			});
		},

		add_dimensions: function(report_name, index) {
			var filters = frappe.query_reports[report_name].filters;

			erpnext.dimension_filters.forEach(function (dimension) {
				var found = filters.some(function (el) { return el.fieldname === dimension['fieldname']; });

				if (!found) {
					filters.splice(index, 0 ,{
						"fieldname": dimension["fieldname"],
						"label": __(dimension["label"]),
						"fieldtype": "Link",
						"options": dimension["document_type"]
					});
				}
			});
		},

		make_subscription: function(doctype, docname) {
			frappe.call({
				method: "frappe.automation.doctype.auto_repeat.auto_repeat.make_auto_repeat",
				args: {
					doctype: doctype,
					docname: docname
				},
				callback: function(r) {
					var doclist = frappe.model.sync(r.message);
					frappe.set_route("Form", doclist[0].doctype, doclist[0].name);
				}
			});
		},

		make_pricing_rule: function(doctype, docname) {
			frappe.call({
				method: "erpnext.accounts.doctype.pricing_rule.pricing_rule.make_pricing_rule",
				args: {
					doctype: doctype,
					docname: docname
				},
				callback: function(r) {
					var doclist = frappe.model.sync(r.message);
					frappe.set_route("Form", doclist[0].doctype, doclist[0].name);
				}
			});
		},

		/**
		* Checks if the first row of a given child table is empty
		* @param child_table - Child table Doctype
		* @return {Boolean}
		**/
		first_row_is_empty: function(child_table){
			if($.isArray(child_table) && child_table.length > 0) {
				return !child_table[0].item_code;
			}
			return false;
		},

		/**
		* Removes the first row of a child table if it is empty
		* @param {_Frm} frm - The current form
		* @param {String} child_table_name - The child table field name
		* @return {Boolean}
		**/
		remove_empty_first_row: function(frm, child_table_name){
			var rows = frm['doc'][child_table_name];
			if (this.first_row_is_empty(rows)){
				frm['doc'][child_table_name] = rows.splice(1);
			}
			return rows;
		},
		get_tree_options: function(option) {
			// get valid options for tree based on user permission & locals dict
			var unscrub_option = frappe.model.unscrub(option);
			var user_permission = frappe.defaults.get_user_permissions();
			var options;

			if(user_permission && user_permission[unscrub_option]) {
				options = user_permission[unscrub_option].map(function (perm) { return perm.doc; });
			} else {
				options = $.map(locals[(":" + unscrub_option)], function(c) { return c.name; }).sort();
			}

			// filter unique values, as there may be multiple user permissions for any value
			return options.filter(function (value, index, self) { return self.indexOf(value) === index; });
		},
		get_tree_default: function(option) {
			// set default for a field based on user permission
			var options = this.get_tree_options(option);
			if(options.includes(frappe.defaults.get_default(option))) {
				return frappe.defaults.get_default(option);
			} else {
				return options[0];
			}
		},
		copy_parent_value_in_all_row: function(doc, dt, dn, table_fieldname, fieldname, parent_fieldname) {
			var d = locals[dt][dn];
			if(d[fieldname]){
				var cl = doc[table_fieldname] || [];
				for(var i = 0; i < cl.length; i++) {
					cl[i][fieldname] = doc[parent_fieldname];
				}
			}
			refresh_field(table_fieldname);
		},

		create_new_doc: function (doctype, update_fields) {
			frappe.model.with_doctype(doctype, function() {
				var new_doc = frappe.model.get_new_doc(doctype);
				for (var i = 0, list = Object.entries(update_fields); i < list.length; i += 1) {
					var ref = list[i];
					var key = ref[0];
					var value = ref[1];

					new_doc[key] = value;
				}
				frappe.ui.form.make_quick_entry(doctype, null, null, new_doc);
			});
		}

	});

	erpnext.utils.select_alternate_items = function(opts) {
		var this$1 = this;

		var frm = opts.frm;
		var warehouse_field = opts.warehouse_field || 'warehouse';
		var item_field = opts.item_field || 'item_code';

		this.data = [];
		var dialog = new frappe.ui.Dialog({
			title: __("Select Alternate Item"),
			fields: [
				{fieldtype:'Section Break', label: __('Items')},
				{
					fieldname: "alternative_items", fieldtype: "Table", cannot_add_rows: true,
					in_place_edit: true, data: this.data,
					get_data: function () {
						return this$1.data;
					},
					fields: [{
						fieldtype:'Data',
						fieldname:"docname",
						hidden: 1
					}, {
						fieldtype:'Link',
						fieldname:"item_code",
						options: 'Item',
						in_list_view: 1,
						read_only: 1,
						label: __('Item Code')
					}, {
						fieldtype:'Link',
						fieldname:"alternate_item",
						options: 'Item',
						default: "",
						in_list_view: 1,
						label: __('Alternate Item'),
						onchange: function() {
							var this$1 = this;

							var item_code = this.get_value();
							var warehouse = this.grid_row.on_grid_fields_dict.warehouse.get_value();
							if (item_code && warehouse) {
								frappe.call({
									method: "erpnext.stock.utils.get_latest_stock_qty",
									args: {
										item_code: item_code,
										warehouse: warehouse
									},
									callback: function (r) {
										this$1.grid_row.on_grid_fields_dict
											.actual_qty.set_value(r.message || 0);
									}
								});
							}
						},
						get_query: function (e) {
							return {
								query: "erpnext.stock.doctype.item_alternative.item_alternative.get_alternative_items",
								filters: {
									item_code: e.item_code
								}
							};
						}
					}, {
						fieldtype:'Link',
						fieldname:"warehouse",
						options: 'Warehouse',
						default: "",
						in_list_view: 1,
						label: __('Warehouse'),
						onchange: function() {
							var this$1 = this;

							var warehouse = this.get_value();
							var item_code = this.grid_row.on_grid_fields_dict.item_code.get_value();
							if (item_code && warehouse) {
								frappe.call({
									method: "erpnext.stock.utils.get_latest_stock_qty",
									args: {
										item_code: item_code,
										warehouse: warehouse
									},
									callback: function (r) {
										this$1.grid_row.on_grid_fields_dict
											.actual_qty.set_value(r.message || 0);
									}
								});
							}
						},
					}, {
						fieldtype:'Float',
						fieldname:"actual_qty",
						default: 0,
						read_only: 1,
						in_list_view: 1,
						label: __('Available Qty')
					}]
				} ],
			primary_action: function() {
				var args = this.get_values()["alternative_items"];
				var alternative_items = args.filter(function (d) {
					if (d.alternate_item && d.item_code != d.alternate_item) {
						return true;
					}
				});

				alternative_items.forEach(function (d) {
					var row = frappe.get_doc(opts.child_doctype, d.docname);
					var qty = null;
					if (row.doctype === 'Work Order Item') {
						qty = row.required_qty;
					} else {
						qty = row.qty;
					}
					row[item_field] = d.alternate_item;
					frm.script_manager.trigger(item_field, row.doctype, row.name)
						.then(function () {
							frappe.model.set_value(row.doctype, row.name, 'qty', qty);
							frappe.model.set_value(row.doctype, row.name,
								opts.original_item_field, d.item_code);
						});
				});

				refresh_field(opts.child_docname);
				this.hide();
			},
			primary_action_label: __('Update')
		});

		frm.doc[opts.child_docname].forEach(function (d) {
			if (!opts.condition || opts.condition(d)) {
				dialog.fields_dict.alternative_items.df.data.push({
					"docname": d.name,
					"item_code": d[item_field],
					"warehouse": d[warehouse_field],
					"actual_qty": d.actual_qty
				});
			}
		});

		this.data = dialog.fields_dict.alternative_items.df.data;
		dialog.fields_dict.alternative_items.grid.refresh();
		dialog.show();
	};

	erpnext.utils.update_child_items = function(opts) {
		var this$1 = this;

		var frm = opts.frm;
		var cannot_add_row = (typeof opts.cannot_add_row === 'undefined') ? true : opts.cannot_add_row;
		var child_docname = (typeof opts.cannot_add_row === 'undefined') ? "items" : opts.child_docname;
		var child_meta = frappe.get_meta(((frm.doc.doctype) + " Item"));
		var get_precision = function (fieldname) { return child_meta.fields.find(function (f) { return f.fieldname == fieldname; }).precision; };

		this.data = [];
		var fields = [{
			fieldtype:'Data',
			fieldname:"docname",
			read_only: 1,
			hidden: 1,
		}, {
			fieldtype:'Link',
			fieldname:"item_code",
			options: 'Item',
			in_list_view: 1,
			read_only: 0,
			disabled: 0,
			label: __('Item Code')
		}, {
			fieldtype:'Float',
			fieldname:"qty",
			default: 0,
			read_only: 0,
			in_list_view: 1,
			label: __('Qty'),
			precision: get_precision("qty")
		}, {
			fieldtype:'Currency',
			fieldname:"rate",
			default: 0,
			read_only: 0,
			in_list_view: 1,
			label: __('Rate'),
			precision: get_precision("rate")
		}];

		if (frm.doc.doctype == 'Sales Order' || frm.doc.doctype == 'Purchase Order' ) {
			fields.splice(2, 0, {
				fieldtype: 'Date',
				fieldname: frm.doc.doctype == 'Sales Order' ? "delivery_date" : "schedule_date",
				in_list_view: 1,
				label: frm.doc.doctype == 'Sales Order' ? __("Delivery Date") : __("Reqd by date"),
				reqd: 1
			});
			fields.splice(3, 0, {
				fieldtype: 'Float',
				fieldname: "conversion_factor",
				in_list_view: 1,
				label: __("Conversion Factor"),
				precision: get_precision('conversion_factor')
			});
		}

		var dialog = new frappe.ui.Dialog({
			title: __("Update Items"),
			fields: [
				{
					fieldname: "trans_items",
					fieldtype: "Table",
					label: "Items",
					cannot_add_rows: cannot_add_row,
					in_place_edit: true,
					reqd: 1,
					data: this.data,
					get_data: function () {
						return this$1.data;
					},
					fields: fields
				} ],
			primary_action: function() {
				var trans_items = this.get_values()["trans_items"];
				frappe.call({
					method: 'erpnext.controllers.accounts_controller.update_child_qty_rate',
					freeze: true,
					args: {
						'parent_doctype': frm.doc.doctype,
						'trans_items': trans_items,
						'parent_doctype_name': frm.doc.name,
						'child_docname': child_docname
					},
					callback: function() {
						frm.reload_doc();
					}
				});
				this.hide();
				refresh_field("items");
			},
			primary_action_label: __('Update')
		});

		frm.doc[opts.child_docname].forEach(function (d) {
			dialog.fields_dict.trans_items.df.data.push({
				"docname": d.name,
				"name": d.name,
				"item_code": d.item_code,
				"delivery_date": d.delivery_date,
				"schedule_date": d.schedule_date,
				"conversion_factor": d.conversion_factor,
				"qty": d.qty,
				"rate": d.rate,
			});
			this$1.data = dialog.fields_dict.trans_items.df.data;
			dialog.fields_dict.trans_items.grid.refresh();
		});
		dialog.show();
	};

	erpnext.utils.map_current_doc = function(opts) {
		if(opts.get_query_filters) {
			opts.get_query = function() {
				return {filters: opts.get_query_filters};
			};
		}
		var _map = function() {
			if($.isArray(cur_frm.doc.items) && cur_frm.doc.items.length > 0) {
				// remove first item row if empty
				if(!cur_frm.doc.items[0].item_code) {
					cur_frm.doc.items = cur_frm.doc.items.splice(1);
				}

				// find the doctype of the items table
				var items_doctype = frappe.meta.get_docfield(cur_frm.doctype, 'items').options;

				// find the link fieldname from items table for the given
				// source_doctype
				var link_fieldname = null;
				frappe.get_meta(items_doctype).fields.forEach(function(d) {
					if(d.options===opts.source_doctype) { link_fieldname = d.fieldname; } });

				// search in existing items if the source_name is already set and full qty fetched
				var already_set = false;
				var item_qty_map = {};

				$.each(cur_frm.doc.items, function(i, d) {
					opts.source_name.forEach(function(src) {
						if(d[link_fieldname]==src) {
							already_set = true;
							if (item_qty_map[d.item_code])
								{ item_qty_map[d.item_code] += flt(d.qty); }
							else
								{ item_qty_map[d.item_code] = flt(d.qty); }
						}
					});
				});

				if(already_set) {
					opts.source_name.forEach(function(src) {
						frappe.model.with_doc(opts.source_doctype, src, function(r) {
							var source_doc = frappe.model.get_doc(opts.source_doctype, src);
							$.each(source_doc.items || [], function(i, row) {
								if(row.qty > flt(item_qty_map[row.item_code])) {
									already_set = false;
									return false;
								}
							});
						});

						if(already_set) {
							frappe.msgprint(__("You have already selected items from {0} {1}",
								[opts.source_doctype, src]));
							return;
						}

					});
				}
			}

			return frappe.call({
				// Sometimes we hit the limit for URL length of a GET request
				// as we send the full target_doc. Hence this is a POST request.
				type: "POST",
				method: 'frappe.model.mapper.map_docs',
				args: {
					"method": opts.method,
					"source_names": opts.source_name,
					"target_doc": cur_frm.doc,
					'args': opts.args
				},
				callback: function(r) {
					if(!r.exc) {
						var doc = frappe.model.sync(r.message);
						cur_frm.dirty();
						cur_frm.refresh();
					}
				}
			});
		};
		if(opts.source_doctype) {
			var d = new frappe.ui.form.MultiSelectDialog({
				doctype: opts.source_doctype,
				target: opts.target,
				date_field: opts.date_field || undefined,
				setters: opts.setters,
				get_query: opts.get_query,
				action: function(selections, args) {
					var values = selections;
					if(values.length === 0){
						frappe.msgprint(__("Please select {0}", [opts.source_doctype]));
						return;
					}
					opts.source_name = values;
					opts.setters = args;
					d.dialog.hide();
					_map();
				},
			});
		} else if(opts.source_name) {
			opts.source_name = [opts.source_name];
			_map();
		}
	};

	frappe.form.link_formatters['Item'] = function(value, doc) {
		if(doc && doc.item_name && doc.item_name !== value) {
			return value? value + ': ' + doc.item_name: doc.item_name;
		} else {
			return value;
		}
	};

	frappe.form.link_formatters['Employee'] = function(value, doc) {
		if(doc && doc.employee_name && doc.employee_name !== value) {
			return value? value + ': ' + doc.employee_name: doc.employee_name;
		} else {
			return value;
		}
	};

	// add description on posting time
	$(document).on('app_ready', function() {
		if(!frappe.datetime.is_timezone_same()) {
			$.each(["Stock Reconciliation", "Stock Entry", "Stock Ledger Entry",
				"Delivery Note", "Purchase Receipt", "Sales Invoice"], function(i, d) {
				frappe.ui.form.on(d, "onload", function(frm) {
					cur_frm.set_df_property("posting_time", "description",
						frappe.sys_defaults.time_zone);
				});
			});
		}
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// License: GNU General Public License v3. See license.txt

	// searches for enabled users
	frappe.provide("erpnext.queries");
	$.extend(erpnext.queries, {
		user: function() {
			return { query: "frappe.core.doctype.user.user.user_query" };
		},

		lead: function() {
			return { query: "erpnext.controllers.queries.lead_query" };
		},

		customer: function() {
			return { query: "erpnext.controllers.queries.customer_query" };
		},

		supplier: function() {
			return { query: "erpnext.controllers.queries.supplier_query" };
		},

		item: function(filters) {
			var args = { query: "erpnext.controllers.queries.item_query" };
			if(filters) { args["filters"] = filters; }
			return args;
		},

		bom: function() {
			return { query: "erpnext.controllers.queries.bom" };
		},

		task: function() {
			return { query: "erpnext.projects.utils.query_task" };
		},

		customer_filter: function(doc) {
			if(!doc.customer) {
				frappe.throw(__("Please set {0}", [__(frappe.meta.get_label(doc.doctype, "customer", doc.name))]));
			}

			return { filters: { customer: doc.customer } };
		},

		contact_query: function(doc) {
			if(frappe.dynamic_link) {
				if(!doc[frappe.dynamic_link.fieldname]) {
					frappe.throw(__("Please set {0}",
						[__(frappe.meta.get_label(doc.doctype, frappe.dynamic_link.fieldname, doc.name))]));
				}

				return {
					query: 'frappe.contacts.doctype.contact.contact.contact_query',
					filters: {
						link_doctype: frappe.dynamic_link.doctype,
						link_name: doc[frappe.dynamic_link.fieldname]
					}
				};
			}
		},

		address_query: function(doc) {
			if(frappe.dynamic_link) {
				if(!doc[frappe.dynamic_link.fieldname]) {
					frappe.throw(__("Please set {0}",
						[__(frappe.meta.get_label(doc.doctype, frappe.dynamic_link.fieldname, doc.name))]));
				}

				return {
					query: 'frappe.contacts.doctype.address.address.address_query',
					filters: {
						link_doctype: frappe.dynamic_link.doctype,
						link_name: doc[frappe.dynamic_link.fieldname]
					}
				};
			}
		},

		company_address_query: function(doc) {
			return {
				query: 'frappe.contacts.doctype.address.address.address_query',
				filters: { is_your_company_address: 1, link_doctype: 'Company', link_name: doc.company || '' }
			};
		},

		supplier_filter: function(doc) {
			if(!doc.supplier) {
				frappe.throw(__("Please set {0}", [__(frappe.meta.get_label(doc.doctype, "supplier", doc.name))]));
			}

			return { filters: { supplier: doc.supplier } };
		},

		lead_filter: function(doc) {
			if(!doc.lead) {
				frappe.throw(__("Please specify a {0}",
					[__(frappe.meta.get_label(doc.doctype, "lead", doc.name))]));
			}

			return { filters: { lead: doc.lead } };
		},

		not_a_group_filter: function() {
			return { filters: { is_group: 0 } };
		},

		employee: function() {
			return { query: "erpnext.controllers.queries.employee_query" }
		},

		warehouse: function(doc) {
			return {
				filters: [
					["Warehouse", "company", "in", ["", cstr(doc.company)]],
					["Warehouse", "is_group", "=",0]

				]
			}
		}
	});

	erpnext.queries.setup_queries = function(frm, options, query_fn) {
		var set_query = function(doctype, parentfield) {
			var link_fields = frappe.meta.get_docfields(doctype, frm.doc.name,
				{"fieldtype": "Link", "options": options});
			$.each(link_fields, function(i, df) {
				if(parentfield) {
					frm.set_query(df.fieldname, parentfield, query_fn);
				} else {
					frm.set_query(df.fieldname, query_fn);
				}
			});
		};

		set_query(frm.doc.doctype);

		// warehouse field in tables
		$.each(frappe.meta.get_docfields(frm.doc.doctype, frm.doc.name, {"fieldtype": "Table"}),
			function(i, df) {
				set_query(df.options, df.fieldname);
			});
	};

	/* 	if item code is selected in child table
		then list down warehouses with its quantity
		else apply default filters.
	*/
	erpnext.queries.setup_warehouse_query = function(frm){
		frm.set_query('warehouse', 'items', function(doc, cdt, cdn) {
			var row  = locals[cdt][cdn];
			var filters = erpnext.queries.warehouse(frm.doc);
			if(row.item_code){
				$.extend(filters, {"query":"erpnext.controllers.queries.warehouse_query"});
				filters["filters"].push(["Bin", "item_code", "=", row.item_code]);
			}
			return filters
		});
	};

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// License: GNU General Public License v3. See license.txt

	erpnext.SMSManager = function SMSManager(doc) {
		var me = this;
		this.setup = function() {
			var default_msg = {
				'Lead'				: '',
				'Opportunity'			: 'Your enquiry has been logged into the system. Ref No: ' + doc.name,
				'Quotation'			: 'Quotation ' + doc.name + ' has been sent via email. Thanks!',
				'Sales Order'		: 'Sales Order ' + doc.name + ' has been created against '
							+ (doc.quotation_no ? ('Quote No:' + doc.quotation_no) : '')
							+ (doc.po_no ? (' for your PO: ' + doc.po_no) : ''),
				'Delivery Note'		: 'Items has been delivered against delivery note: ' + doc.name
							+ (doc.po_no ? (' for your PO: ' + doc.po_no) : ''),
				'Sales Invoice': 'Invoice ' + doc.name + ' has been sent via email '
							+ (doc.po_no ? (' for your PO: ' + doc.po_no) : ''),
				'Material Request'			: 'Material Request ' + doc.name + ' has been raised in the system',
				'Purchase Order'	: 'Purchase Order ' + doc.name + ' has been sent via email',
				'Purchase Receipt'	: 'Items has been received against purchase receipt: ' + doc.name
			};

			if (in_list(['Sales Order', 'Delivery Note', 'Sales Invoice'], doc.doctype))
				{ this.show(doc.contact_person, 'Customer', doc.customer, '', default_msg[doc.doctype]); }
			else if (doc.doctype === 'Quotation')
				{ this.show(doc.contact_person, 'Customer', doc.party_name, '', default_msg[doc.doctype]); }
			else if (in_list(['Purchase Order', 'Purchase Receipt'], doc.doctype))
				{ this.show(doc.contact_person, 'Supplier', doc.supplier, '', default_msg[doc.doctype]); }
			else if (doc.doctype == 'Lead')
				{ this.show('', '', '', doc.mobile_no, default_msg[doc.doctype]); }
			else if (doc.doctype == 'Opportunity')
				{ this.show('', '', '', doc.contact_no, default_msg[doc.doctype]); }
			else if (doc.doctype == 'Material Request')
				{ this.show('', '', '', '', default_msg[doc.doctype]); }

		};

		this.get_contact_number = function(contact, ref_doctype, ref_name) {
			frappe.call({
				method: "frappe.core.doctype.sms_settings.sms_settings.get_contact_number",
				args: {
					contact_name: contact,
					ref_doctype: ref_doctype,
					ref_name: ref_name
				},
				callback: function(r) {
					if(r.exc) { frappe.msgprint(r.exc); return; }
					me.number = r.message;
					me.show_dialog();
				}
			});
		};

		this.show = function(contact, ref_doctype, ref_name, mobile_nos, message) {
			this.message = message;
			if (mobile_nos) {
				me.number = mobile_nos;
				me.show_dialog();
			} else if (contact){
				this.get_contact_number(contact, ref_doctype, ref_name);
			} else {
				me.show_dialog();
			}
		};
		this.show_dialog = function() {
			if(!me.dialog)
				{ me.make_dialog(); }
			me.dialog.set_values({
				'message': me.message,
				'number': me.number
			});
			me.dialog.show();
		};
		this.make_dialog = function() {
			var d = new frappe.ui.Dialog({
				title: 'Send SMS',
				width: 400,
				fields: [
					{fieldname:'number', fieldtype:'Data', label:'Mobile Number', reqd:1},
					{fieldname:'message', fieldtype:'Text', label:'Message', reqd:1},
					{fieldname:'send', fieldtype:'Button', label:'Send'}
				]
			});
			d.fields_dict.send.input.onclick = function() {
				var btn = d.fields_dict.send.input;
				var v = me.dialog.get_values();
				if(v) {
					$(btn).set_working();
					frappe.call({
						method: "frappe.core.doctype.sms_settings.sms_settings.send_sms",
						args: {
							receiver_list: [v.number],
							msg: v.message
						},
						callback: function(r) {
							$(btn).done_working();
							if(r.exc) {frappe.msgprint(r.exc); return; }
							me.dialog.hide();
						}
					});
				}
			};
			this.dialog = d;
		};
		this.setup();
	};

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// License: GNU General Public License v3. See license.txt

	frappe.provide("erpnext.utils");

	erpnext.utils.get_party_details = function(frm, method, args, callback) {
		if (!method) {
			method = "erpnext.accounts.party.get_party_details";
		}

		if (args) {
			if (in_list(['Sales Invoice', 'Sales Order', 'Delivery Note'], frm.doc.doctype)) {
				if (frm.doc.company_address && (!args.company_address)) {
					args.company_address = frm.doc.company_address;
				}
			}

			if (in_list(['Purchase Invoice', 'Purchase Order', 'Purchase Receipt'], frm.doc.doctype)) {
				if (frm.doc.shipping_address && (!args.shipping_address)) {
					args.shipping_address = frm.doc.shipping_address;
				}
			}
		}

		if (!args) {
			if ((frm.doctype != "Purchase Order" && frm.doc.customer)
				|| (frm.doc.party_name && in_list(['Quotation', 'Opportunity'], frm.doc.doctype))) {

				var party_type = "Customer";
				if (frm.doc.quotation_to && frm.doc.quotation_to === "Lead") {
					party_type = "Lead";
				}

				args = {
					party: frm.doc.customer || frm.doc.party_name,
					party_type: party_type,
					price_list: frm.doc.selling_price_list
				};
			} else if (frm.doc.supplier) {
				args = {
					party: frm.doc.supplier,
					party_type: "Supplier",
					bill_date: frm.doc.bill_date,
					price_list: frm.doc.buying_price_list
				};
			}

			if (in_list(['Sales Invoice', 'Sales Order', 'Delivery Note'], frm.doc.doctype)) {
				if (!args) {
					args = {
						party: frm.doc.customer || frm.doc.party_name,
						party_type: 'Customer'
					};
				}
				if (frm.doc.company_address && (!args.company_address)) {
					args.company_address = frm.doc.company_address;
				}

				if (frm.doc.shipping_address_name &&(!args.shipping_address_name)) {
					args.shipping_address_name = frm.doc.shipping_address_name;
				}
			}

			if (in_list(['Purchase Invoice', 'Purchase Order', 'Purchase Receipt'], frm.doc.doctype)) {
				if (!args) {
					args = {
						party: frm.doc.supplier,
						party_type: 'Supplier'
					};
				}

				if (frm.doc.shipping_address && (!args.shipping_address)) {
					args.shipping_address = frm.doc.shipping_address;
				}
			}

			if (args) {
				args.posting_date = frm.doc.posting_date || frm.doc.transaction_date;
			}
		}
		if (!args || !args.party) { return; }

		if (frappe.meta.get_docfield(frm.doc.doctype, "taxes")) {
			if (!erpnext.utils.validate_mandatory(frm, "Posting / Transaction Date",
				args.posting_date, args.party_type=="Customer" ? "customer": "supplier")) { return; }
		}

		if (!erpnext.utils.validate_mandatory(frm, "Company", frm.doc.company, args.party_type=="Customer" ? "customer": "supplier")) {
			return;
		}

		args.currency = frm.doc.currency;
		args.company = frm.doc.company;
		args.doctype = frm.doc.doctype;
		frappe.call({
			method: method,
			args: args,
			callback: function(r) {
				if (r.message) {
					frm.supplier_tds = r.message.supplier_tds;
					frm.updating_party_details = true;
					frappe.run_serially([
						function () { return frm.set_value(r.message); },
						function () {
							frm.updating_party_details = false;
							if (callback) { callback(); }
							frm.refresh();
							erpnext.utils.add_item(frm);
						}
					]);
				}
			}
		});
	};

	erpnext.utils.add_item = function(frm) {
		if (frm.is_new()) {
			var prev_route = frappe.get_prev_route();
			if (prev_route[1]==='Item' && !(frm.doc.items && frm.doc.items.length)) {
				// add row
				var item = frm.add_child('items');
				frm.refresh_field('items');

				// set item
				frappe.model.set_value(item.doctype, item.name, 'item_code', prev_route[2]);
			}
		}
	};

	erpnext.utils.get_address_display = function(frm, address_field, display_field, is_your_company_address) {
		if (frm.updating_party_details) { return; }

		if (!address_field) {
			if (frm.doctype != "Purchase Order" && frm.doc.customer) {
				address_field = "customer_address";
			} else if (frm.doc.supplier) {
				address_field = "supplier_address";
			} else { return; }
		}

		if (!display_field) { display_field = "address_display"; }
		if (frm.doc[address_field]) {
			frappe.call({
				method: "frappe.contacts.doctype.address.address.get_address_display",
				args: {"address_dict": frm.doc[address_field] },
				callback: function(r) {
					if (r.message) {
						frm.set_value(display_field, r.message);
					}
				}
			});
		} else {
			frm.set_value(display_field, '');
		}
	};

	erpnext.utils.set_taxes_from_address = function(frm, triggered_from_field, billing_address_field, shipping_address_field) {
		if (frm.updating_party_details) { return; }

		if (frappe.meta.get_docfield(frm.doc.doctype, "taxes")) {
			if (!erpnext.utils.validate_mandatory(frm, "Lead / Customer / Supplier",
				frm.doc.customer || frm.doc.supplier || frm.doc.lead || frm.doc.party_name, triggered_from_field)) {
				return;
			}

			if (!erpnext.utils.validate_mandatory(frm, "Posting / Transaction Date",
				frm.doc.posting_date || frm.doc.transaction_date, triggered_from_field)) {
				return;
			}
		} else {
			return;
		}

		frappe.call({
			method: "erpnext.accounts.party.get_address_tax_category",
			args: {
				"tax_category": frm.doc.tax_category,
				"billing_address": frm.doc[billing_address_field],
				"shipping_address": frm.doc[shipping_address_field]
			},
			callback: function(r) {
				if (!r.exc){
					if (frm.doc.tax_category != r.message) {
						frm.set_value("tax_category", r.message);
					} else {
						erpnext.utils.set_taxes(frm, triggered_from_field);
					}
				}
			}
		});
	};

	erpnext.utils.set_taxes = function(frm, triggered_from_field) {
		if (frappe.meta.get_docfield(frm.doc.doctype, "taxes")) {
			if (!erpnext.utils.validate_mandatory(frm, "Company", frm.doc.company, triggered_from_field)) {
				return;
			}

			if (!erpnext.utils.validate_mandatory(frm, "Lead / Customer / Supplier",
				frm.doc.customer || frm.doc.supplier || frm.doc.lead || frm.doc.party_name, triggered_from_field)) {
				return;
			}

			if (!erpnext.utils.validate_mandatory(frm, "Posting / Transaction Date",
				frm.doc.posting_date || frm.doc.transaction_date, triggered_from_field)) {
				return;
			}
		} else {
			return;
		}

		var party_type, party;
		if (frm.doc.lead) {
			party_type = 'Lead';
			party = frm.doc.lead;
		} else if (frm.doc.customer) {
			party_type = 'Customer';
			party = frm.doc.customer;
		} else if (frm.doc.supplier) {
			party_type = 'Supplier';
			party = frm.doc.supplier;
		} else if (frm.doc.quotation_to){
			party_type = frm.doc.quotation_to;
			party = frm.doc.party_name;
		}

		if (!frm.doc.company) {
			frappe.throw(_("Kindly select the company first"));
		}

		frappe.call({
			method: "erpnext.accounts.party.set_taxes",
			args: {
				"party": party,
				"party_type": party_type,
				"posting_date": frm.doc.posting_date || frm.doc.transaction_date,
				"company": frm.doc.company,
				"customer_group": frm.doc.customer_group,
				"supplier_group": frm.doc.supplier_group,
				"tax_category": frm.doc.tax_category,
				"billing_address": ((frm.doc.customer || frm.doc.lead) ? (frm.doc.customer_address) : (frm.doc.supplier_address)),
				"shipping_address": frm.doc.shipping_address_name
			},
			callback: function(r) {
				if (r.message){
					frm.set_value("taxes_and_charges", r.message);
				}
			}
		});
	};

	erpnext.utils.get_contact_details = function(frm) {
		if (frm.updating_party_details) { return; }

		if (frm.doc["contact_person"]) {
			frappe.call({
				method: "frappe.contacts.doctype.contact.contact.get_contact_details",
				args: {contact: frm.doc.contact_person },
				callback: function(r) {
					if (r.message)
						{ frm.set_value(r.message); }
				}
			});
		}
	};

	erpnext.utils.validate_mandatory = function(frm, label, value, trigger_on) {
		if (!value) {
			frm.doc[trigger_on] = "";
			refresh_field(trigger_on);
			frappe.throw({message:__("Please enter {0} first", [label]), title:__("Mandatory")});
			return false;
		}
		return true;
	};

	erpnext.utils.get_shipping_address = function(frm, callback){
		if (frm.doc.company) {
			frappe.call({
				method: "frappe.contacts.doctype.address.address.get_shipping_address",
				args: {
					company: frm.doc.company,
					address: frm.doc.shipping_address
				},
				callback: function(r){
					if (r.message){
						frm.set_value("shipping_address", r.message[0]); //Address title or name
						frm.set_value("shipping_address_display", r.message[1]); //Address to be displayed on the page
					}

					if (callback){
						return callback();
					}
				}
			});
		} else {
			frappe.msgprint(__("Select company first"));
		}
	};

	frappe.templates['address_list'] = '<div class="clearfix"></div> {% for(var i=0, l=addr_list.length; i<l; i++) { %}     <div class="address-box">     <p class="h6">         {%= i+1 %}. {%= addr_list[i].address_type!="Other" ? __(addr_list[i].address_type) : addr_list[i].address_title %}         {% if(addr_list[i].is_primary_address) { %}             <span class="text-muted">({%= __("Primary") %})</span>{% } %}         {% if(addr_list[i].is_shipping_address) { %}             <span class="text-muted">({%= __("Shipping") %})</span>{% } %}          <a href="#Form/Address/{%= encodeURIComponent(addr_list[i].name) %}"             class="btn btn-default btn-xs pull-right"     style="margin-top:-3px; margin-right: -5px;">             {%= __("Edit") %}</a>     </p>         <p>{%= addr_list[i].display %}</p>     </div> {% } %} {% if(!addr_list.length) { %} <p class="text-muted small">{%= __("No address added yet.") %}</p> {% } %} <p><button class="btn btn-xs btn-default btn-address">{{ __("New Address") }}</button></p>  ';

	frappe.templates['contact_list'] = '<div class="clearfix"></div> {% for(var i=0, l=contact_list.length; i<l; i++) { %}  <div class="address-box">   <p class="h6">    {%= contact_list[i].first_name %} {%= contact_list[i].last_name %}    {% if(contact_list[i].is_primary_contact) { %}     <span class="text-muted">({%= __("Primary") %})</span>    {% } %}    {% if(contact_list[i].designation){ %}     <span class="text-muted">&ndash; {%= contact_list[i].designation %}</span>    {% } %}    <a href="#Form/Contact/{%= encodeURIComponent(contact_list[i].name) %}"     class="btn btn-xs btn-default pull-right"     style="margin-top:-3px; margin-right: -5px;">     {%= __("Edit") %}</a>   </p>   {% if (contact_list[i].phones || contact_list[i].email_ids) { %}   <p>    {% if(contact_list[i].phone) { %}     {%= __("Phone") %}: {%= contact_list[i].phone %}<span class="text-muted"> ({%= __("Primary") %})</span><br>    {% endif %}    {% if(contact_list[i].mobile_no) { %}     {%= __("Mobile No") %}: {%= contact_list[i].mobile_no %}<span class="text-muted"> ({%= __("Primary") %})</span><br>    {% endif %}    {% if(contact_list[i].phone_nos) { %}     {% for(var j=0, k=contact_list[i].phone_nos.length; j<k; j++) { %}      {%= __("Phone") %}: {%= contact_list[i].phone_nos[j].phone %}<br>     {% } %}    {% endif %}   </p>   <p>    {% if(contact_list[i].email_id) { %}     {%= __("Email") %}: {%= contact_list[i].email_id %}<span class="text-muted"> ({%= __("Primary") %})</span><br>    {% endif %}    {% if(contact_list[i].email_ids) { %}     {% for(var j=0, k=contact_list[i].email_ids.length; j<k; j++) { %}      {%= __("Email") %}: {%= contact_list[i].email_ids[j].email_id %}<br>     {% } %}    {% endif %}   </p>   {% endif %}   <p>   {% if (contact_list[i].address) { %}    {%= __("Address") %}: {%= contact_list[i].address %}<br>   {% endif %}   </p>  </div> {% } %} {% if(!contact_list.length) { %} <p class="text-muted small">{%= __("No contacts added yet.") %}</p> {% } %} <p><button class="btn btn-xs btn-default btn-contact">  {{ __("New Contact") }}</button> </p>';

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// License: GNU General Public License v3. See license.txt

	frappe.provide("erpnext.stock");

	erpnext.stock.StockController = frappe.ui.form.Controller.extend({
		onload: function() {
			// warehouse query if company
			if (this.frm.fields_dict.company) {
				this.setup_warehouse_query();
			}
		},

		setup_warehouse_query: function() {
			var me = this;
			erpnext.queries.setup_queries(this.frm, "Warehouse", function() {
				return erpnext.queries.warehouse(me.frm.doc);
			});
		},

		setup_posting_date_time_check: function() {
			// make posting date default and read only unless explictly checked
			frappe.ui.form.on(this.frm.doctype, 'set_posting_date_and_time_read_only', function(frm) {
				if(frm.doc.docstatus == 0 && frm.doc.set_posting_time) {
					frm.set_df_property('posting_date', 'read_only', 0);
					frm.set_df_property('posting_time', 'read_only', 0);
				} else {
					frm.set_df_property('posting_date', 'read_only', 1);
					frm.set_df_property('posting_time', 'read_only', 1);
				}
			});

			frappe.ui.form.on(this.frm.doctype, 'set_posting_time', function(frm) {
				frm.trigger('set_posting_date_and_time_read_only');
			});

			frappe.ui.form.on(this.frm.doctype, 'refresh', function(frm) {
				// set default posting date / time
				if(frm.doc.docstatus==0) {
					if(!frm.doc.posting_date) {
						frm.set_value('posting_date', frappe.datetime.nowdate());
					}
					if(!frm.doc.posting_time) {
						frm.set_value('posting_time', frappe.datetime.now_time());
					}
					frm.trigger('set_posting_date_and_time_read_only');
				}
			});
		},

		show_stock_ledger: function() {
			var me = this;
			if(this.frm.doc.docstatus===1) {
				cur_frm.add_custom_button(__("Stock Ledger"), function() {
					frappe.route_options = {
						voucher_no: me.frm.doc.name,
						from_date: me.frm.doc.posting_date,
						to_date: me.frm.doc.posting_date,
						company: me.frm.doc.company
					};
					frappe.set_route("query-report", "Stock Ledger");
				}, __("View"));
			}

		},

		show_general_ledger: function() {
			var me = this;
			if(this.frm.doc.docstatus===1) {
				cur_frm.add_custom_button(__('Accounting Ledger'), function() {
					frappe.route_options = {
						voucher_no: me.frm.doc.name,
						from_date: me.frm.doc.posting_date,
						to_date: me.frm.doc.posting_date,
						company: me.frm.doc.company,
						group_by: "Group by Voucher (Consolidated)"
					};
					frappe.set_route("query-report", "General Ledger");
				}, __("View"));
			}
		}
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// License: GNU General Public License v3. See license.txt

	erpnext.payments = erpnext.stock.StockController.extend({
		make_payment: function() {

			this.dialog = new frappe.ui.Dialog({
				title: 'Payment'
			});
		
			this.dialog.show();
			this.$body = this.dialog.body;
			this.set_payment_primary_action();
			this.make_keyboard();
			this.select_text();
		},

		select_text: function(){
			$(this.$body).find('.form-control').click(function(){
				$(this).select();
			});
		},

		set_payment_primary_action: function(){
			var me = this;
		
			this.dialog.set_primary_action(__("Submit"), function() {
				// Allow no ZERO payment
				$.each(me.frm.doc.payments, function (index, data) {
					if (data.amount != 0) {
						me.dialog.hide();
						me.submit_invoice();
						return;
					}
				});
			});
		},

		make_keyboard: function(){
			$(this.$body).empty();
			$(this.$body).html(frappe.render_template('pos_payment', this.frm.doc));
			this.show_payment_details();
			this.bind_keyboard_event();
			this.clear_amount();
		},

		make_multimode_payment: function(){
			var me = this;

			if(this.frm.doc.change_amount > 0){
				me.payment_val = me.doc.outstanding_amount;
			}

			this.payments = frappe.model.add_child(this.frm.doc, 'Multi Mode Payment', "payments");
			this.payments.mode_of_payment = this.dialog.fields_dict.mode_of_payment.get_value();
			this.payments.amount = flt(this.payment_val);
		},

		show_payment_details: function(){
			var me = this;
			var multimode_payments = $(this.$body).find('.multimode-payments').empty();
			if(this.frm.doc.payments.length){
				$.each(this.frm.doc.payments, function(index, data){
					$(frappe.render_template('payment_details', {
						mode_of_payment: data.mode_of_payment,
						amount: data.amount,
						idx: data.idx,
						currency: me.frm.doc.currency,
						type: data.type
					})).appendTo(multimode_payments);

					if (data.type == 'Cash' && data.amount == me.frm.doc.paid_amount) {
						me.idx = data.idx;
						me.selected_mode = $(me.$body).find(repl("input[idx='%(idx)s']",{'idx': me.idx}));
						me.highlight_selected_row();
						me.bind_amount_change_event();
					}
				});
			}else{
				$("<p>No payment mode selected in pos profile</p>").appendTo(multimode_payments);
			}
		},

		set_outstanding_amount: function(){
			this.selected_mode = $(this.$body).find(repl("input[idx='%(idx)s']",{'idx': this.idx}));
			this.highlight_selected_row();
			this.payment_val = 0.0;
			if(this.frm.doc.outstanding_amount > 0 && flt(this.selected_mode.val()) == 0.0){
				//When user first time click on row
				this.payment_val = flt(this.frm.doc.outstanding_amount / this.frm.doc.conversion_rate, precision("outstanding_amount"));
				this.selected_mode.val(format_currency(this.payment_val, this.frm.doc.currency));
				this.update_payment_amount();
			}else if(flt(this.selected_mode.val()) > 0){
				//If user click on existing row which has value
				this.payment_val = flt(this.selected_mode.val());
			}
			this.selected_mode.select();
			this.bind_amount_change_event();
		},
		
		bind_keyboard_event: function(){
			this.payment_val = '';
			this.bind_form_control_event();
			this.bind_numeric_keys_event();
		},

		bind_form_control_event: function(){
			var me = this;
			$(this.$body).find('.pos-payment-row').click(function(){
				me.idx = $(this).attr("idx");
				me.set_outstanding_amount();
			});
			
			$(this.$body).find('.form-control').click(function(){
				me.idx = $(this).attr("idx");
				me.set_outstanding_amount();
				me.update_paid_amount(true);
			});
			
			$(this.$body).find('.write_off_amount').change(function(){
				me.write_off_amount(flt($(this).val()), precision("write_off_amount"));
			});
			
			$(this.$body).find('.change_amount').change(function(){
				me.change_amount(flt($(this).val()), precision("change_amount"));
			});
		},

		highlight_selected_row: function(){
			var selected_row = $(this.$body).find(repl(".pos-payment-row[idx='%(idx)s']",{'idx': this.idx}));
			$(this.$body).find('.pos-payment-row').removeClass('selected-payment-mode');
			selected_row.addClass('selected-payment-mode');
			$(this.$body).find('.amount').attr('disabled', true);
			this.selected_mode.attr('disabled', false);
		},
		
		bind_numeric_keys_event: function(){
			var me = this;
			$(this.$body).find('.pos-keyboard-key').click(function(){
				me.payment_val += $(this).text();
				me.selected_mode.val(format_currency(me.payment_val, me.frm.doc.currency));
				me.idx = me.selected_mode.attr("idx");
				me.update_paid_amount();
			});
			
			$(this.$body).find('.delete-btn').click(function(){
				me.payment_val =  cstr(flt(me.selected_mode.val())).slice(0, -1);
				me.selected_mode.val(format_currency(me.payment_val, me.frm.doc.currency));
				me.idx = me.selected_mode.attr("idx");
				me.update_paid_amount();
			});

		},
		
		bind_amount_change_event: function(){
			var me = this;
			this.selected_mode.change(function(){
				me.payment_val =  flt($(this).val()) || 0.0;
				me.selected_mode.val(format_currency(me.payment_val, me.frm.doc.currency));
				me.idx = me.selected_mode.attr("idx");
				me.update_payment_amount();
			});
		},

		clear_amount: function() {
			var me = this;
			$(this.$body).find('.clr').click(function(e){
				e.stopPropagation();
				me.idx = $(this).attr("idx");
				me.selected_mode = $(me.$body).find(repl("input[idx='%(idx)s']",{'idx': me.idx}));
				me.payment_val = 0.0;
				me.selected_mode.val(0.0);
				me.highlight_selected_row();
				me.update_payment_amount();
			});
		},

		write_off_amount: function(write_off_amount) {

			this.frm.doc.write_off_amount = flt(write_off_amount, precision("write_off_amount"));
			this.frm.doc.base_write_off_amount = flt(this.frm.doc.write_off_amount * this.frm.doc.conversion_rate,
				precision("base_write_off_amount"));
			this.calculate_outstanding_amount(false);
			this.show_amounts();
		},

		change_amount: function(change_amount) {

			this.frm.doc.change_amount = flt(change_amount, precision("change_amount"));
			this.calculate_write_off_amount();
			this.show_amounts();
		},

		update_paid_amount: function(update_write_off) {
			var me = this;
			if(in_list(['change_amount', 'write_off_amount'], this.idx)){
				var value = me.selected_mode.val();
				if(me.idx == 'change_amount'){
					me.change_amount(value);
				} else{
					if(flt(value) == 0 && update_write_off && me.frm.doc.outstanding_amount > 0) {
						value = flt(me.frm.doc.outstanding_amount / me.frm.doc.conversion_rate, precision(me.idx));
					}
					me.write_off_amount(value);
				}
			}else{
				this.update_payment_amount();
			}
		},

		update_payment_amount: function(){
			var me = this;

			$.each(this.frm.doc.payments, function(index, data){
				if(cint(me.idx) == cint(data.idx)){
					data.amount = flt(me.selected_mode.val(), 2);
				}
			});

			this.calculate_outstanding_amount(false);
			this.show_amounts();
		},

		show_amounts: function(){
			$(this.$body).find(".write_off_amount").val(format_currency(this.frm.doc.write_off_amount, this.frm.doc.currency));
			$(this.$body).find('.paid_amount').text(format_currency(this.frm.doc.paid_amount, this.frm.doc.currency));
			$(this.$body).find('.change_amount').val(format_currency(this.frm.doc.change_amount, this.frm.doc.currency));
			$(this.$body).find('.outstanding_amount').text(format_currency(this.frm.doc.outstanding_amount, frappe.get_doc(":Company", this.frm.doc.company).default_currency));
			this.update_invoice();
		}
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// License: GNU General Public License v3. See license.txt

	erpnext.taxes_and_totals = erpnext.payments.extend({
		setup: function() {},
		apply_pricing_rule_on_item: function(item){
			var effective_item_rate = item.price_list_rate;
			if (item.parenttype === "Sales Order" && item.blanket_order_rate) {
				effective_item_rate = item.blanket_order_rate;
			}
			if(item.margin_type == "Percentage"){
				item.rate_with_margin = flt(effective_item_rate)
					+ flt(effective_item_rate) * ( flt(item.margin_rate_or_amount) / 100);
			} else {
				item.rate_with_margin = flt(effective_item_rate) + flt(item.margin_rate_or_amount);
			}
			item.base_rate_with_margin = flt(item.rate_with_margin) * flt(this.frm.doc.conversion_rate);

			item.rate = flt(item.rate_with_margin , precision("rate", item));

			if(item.discount_percentage){
				item.discount_amount = flt(item.rate_with_margin) * flt(item.discount_percentage) / 100;
			}

			if (item.discount_amount) {
				item.rate = flt((item.rate_with_margin) - (item.discount_amount), precision('rate', item));
			}
		},

		calculate_taxes_and_totals: function(update_paid_amount) {
			this.discount_amount_applied = false;
			this._calculate_taxes_and_totals();
			this.calculate_discount_amount();

			// Advance calculation applicable to Sales /Purchase Invoice
			if(in_list(["Sales Invoice", "Purchase Invoice"], this.frm.doc.doctype)
				&& this.frm.doc.docstatus < 2 && !this.frm.doc.is_return) {
				this.calculate_total_advance(update_paid_amount);
			}

			if (this.frm.doc.doctype == "Sales Invoice" && this.frm.doc.is_pos &&
				this.frm.doc.is_return) {
				this.update_paid_amount_for_return();
			}

			// Sales person's commission
			if(in_list(["Quotation", "Sales Order", "Delivery Note", "Sales Invoice"], this.frm.doc.doctype)) {
				this.calculate_commission();
				this.calculate_contribution();
			}

			// Update paid amount on return/debit note creation
			if(this.frm.doc.doctype === "Purchase Invoice" && this.frm.doc.is_return
				&& (this.frm.doc.grand_total > this.frm.doc.paid_amount)) {
				this.frm.doc.paid_amount = flt(this.frm.doc.grand_total, precision("grand_total"));
			}

			this.frm.refresh_fields();
		},

		calculate_discount_amount: function(){
			if (frappe.meta.get_docfield(this.frm.doc.doctype, "discount_amount")) {
				this.set_discount_amount();
				this.apply_discount_amount();
			}
		},

		_calculate_taxes_and_totals: function() {
			this.validate_conversion_rate();
			this.calculate_item_values();
			this.initialize_taxes();
			this.determine_exclusive_rate();
			this.calculate_net_total();
			this.calculate_taxes();
			this.manipulate_grand_total_for_inclusive_tax();
			this.calculate_totals();
			this._cleanup();
		},

		validate_conversion_rate: function() {
			this.frm.doc.conversion_rate = flt(this.frm.doc.conversion_rate, (cur_frm) ? precision("conversion_rate") : 9);
			var conversion_rate_label = frappe.meta.get_label(this.frm.doc.doctype, "conversion_rate",
				this.frm.doc.name);
			var company_currency = this.get_company_currency();

			if(!this.frm.doc.conversion_rate) {
				if(this.frm.doc.currency == company_currency) {
					this.frm.set_value("conversion_rate", 1);
				} else {
					var err_message = __('{0} is mandatory. Maybe Currency Exchange record is not created for {1} to {2}', [
						conversion_rate_label,
						this.frm.doc.currency,
						company_currency
					]);
					frappe.throw(err_message);
				}
			}
		},

		calculate_item_values: function() {
			var me = this;
			if (!this.discount_amount_applied) {
				$.each(this.frm.doc["items"] || [], function(i, item) {
					frappe.model.round_floats_in(item);
					item.net_rate = item.rate;

					if ((!item.qty) && me.frm.doc.is_return) {
						item.amount = flt(item.rate * -1, precision("amount", item));
					} else {
						item.amount = flt(item.rate * item.qty, precision("amount", item));
					}

					item.net_amount = item.amount;
					item.item_tax_amount = 0.0;
					item.total_weight = flt(item.weight_per_unit * item.stock_qty);

					me.set_in_company_currency(item, ["price_list_rate", "rate", "amount", "net_rate", "net_amount"]);
				});
			}
		},

		set_in_company_currency: function(doc, fields) {
			var me = this;
			$.each(fields, function(i, f) {
				doc["base_"+f] = flt(flt(doc[f], precision(f, doc)) * me.frm.doc.conversion_rate, precision("base_" + f, doc));
			});
		},

		initialize_taxes: function() {
			var me = this;

			$.each(this.frm.doc["taxes"] || [], function(i, tax) {
				tax.item_wise_tax_detail = {};
				var tax_fields = ["total", "tax_amount_after_discount_amount",
					"tax_amount_for_current_item", "grand_total_for_current_item",
					"tax_fraction_for_current_item", "grand_total_fraction_for_current_item"];

				if (cstr(tax.charge_type) != "Actual" &&
					!(me.discount_amount_applied && me.frm.doc.apply_discount_on=="Grand Total")) {
					tax_fields.push("tax_amount");
				}

				$.each(tax_fields, function(i, fieldname) { tax[fieldname] = 0.0; });

				if (!this.discount_amount_applied && cur_frm) {
					cur_frm.cscript.validate_taxes_and_charges(tax.doctype, tax.name);
					me.validate_inclusive_tax(tax);
				}
				frappe.model.round_floats_in(tax);
			});
		},

		determine_exclusive_rate: function() {
			var me = this;

			var has_inclusive_tax = false;
			$.each(me.frm.doc["taxes"] || [], function(i, row) {
				if(cint(row.included_in_print_rate)) { has_inclusive_tax = true; }
			});
			if(has_inclusive_tax==false) { return; }

			$.each(me.frm.doc["items"] || [], function(n, item) {
				var item_tax_map = me._load_item_tax_rate(item.item_tax_rate);
				var cumulated_tax_fraction = 0.0;
				var total_inclusive_tax_amount_per_qty = 0;
				$.each(me.frm.doc["taxes"] || [], function(i, tax) {
					var current_tax_fraction = me.get_current_tax_fraction(tax, item_tax_map);
					tax.tax_fraction_for_current_item = current_tax_fraction[0];
					var inclusive_tax_amount_per_qty = current_tax_fraction[1];

					if(i==0) {
						tax.grand_total_fraction_for_current_item = 1 + tax.tax_fraction_for_current_item;
					} else {
						tax.grand_total_fraction_for_current_item =
							me.frm.doc["taxes"][i-1].grand_total_fraction_for_current_item +
							tax.tax_fraction_for_current_item;
					}

					cumulated_tax_fraction += tax.tax_fraction_for_current_item;
					total_inclusive_tax_amount_per_qty += inclusive_tax_amount_per_qty * flt(item.qty);
				});

				if(!me.discount_amount_applied && item.qty && (total_inclusive_tax_amount_per_qty || cumulated_tax_fraction)) {
					var amount = flt(item.amount) - total_inclusive_tax_amount_per_qty;
					item.net_amount = flt(amount / (1 + cumulated_tax_fraction));
					item.net_rate = item.qty ? flt(item.net_amount / item.qty, precision("net_rate", item)) : 0;

					me.set_in_company_currency(item, ["net_rate", "net_amount"]);
				}
			});
		},

		get_current_tax_fraction: function(tax, item_tax_map) {
			// Get tax fraction for calculating tax exclusive amount
			// from tax inclusive amount
			var current_tax_fraction = 0.0;
			var inclusive_tax_amount_per_qty = 0;

			if(cint(tax.included_in_print_rate)) {
				var tax_rate = this._get_tax_rate(tax, item_tax_map);

				if(tax.charge_type == "On Net Total") {
					current_tax_fraction = (tax_rate / 100.0);

				} else if(tax.charge_type == "On Previous Row Amount") {
					current_tax_fraction = (tax_rate / 100.0) *
						this.frm.doc["taxes"][cint(tax.row_id) - 1].tax_fraction_for_current_item;

				} else if(tax.charge_type == "On Previous Row Total") {
					current_tax_fraction = (tax_rate / 100.0) *
						this.frm.doc["taxes"][cint(tax.row_id) - 1].grand_total_fraction_for_current_item;
				} else if (tax.charge_type == "On Item Quantity") {
					inclusive_tax_amount_per_qty = flt(tax_rate);
				}
			}

			if(tax.add_deduct_tax && tax.add_deduct_tax == "Deduct") {
				current_tax_fraction *= -1;
				inclusive_tax_amount_per_qty *= -1;
			}
			return [current_tax_fraction, inclusive_tax_amount_per_qty];
		},

		_get_tax_rate: function(tax, item_tax_map) {
			return (Object.keys(item_tax_map).indexOf(tax.account_head) != -1) ?
				flt(item_tax_map[tax.account_head], precision("rate", tax)) : tax.rate;
		},

		calculate_net_total: function() {
			var me = this;
			this.frm.doc.total_qty = this.frm.doc.total = this.frm.doc.base_total = this.frm.doc.net_total = this.frm.doc.base_net_total = 0.0;

			$.each(this.frm.doc["items"] || [], function(i, item) {
				me.frm.doc.total += item.amount;
				me.frm.doc.total_qty += item.qty;
				me.frm.doc.base_total += item.base_amount;
				me.frm.doc.net_total += item.net_amount;
				me.frm.doc.base_net_total += item.base_net_amount;
				});

			frappe.model.round_floats_in(this.frm.doc, ["total", "base_total", "net_total", "base_net_total"]);
		},

		calculate_taxes: function() {
			var me = this;
			this.frm.doc.rounding_adjustment = 0;
			var actual_tax_dict = {};

			// maintain actual tax rate based on idx
			$.each(this.frm.doc["taxes"] || [], function(i, tax) {
				if (tax.charge_type == "Actual") {
					actual_tax_dict[tax.idx] = flt(tax.tax_amount, precision("tax_amount", tax));
				}
			});

			$.each(this.frm.doc["items"] || [], function(n, item) {
				var item_tax_map = me._load_item_tax_rate(item.item_tax_rate);
				$.each(me.frm.doc["taxes"] || [], function(i, tax) {
					// tax_amount represents the amount of tax for the current step
					var current_tax_amount = me.get_current_tax_amount(item, tax, item_tax_map);

					// Adjust divisional loss to the last item
					if (tax.charge_type == "Actual") {
						actual_tax_dict[tax.idx] -= current_tax_amount;
						if (n == me.frm.doc["items"].length - 1) {
							current_tax_amount += actual_tax_dict[tax.idx];
						}
					}

					// accumulate tax amount into tax.tax_amount
					if (tax.charge_type != "Actual" &&
						!(me.discount_amount_applied && me.frm.doc.apply_discount_on=="Grand Total")) {
						tax.tax_amount += current_tax_amount;
					}

					// store tax_amount for current item as it will be used for
					// charge type = 'On Previous Row Amount'
					tax.tax_amount_for_current_item = current_tax_amount;

					// tax amount after discount amount
					tax.tax_amount_after_discount_amount += current_tax_amount;

					// for buying
					if(tax.category) {
						// if just for valuation, do not add the tax amount in total
						// hence, setting it as 0 for further steps
						current_tax_amount = (tax.category == "Valuation") ? 0.0 : current_tax_amount;

						current_tax_amount *= (tax.add_deduct_tax == "Deduct") ? -1.0 : 1.0;
					}

					// note: grand_total_for_current_item contains the contribution of
					// item's amount, previously applied tax and the current tax on that item
					if(i==0) {
						tax.grand_total_for_current_item = flt(item.net_amount + current_tax_amount);
					} else {
						tax.grand_total_for_current_item =
							flt(me.frm.doc["taxes"][i-1].grand_total_for_current_item + current_tax_amount);
					}

					// set precision in the last item iteration
					if (n == me.frm.doc["items"].length - 1) {
						me.round_off_totals(tax);

						// in tax.total, accumulate grand total for each item
						me.set_cumulative_total(i, tax);

						me.set_in_company_currency(tax,
							["total", "tax_amount", "tax_amount_after_discount_amount"]);

						// adjust Discount Amount loss in last tax iteration
						if ((i == me.frm.doc["taxes"].length - 1) && me.discount_amount_applied
							&& me.frm.doc.apply_discount_on == "Grand Total" && me.frm.doc.discount_amount) {
							me.frm.doc.rounding_adjustment = flt(me.frm.doc.grand_total -
								flt(me.frm.doc.discount_amount) - tax.total, precision("rounding_adjustment"));
						}
					}
				});
			});
		},

		set_cumulative_total: function(row_idx, tax) {
			var tax_amount = tax.tax_amount_after_discount_amount;
			if (tax.category == 'Valuation') {
				tax_amount = 0;
			}

			if (tax.add_deduct_tax == "Deduct") { tax_amount = -1*tax_amount; }

			if(row_idx==0) {
				tax.total = flt(this.frm.doc.net_total + tax_amount, precision("total", tax));
			} else {
				tax.total = flt(this.frm.doc["taxes"][row_idx-1].total + tax_amount, precision("total", tax));
			}
		},

		_load_item_tax_rate: function(item_tax_rate) {
			return item_tax_rate ? JSON.parse(item_tax_rate) : {};
		},

		get_current_tax_amount: function(item, tax, item_tax_map) {
			var tax_rate = this._get_tax_rate(tax, item_tax_map);
			var current_tax_amount = 0.0;

			// To set row_id by default as previous row.
			if(["On Previous Row Amount", "On Previous Row Total"].includes(tax.charge_type)) {
				if (tax.idx === 1) {
					frappe.throw(
						__("Cannot select charge type as 'On Previous Row Amount' or 'On Previous Row Total' for first row"));
				}
				if (!tax.row_id) {
					tax.row_id = tax.idx - 1;
				}
			}
			if(tax.charge_type == "Actual") {
				// distribute the tax amount proportionally to each item row
				var actual = flt(tax.tax_amount, precision("tax_amount", tax));
				current_tax_amount = this.frm.doc.net_total ?
					((item.net_amount / this.frm.doc.net_total) * actual) : 0.0;

			} else if(tax.charge_type == "On Net Total") {
				current_tax_amount = (tax_rate / 100.0) * item.net_amount;
			} else if(tax.charge_type == "On Previous Row Amount") {
				current_tax_amount = (tax_rate / 100.0) *
					this.frm.doc["taxes"][cint(tax.row_id) - 1].tax_amount_for_current_item;

			} else if(tax.charge_type == "On Previous Row Total") {
				current_tax_amount = (tax_rate / 100.0) *
					this.frm.doc["taxes"][cint(tax.row_id) - 1].grand_total_for_current_item;
			} else if (tax.charge_type == "On Item Quantity") {
				current_tax_amount = tax_rate * item.qty;
			}
			this.set_item_wise_tax(item, tax, tax_rate, current_tax_amount);

			return current_tax_amount;
		},

		set_item_wise_tax: function(item, tax, tax_rate, current_tax_amount) {
			// store tax breakup for each item
			var tax_detail = tax.item_wise_tax_detail;
			var key = item.item_code || item.item_name;

			var item_wise_tax_amount = current_tax_amount * this.frm.doc.conversion_rate;
			if (tax_detail && tax_detail[key])
				{ item_wise_tax_amount += tax_detail[key][1]; }

			tax_detail[key] = [tax_rate, flt(item_wise_tax_amount, precision("base_tax_amount", tax))];
		},

		round_off_totals: function(tax) {
			tax.tax_amount = flt(tax.tax_amount, precision("tax_amount", tax));
			tax.tax_amount_after_discount_amount = flt(tax.tax_amount_after_discount_amount, precision("tax_amount", tax));
		},

		manipulate_grand_total_for_inclusive_tax: function() {
			var me = this;
			// if fully inclusive taxes and diff
			if (this.frm.doc["taxes"] && this.frm.doc["taxes"].length) {
				var any_inclusive_tax = false;
				$.each(this.frm.doc.taxes || [], function(i, d) {
					if(cint(d.included_in_print_rate)) { any_inclusive_tax = true; }
				});
				if (any_inclusive_tax) {
					var last_tax = me.frm.doc["taxes"].slice(-1)[0];
					var non_inclusive_tax_amount = frappe.utils.sum($.map(this.frm.doc.taxes || [],
						function(d) {
							if(!d.included_in_print_rate) {
								return flt(d.tax_amount_after_discount_amount);
							}
						}
					));
					var diff = me.frm.doc.total + non_inclusive_tax_amount
						- flt(last_tax.total, precision("grand_total"));

					if(me.discount_amount_applied && me.frm.doc.discount_amount) {
						diff -= flt(me.frm.doc.discount_amount);
					}

					diff = flt(diff, precision("rounding_adjustment"));

					if ( diff && Math.abs(diff) <= (5.0 / Math.pow(10, precision("tax_amount", last_tax))) ) {
						me.frm.doc.rounding_adjustment = diff;
					}
				}
			}
		},

		calculate_totals: function() {
			// Changing sequence can cause rounding_adjustmentng issue and on-screen discrepency
			var me = this;
			var tax_count = this.frm.doc["taxes"] ? this.frm.doc["taxes"].length : 0;
			this.frm.doc.grand_total = flt(tax_count
				? this.frm.doc["taxes"][tax_count - 1].total + flt(this.frm.doc.rounding_adjustment)
				: this.frm.doc.net_total);

			if(in_list(["Quotation", "Sales Order", "Delivery Note", "Sales Invoice"], this.frm.doc.doctype)) {
				this.frm.doc.base_grand_total = (this.frm.doc.total_taxes_and_charges) ?
					flt(this.frm.doc.grand_total * this.frm.doc.conversion_rate) : this.frm.doc.base_net_total;
			} else {
				// other charges added/deducted
				this.frm.doc.taxes_and_charges_added = this.frm.doc.taxes_and_charges_deducted = 0.0;
				if(tax_count) {
					$.each(this.frm.doc["taxes"] || [], function(i, tax) {
						if (in_list(["Valuation and Total", "Total"], tax.category)) {
							if(tax.add_deduct_tax == "Add") {
								me.frm.doc.taxes_and_charges_added += flt(tax.tax_amount_after_discount_amount);
							} else {
								me.frm.doc.taxes_and_charges_deducted += flt(tax.tax_amount_after_discount_amount);
							}
						}
					});

					frappe.model.round_floats_in(this.frm.doc,
						["taxes_and_charges_added", "taxes_and_charges_deducted"]);
				}

				this.frm.doc.base_grand_total = flt((this.frm.doc.taxes_and_charges_added || this.frm.doc.taxes_and_charges_deducted) ?
					flt(this.frm.doc.grand_total * this.frm.doc.conversion_rate) : this.frm.doc.base_net_total);

				this.set_in_company_currency(this.frm.doc,
					["taxes_and_charges_added", "taxes_and_charges_deducted"]);
			}

			this.frm.doc.total_taxes_and_charges = flt(this.frm.doc.grand_total - this.frm.doc.net_total
				- flt(this.frm.doc.rounding_adjustment), precision("total_taxes_and_charges"));

			this.set_in_company_currency(this.frm.doc, ["total_taxes_and_charges", "rounding_adjustment"]);

			// Round grand total as per precision
			frappe.model.round_floats_in(this.frm.doc, ["grand_total", "base_grand_total"]);

			// rounded totals
			this.set_rounded_total();
		},

		set_rounded_total: function() {
			var disable_rounded_total = 0;
			if(frappe.meta.get_docfield(this.frm.doc.doctype, "disable_rounded_total", this.frm.doc.name)) {
				disable_rounded_total = this.frm.doc.disable_rounded_total;
			} else if (frappe.sys_defaults.disable_rounded_total) {
				disable_rounded_total = frappe.sys_defaults.disable_rounded_total;
			}

			if (cint(disable_rounded_total)) {
				this.frm.doc.rounded_total = 0;
				this.frm.doc.base_rounded_total = 0;
				return;
			}

			if(frappe.meta.get_docfield(this.frm.doc.doctype, "rounded_total", this.frm.doc.name)) {
				this.frm.doc.rounded_total = round_based_on_smallest_currency_fraction(this.frm.doc.grand_total,
					this.frm.doc.currency, precision("rounded_total"));
				this.frm.doc.rounding_adjustment += flt(this.frm.doc.rounded_total - this.frm.doc.grand_total,
					precision("rounding_adjustment"));

				this.set_in_company_currency(this.frm.doc, ["rounding_adjustment", "rounded_total"]);
			}
		},

		_cleanup: function() {
			this.frm.doc.base_in_words = this.frm.doc.in_words = "";

			if(this.frm.doc["items"] && this.frm.doc["items"].length) {
				if(!frappe.meta.get_docfield(this.frm.doc["items"][0].doctype, "item_tax_amount", this.frm.doctype)) {
					$.each(this.frm.doc["items"] || [], function(i, item) {
						delete item["item_tax_amount"];
					});
				}
			}

			if(this.frm.doc["taxes"] && this.frm.doc["taxes"].length) {
				var temporary_fields = ["tax_amount_for_current_item", "grand_total_for_current_item",
					"tax_fraction_for_current_item", "grand_total_fraction_for_current_item"];

				if(!frappe.meta.get_docfield(this.frm.doc["taxes"][0].doctype, "tax_amount_after_discount_amount", this.frm.doctype)) {
					temporary_fields.push("tax_amount_after_discount_amount");
				}

				$.each(this.frm.doc["taxes"] || [], function(i, tax) {
					$.each(temporary_fields, function(i, fieldname) {
						delete tax[fieldname];
					});

					tax.item_wise_tax_detail = JSON.stringify(tax.item_wise_tax_detail);
				});
			}
		},

		set_discount_amount: function() {
			if(this.frm.doc.additional_discount_percentage) {
				this.frm.doc.discount_amount = flt(flt(this.frm.doc[frappe.scrub(this.frm.doc.apply_discount_on)])
					* this.frm.doc.additional_discount_percentage / 100, precision("discount_amount"));
			}
		},

		apply_discount_amount: function() {
			var me = this;
			var distributed_amount = 0.0;
			this.frm.doc.base_discount_amount = 0.0;

			if (this.frm.doc.discount_amount) {
				if(!this.frm.doc.apply_discount_on)
					{ frappe.throw(__("Please select Apply Discount On")); }

				this.frm.doc.base_discount_amount = flt(this.frm.doc.discount_amount * this.frm.doc.conversion_rate,
					precision("base_discount_amount"));

				var total_for_discount_amount = this.get_total_for_discount_amount();
				var net_total = 0;
				// calculate item amount after Discount Amount
				if (total_for_discount_amount) {
					$.each(this.frm.doc["items"] || [], function(i, item) {
						distributed_amount = flt(me.frm.doc.discount_amount) * item.net_amount / total_for_discount_amount;
						item.net_amount = flt(item.net_amount - distributed_amount,
							precision("base_amount", item));
						net_total += item.net_amount;

						// discount amount rounding loss adjustment if no taxes
						if ((!(me.frm.doc.taxes || []).length || total_for_discount_amount==me.frm.doc.net_total || (me.frm.doc.apply_discount_on == "Net Total"))
								&& i == (me.frm.doc.items || []).length - 1) {
							var discount_amount_loss = flt(me.frm.doc.net_total - net_total
								- me.frm.doc.discount_amount, precision("net_total"));
							item.net_amount = flt(item.net_amount + discount_amount_loss,
								precision("net_amount", item));
						}
						item.net_rate = item.qty ? flt(item.net_amount / item.qty, precision("net_rate", item)) : 0;
						me.set_in_company_currency(item, ["net_rate", "net_amount"]);
					});

					this.discount_amount_applied = true;
					this._calculate_taxes_and_totals();
				}
			}
		},

		get_total_for_discount_amount: function() {
			if(this.frm.doc.apply_discount_on == "Net Total") {
				return this.frm.doc.net_total;
			} else {
				var total_actual_tax = 0.0;
				var actual_taxes_dict = {};

				$.each(this.frm.doc["taxes"] || [], function(i, tax) {
					if (in_list(["Actual", "On Item Quantity"], tax.charge_type)) {
						var tax_amount = (tax.category == "Valuation") ? 0.0 : tax.tax_amount;
						tax_amount *= (tax.add_deduct_tax == "Deduct") ? -1.0 : 1.0;
						actual_taxes_dict[tax.idx] = tax_amount;
					} else if (actual_taxes_dict[tax.row_id] !== null) {
						var actual_tax_amount = flt(actual_taxes_dict[tax.row_id]) * flt(tax.rate) / 100;
						actual_taxes_dict[tax.idx] = actual_tax_amount;
					}
				});

				$.each(actual_taxes_dict, function(key, value) {
					if (value) { total_actual_tax += value; }
				});

				return flt(this.frm.doc.grand_total - total_actual_tax, precision("grand_total"));
			}
		},

		calculate_total_advance: function(update_paid_amount) {
			var total_allocated_amount = frappe.utils.sum($.map(this.frm.doc["advances"] || [], function(adv) {
				return flt(adv.allocated_amount, precision("allocated_amount", adv));
			}));
			this.frm.doc.total_advance = flt(total_allocated_amount, precision("total_advance"));

			this.calculate_outstanding_amount(update_paid_amount);
		},

		calculate_outstanding_amount: function(update_paid_amount) {
			// NOTE:
			// paid_amount and write_off_amount is only for POS/Loyalty Point Redemption Invoice
			// total_advance is only for non POS Invoice
			if(this.frm.doc.doctype == "Sales Invoice" && this.frm.doc.is_return){
				this.calculate_paid_amount();
			}

			if(this.frm.doc.is_return || this.frm.doc.docstatus > 0) { return; }

			frappe.model.round_floats_in(this.frm.doc, ["grand_total", "total_advance", "write_off_amount"]);

			if(in_list(["Sales Invoice", "Purchase Invoice"], this.frm.doc.doctype)) {
				var grand_total = this.frm.doc.rounded_total || this.frm.doc.grand_total;

				if(this.frm.doc.party_account_currency == this.frm.doc.currency) {
					var total_amount_to_pay = flt((grand_total - this.frm.doc.total_advance
						- this.frm.doc.write_off_amount), precision("grand_total"));
				} else {
					var total_amount_to_pay = flt(
						(flt(grand_total*this.frm.doc.conversion_rate, precision("grand_total"))
							- this.frm.doc.total_advance - this.frm.doc.base_write_off_amount),
						precision("base_grand_total")
					);
				}

				frappe.model.round_floats_in(this.frm.doc, ["paid_amount"]);
				this.set_in_company_currency(this.frm.doc, ["paid_amount"]);

				if(this.frm.refresh_field){
					this.frm.refresh_field("paid_amount");
					this.frm.refresh_field("base_paid_amount");
				}

				if(this.frm.doc.doctype == "Sales Invoice") {
					var total_amount_for_payment = (this.frm.doc.redeem_loyalty_points && this.frm.doc.loyalty_amount)
						? flt(total_amount_to_pay - this.frm.doc.loyalty_amount, precision("base_grand_total"))
						: total_amount_to_pay;
					this.set_default_payment(total_amount_for_payment, update_paid_amount);
					this.calculate_paid_amount();
				}
				this.calculate_change_amount();

				var paid_amount = (this.frm.doc.party_account_currency == this.frm.doc.currency) ?
					this.frm.doc.paid_amount : this.frm.doc.base_paid_amount;
				this.frm.doc.outstanding_amount =  flt(total_amount_to_pay - flt(paid_amount) +
					flt(this.frm.doc.change_amount * this.frm.doc.conversion_rate), precision("outstanding_amount"));
			}
		},

		update_paid_amount_for_return: function() {
			var this$1 = this;

			var grand_total = this.frm.doc.rounded_total || this.frm.doc.grand_total;

			if(this.frm.doc.party_account_currency == this.frm.doc.currency) {
				var total_amount_to_pay = flt((grand_total - this.frm.doc.total_advance
					- this.frm.doc.write_off_amount), precision("grand_total"));
			} else {
				var total_amount_to_pay = flt(
					(flt(grand_total*this.frm.doc.conversion_rate, precision("grand_total"))
						- this.frm.doc.total_advance - this.frm.doc.base_write_off_amount),
					precision("base_grand_total")
				);
			}

			var existing_amount = 0;
			$.each(this.frm.doc.payments || [], function(i, row) {
				existing_amount += row.amount;
			});

			if (existing_amount != total_amount_to_pay) {
				frappe.db.get_value('Sales Invoice Payment', {'parent': this.frm.doc.pos_profile, 'default': 1},
					['mode_of_payment', 'account', 'type'], function (value) {
						if (this$1.frm.is_dirty()) {
							frappe.model.clear_table(this$1.frm.doc, 'payments');
							if (value) {
								var row = frappe.model.add_child(this$1.frm.doc, 'Sales Invoice Payment', 'payments');
								row.mode_of_payment = value.mode_of_payment;
								row.type = value.type;
								row.account = value.account;
								row.default = 1;
								row.amount = total_amount_to_pay;
							} else {
								this$1.frm.set_value('is_pos', 1);
							}
							this$1.frm.refresh_fields();
							this$1.calculate_paid_amount();
						}
					}, 'Sales Invoice');
			} else {
				this.calculate_paid_amount();
			}
		},

		set_default_payment: function(total_amount_to_pay, update_paid_amount) {
			var me = this;
			var payment_status = true;
			if(this.frm.doc.is_pos && (update_paid_amount===undefined || update_paid_amount)) {
				$.each(this.frm.doc['payments'] || [], function(index, data) {
					if(data.default && payment_status && total_amount_to_pay > 0) {
						data.base_amount = flt(total_amount_to_pay, precision("base_amount"));
						data.amount = flt(total_amount_to_pay / me.frm.doc.conversion_rate, precision("amount"));
						payment_status = false;
					} else if(me.frm.doc.paid_amount) {
						data.amount = 0.0;
					}
				});
			}
		},

		calculate_paid_amount: function() {
			var me = this;
			var paid_amount = 0.0;
			var base_paid_amount = 0.0;
			if(this.frm.doc.is_pos) {
				$.each(this.frm.doc['payments'] || [], function(index, data){
					data.base_amount = flt(data.amount * me.frm.doc.conversion_rate, precision("base_amount"));
					paid_amount += data.amount;
					base_paid_amount += data.base_amount;
				});
			} else if(!this.frm.doc.is_return){
				this.frm.doc.payments = [];
			}
			if (this.frm.doc.redeem_loyalty_points && this.frm.doc.loyalty_amount) {
				base_paid_amount += this.frm.doc.loyalty_amount;
				paid_amount += flt(this.frm.doc.loyalty_amount / me.frm.doc.conversion_rate, precision("paid_amount"));
			}

			this.frm.doc.paid_amount = flt(paid_amount, precision("paid_amount"));
			this.frm.doc.base_paid_amount = flt(base_paid_amount, precision("base_paid_amount"));
		},

		calculate_change_amount: function(){
			this.frm.doc.change_amount = 0.0;
			this.frm.doc.base_change_amount = 0.0;
			if(this.frm.doc.doctype == "Sales Invoice"
				&& this.frm.doc.paid_amount > this.frm.doc.grand_total && !this.frm.doc.is_return) {

				var payment_types = $.map(this.frm.doc.payments, function(d) { return d.type; });
				if (in_list(payment_types, 'Cash')) {
					var grand_total = this.frm.doc.rounded_total || this.frm.doc.grand_total;
					var base_grand_total = this.frm.doc.base_rounded_total || this.frm.doc.base_grand_total;

					this.frm.doc.change_amount = flt(this.frm.doc.paid_amount - grand_total +
						this.frm.doc.write_off_amount, precision("change_amount"));

					this.frm.doc.base_change_amount = flt(this.frm.doc.base_paid_amount -
						base_grand_total + this.frm.doc.base_write_off_amount,
						precision("base_change_amount"));
				}
			}
		},

		calculate_write_off_amount: function(){
			if(this.frm.doc.paid_amount > this.frm.doc.grand_total){
				this.frm.doc.write_off_amount = flt(this.frm.doc.grand_total - this.frm.doc.paid_amount
					+ this.frm.doc.change_amount, precision("write_off_amount"));

				this.frm.doc.base_write_off_amount = flt(this.frm.doc.write_off_amount * this.frm.doc.conversion_rate,
					precision("base_write_off_amount"));
			}else{
				this.frm.doc.paid_amount = 0.0;
			}
			this.calculate_outstanding_amount(false);
		}
	});

	// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
	// License: GNU General Public License v3. See license.txt

	erpnext.TransactionController = erpnext.taxes_and_totals.extend({
		setup: function() {
			frappe.flags.hide_serial_batch_dialog = true;
			this._super();
			frappe.ui.form.on(this.frm.doctype + " Item", "rate", function(frm, cdt, cdn) {
				var item = frappe.get_doc(cdt, cdn);
				var has_margin_field = frappe.meta.has_field(cdt, 'margin_type');

				frappe.model.round_floats_in(item, ["rate", "price_list_rate"]);

				if(item.price_list_rate) {
					if(item.rate > item.price_list_rate && has_margin_field) {
						// if rate is greater than price_list_rate, set margin
						// or set discount
						item.discount_percentage = 0;
						item.margin_type = 'Amount';
						item.margin_rate_or_amount = flt(item.rate - item.price_list_rate,
							precision("margin_rate_or_amount", item));
						item.rate_with_margin = item.rate;
					} else {
						item.discount_percentage = flt((1 - item.rate / item.price_list_rate) * 100.0,
							precision("discount_percentage", item));
						item.discount_amount = flt(item.price_list_rate) - flt(item.rate);
						item.margin_type = '';
						item.margin_rate_or_amount = 0;
						item.rate_with_margin = 0;
					}
				} else {
					item.discount_percentage = 0.0;
					item.margin_type = '';
					item.margin_rate_or_amount = 0;
					item.rate_with_margin = 0;
				}
				item.base_rate_with_margin = item.rate_with_margin * flt(frm.doc.conversion_rate);

				cur_frm.cscript.set_gross_profit(item);
				cur_frm.cscript.calculate_taxes_and_totals();

			});



			frappe.ui.form.on(this.frm.cscript.tax_table, "rate", function(frm, cdt, cdn) {
				cur_frm.cscript.calculate_taxes_and_totals();
			});

			frappe.ui.form.on(this.frm.cscript.tax_table, "tax_amount", function(frm, cdt, cdn) {
				cur_frm.cscript.calculate_taxes_and_totals();
			});

			frappe.ui.form.on(this.frm.cscript.tax_table, "row_id", function(frm, cdt, cdn) {
				cur_frm.cscript.calculate_taxes_and_totals();
			});

			frappe.ui.form.on(this.frm.cscript.tax_table, "included_in_print_rate", function(frm, cdt, cdn) {
				cur_frm.cscript.set_dynamic_labels();
				cur_frm.cscript.calculate_taxes_and_totals();
			});

			frappe.ui.form.on(this.frm.doctype, "apply_discount_on", function(frm) {
				if(frm.doc.additional_discount_percentage) {
					frm.trigger("additional_discount_percentage");
				} else {
					cur_frm.cscript.calculate_taxes_and_totals();
				}
			});

			frappe.ui.form.on(this.frm.doctype, "additional_discount_percentage", function(frm) {
				if(!frm.doc.apply_discount_on) {
					frappe.msgprint(__("Please set 'Apply Additional Discount On'"));
					return;
				}

				frm.via_discount_percentage = true;

				if(frm.doc.additional_discount_percentage && frm.doc.discount_amount) {
					// Reset discount amount and net / grand total
					frm.doc.discount_amount = 0;
					frm.cscript.calculate_taxes_and_totals();
				}

				var total = flt(frm.doc[frappe.model.scrub(frm.doc.apply_discount_on)]);
				var discount_amount = flt(total*flt(frm.doc.additional_discount_percentage) / 100,
					precision("discount_amount"));

				frm.set_value("discount_amount", discount_amount)
					.then(function () { return delete frm.via_discount_percentage; });
			});

			frappe.ui.form.on(this.frm.doctype, "discount_amount", function(frm) {
				frm.cscript.set_dynamic_labels();

				if (!frm.via_discount_percentage) {
					frm.doc.additional_discount_percentage = 0;
				}

				frm.cscript.calculate_taxes_and_totals();
			});

			frappe.ui.form.on(this.frm.doctype + " Item", {
				items_add: function(frm, cdt, cdn) {
					var item = frappe.get_doc(cdt, cdn);
					if(!item.warehouse && frm.doc.set_warehouse) {
						item.warehouse = frm.doc.set_warehouse;
					}
				}
			});

			var me = this;
			if(this.frm.fields_dict["items"].grid.get_field('batch_no')) {
				this.frm.set_query("batch_no", "items", function(doc, cdt, cdn) {
					return me.set_query_for_batch(doc, cdt, cdn);
				});
			}

			if(
				this.frm.docstatus < 2
				&& this.frm.fields_dict["payment_terms_template"]
				&& this.frm.fields_dict["payment_schedule"]
				&& this.frm.doc.payment_terms_template
				&& !this.frm.doc.payment_schedule.length
			){
				this.frm.trigger("payment_terms_template");
			}

			if(this.frm.fields_dict["taxes"]) {
				this["taxes_remove"] = this.calculate_taxes_and_totals;
			}

			if(this.frm.fields_dict["items"]) {
				this["items_remove"] = this.calculate_net_weight;
			}

			if(this.frm.fields_dict["recurring_print_format"]) {
				this.frm.set_query("recurring_print_format", function(doc) {
					return {
						filters: [
							['Print Format', 'doc_type', '=', cur_frm.doctype] ]
					};
				});
			}

			if(this.frm.fields_dict["return_against"]) {
				this.frm.set_query("return_against", function(doc) {
					var filters = {
						"docstatus": 1,
						"is_return": 0,
						"company": doc.company
					};
					if (me.frm.fields_dict["customer"] && doc.customer) { filters["customer"] = doc.customer; }
					if (me.frm.fields_dict["supplier"] && doc.supplier) { filters["supplier"] = doc.supplier; }

					return {
						filters: filters
					};
				});
			}
			if (this.frm.fields_dict["items"].grid.get_field("cost_center")) {
				this.frm.set_query("cost_center", "items", function(doc) {
					return {
						filters: {
							"company": doc.company,
							"is_group": 0
						}
					};
				});
			}

			if (this.frm.fields_dict["items"].grid.get_field("expense_account")) {
				this.frm.set_query("expense_account", "items", function(doc) {
					return {
						filters: {
							"company": doc.company
						}
					};
				});
			}

			if(frappe.meta.get_docfield(this.frm.doc.doctype, "pricing_rules")) {
				this.frm.set_indicator_formatter('pricing_rule', function(doc) {
					return (doc.rule_applied) ? "green" : "red";
				});
			}

			var batch_no_field = this.frm.get_docfield("items", "batch_no");
			if (batch_no_field) {
				batch_no_field.get_route_options_for_new_doc = function(row) {
					return {
						"item": row.doc.item_code
					}
				};
			}

			if (this.frm.fields_dict["items"].grid.get_field('blanket_order')) {
				this.frm.set_query("blanket_order", "items", function(doc, cdt, cdn) {
					var item = locals[cdt][cdn];
					return {
						query: "erpnext.controllers.queries.get_blanket_orders",
						filters: {
							"company": doc.company,
							"blanket_order_type": doc.doctype === "Sales Order" ? "Selling" : "Purchasing",
							"item": item.item_code
						}
					}
				});
			}

		},
		onload: function() {
			var this$1 = this;

			var me = this;

			if(this.frm.doc.__islocal) {
				var currency = frappe.defaults.get_user_default("currency");

				var set_value = function (fieldname, value) {
					if(me.frm.fields_dict[fieldname] && !me.frm.doc[fieldname]) {
						return me.frm.set_value(fieldname, value);
					}
				};

				return frappe.run_serially([
					function () { return set_value('currency', currency); },
					function () { return set_value('price_list_currency', currency); },
					function () { return set_value('status', 'Draft'); },
					function () { return set_value('is_subcontracted', 'No'); },
					function () {
						if(this$1.frm.doc.company && !this$1.frm.doc.amended_from) {
							this$1.frm.trigger("company");
						}
					}
				]);
			}
		},

		is_return: function() {
			if(!this.frm.doc.is_return && this.frm.doc.return_against) {
				this.frm.set_value('return_against', '');
			}
		},

		setup_quality_inspection: function() {
			if(!in_list(["Delivery Note", "Sales Invoice", "Purchase Receipt", "Purchase Invoice"], this.frm.doc.doctype)) {
				return;
			}
			var me = this;
			var inspection_type = in_list(["Purchase Receipt", "Purchase Invoice"], this.frm.doc.doctype)
				? "Incoming" : "Outgoing";

			var quality_inspection_field = this.frm.get_docfield("items", "quality_inspection");
			quality_inspection_field.get_route_options_for_new_doc = function(row) {
				if(me.frm.is_new()) { return; }
				return {
					"inspection_type": inspection_type,
					"reference_type": me.frm.doc.doctype,
					"reference_name": me.frm.doc.name,
					"item_code": row.doc.item_code,
					"description": row.doc.description,
					"item_serial_no": row.doc.serial_no ? row.doc.serial_no.split("\n")[0] : null,
					"batch_no": row.doc.batch_no
				}
			};

			this.frm.set_query("quality_inspection", "items", function(doc, cdt, cdn) {
				var d = locals[cdt][cdn];
				return {
					filters: {
						docstatus: 1,
						inspection_type: inspection_type,
						reference_name: doc.name,
						item_code: d.item_code
					}
				}
			});
		},

		make_payment_request: function() {
			var me = this;
			var payment_request_type = (in_list(['Sales Order', 'Sales Invoice'], this.frm.doc.doctype))
				? "Inward" : "Outward";

			frappe.call({
				method:"erpnext.accounts.doctype.payment_request.payment_request.make_payment_request",
				args: {
					dt: me.frm.doc.doctype,
					dn: me.frm.doc.name,
					recipient_id: me.frm.doc.contact_email,
					payment_request_type: payment_request_type,
					party_type: payment_request_type == 'Outward' ? "Supplier" : "Customer",
					party: payment_request_type == 'Outward' ? me.frm.doc.supplier : me.frm.doc.customer
				},
				callback: function(r) {
					if(!r.exc){
						var doc = frappe.model.sync(r.message);
						frappe.set_route("Form", r.message.doctype, r.message.name);
					}
				}
			});
		},

		onload_post_render: function() {
			var this$1 = this;

			if(this.frm.doc.__islocal && !(this.frm.doc.taxes || []).length
				&& !(this.frm.doc.__onload ? this.frm.doc.__onload.load_after_mapping : false)) {
				frappe.after_ajax(function () { return this$1.apply_default_taxes(); });
			} else if(this.frm.doc.__islocal && this.frm.doc.company && this.frm.doc["items"]
				&& !this.frm.doc.is_pos) {
				frappe.after_ajax(function () { return this$1.calculate_taxes_and_totals(); });
			}
			if(frappe.meta.get_docfield(this.frm.doc.doctype + " Item", "item_code")) {
				this.setup_item_selector();
				this.frm.get_field("items").grid.set_multiple_add("item_code", "qty");
			}
		},

		refresh: function() {
			erpnext.toggle_naming_series();
			erpnext.hide_company();
			this.set_dynamic_labels();
			this.setup_sms();
			this.setup_quality_inspection();
			var scan_barcode_field = this.frm.get_field('scan_barcode');
			if (scan_barcode_field) {
				scan_barcode_field.set_value("");
				scan_barcode_field.set_new_description("");

				if (frappe.is_mobile()) {
					if (scan_barcode_field.$input_wrapper.find('.input-group').length) { return; }

					var $input_group = $('<div class="input-group">');
					scan_barcode_field.$input_wrapper.find('.control-input').append($input_group);
					$input_group.append(scan_barcode_field.$input);
					$("<span class=\"input-group-btn\" style=\"vertical-align: top\">\n\t\t\t\t\t\t<button class=\"btn btn-default border\" type=\"button\">\n\t\t\t\t\t\t\t<i class=\"fa fa-camera text-muted\"></i>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</span>")
						.on('click', '.btn', function () {
							frappe.barcode.scan_barcode().then(function (barcode) {
								scan_barcode_field.set_value(barcode);
							});
						})
						.appendTo($input_group);
				}
			}
		},

		scan_barcode: function() {
			var this$1 = this;

			var scan_barcode_field = this.frm.fields_dict["scan_barcode"];

			var show_description = function(idx, exist) {
				if ( exist === void 0 ) exist = null;

				if (exist) {
					scan_barcode_field.set_new_description(__('Row #{0}: Qty increased by 1', [idx]));
				} else {
					scan_barcode_field.set_new_description(__('Row #{0}: Item added', [idx]));
				}
			};

			if(this.frm.doc.scan_barcode) {
				frappe.call({
					method: "erpnext.selling.page.point_of_sale.point_of_sale.search_serial_or_batch_or_barcode_number",
					args: { search_value: this.frm.doc.scan_barcode }
				}).then(function (r) {
					var data = r && r.message;
					if (!data || Object.keys(data).length === 0) {
						scan_barcode_field.set_new_description(__('Cannot find Item with this barcode'));
						return;
					}

					var cur_grid = this$1.frm.fields_dict.items.grid;

					var row_to_modify = null;
					var existing_item_row = this$1.frm.doc.items.find(function (d) { return d.item_code === data.item_code; });
					var blank_item_row = this$1.frm.doc.items.find(function (d) { return !d.item_code; });

					if (existing_item_row) {
						row_to_modify = existing_item_row;
					} else if (blank_item_row) {
						row_to_modify = blank_item_row;
					}

					if (!row_to_modify) {
						// add new row
						row_to_modify = frappe.model.add_child(this$1.frm.doc, cur_grid.doctype, 'items');
					}

					show_description(row_to_modify.idx, row_to_modify.item_code);

					this$1.frm.from_barcode = true;
					frappe.model.set_value(row_to_modify.doctype, row_to_modify.name, {
						item_code: data.item_code,
						qty: (row_to_modify.qty || 0) + 1
					});

					['serial_no', 'batch_no', 'barcode'].forEach(function (field) {
						if (data[field] && frappe.meta.has_field(row_to_modify.doctype, field)) {

							var value = (row_to_modify[field] && field === "serial_no")
								? row_to_modify[field] + '\n' + data[field] : data[field];

							frappe.model.set_value(row_to_modify.doctype,
								row_to_modify.name, field, value);
						}
					});

					scan_barcode_field.set_value('');
					refresh_field("items");
				});
			}
			return false;
		},

		apply_default_taxes: function() {
			var me = this;
			var taxes_and_charges_field = frappe.meta.get_docfield(me.frm.doc.doctype, "taxes_and_charges",
				me.frm.doc.name);

			if (!this.frm.doc.taxes_and_charges && this.frm.doc.taxes) {
				return;
			}

			if (taxes_and_charges_field) {
				return frappe.call({
					method: "erpnext.controllers.accounts_controller.get_default_taxes_and_charges",
					args: {
						"master_doctype": taxes_and_charges_field.options,
						"tax_template": me.frm.doc.taxes_and_charges,
						"company": me.frm.doc.company
					},
					callback: function(r) {
						if(!r.exc && r.message) {
							frappe.run_serially([
								function () {
									// directly set in doc, so as not to call triggers
									if(r.message.taxes_and_charges) {
										me.frm.doc.taxes_and_charges = r.message.taxes_and_charges;
									}

									// set taxes table
									if(r.message.taxes) {
										me.frm.set_value("taxes", r.message.taxes);
									}
								},
								function () { return me.set_dynamic_labels(); },
								function () { return me.calculate_taxes_and_totals(); }
							]);
						}
					}
				});
			}
		},

		setup_sms: function() {
			var me = this;
			var blacklist = ['Purchase Invoice', 'BOM'];
			if(this.frm.doc.docstatus===1 && !in_list(["Lost", "Stopped", "Closed"], this.frm.doc.status)
				&& !blacklist.includes(this.frm.doctype)) {
				this.frm.page.add_menu_item(__('Send SMS'), function() { me.send_sms(); });
			}
		},

		send_sms: function() {
			var sms_man = new erpnext.SMSManager(this.frm.doc);
		},

		barcode: function(doc, cdt, cdn) {
			var d = locals[cdt][cdn];
			if(d.barcode=="" || d.barcode==null) {
				// barcode cleared, remove item
				d.item_code = "";
			}

			this.frm.from_barcode = true;
			this.item_code(doc, cdt, cdn);
		},

		item_code: function(doc, cdt, cdn) {
			var me = this;
			var item = frappe.get_doc(cdt, cdn);
			var update_stock = 0, show_batch_dialog = 0;
			if(['Sales Invoice'].includes(this.frm.doc.doctype)) {
				update_stock = cint(me.frm.doc.update_stock);
				show_batch_dialog = update_stock;

			} else if((this.frm.doc.doctype === 'Purchase Receipt' && me.frm.doc.is_return) ||
				this.frm.doc.doctype === 'Delivery Note') {
				show_batch_dialog = 1;
			}
			// clear barcode if setting item (else barcode will take priority)
			if(!this.frm.from_barcode) {
				item.barcode = null;
			}

			this.frm.from_barcode = false;
			if(item.item_code || item.barcode || item.serial_no) {
				if(!this.validate_company_and_party()) {
					this.frm.fields_dict["items"].grid.grid_rows[item.idx - 1].remove();
				} else {
					return this.frm.call({
						method: "erpnext.stock.get_item_details.get_item_details",
						child: item,
						args: {
							doc: me.frm.doc,
							args: {
								item_code: item.item_code,
								barcode: item.barcode,
								serial_no: item.serial_no,
								batch_no: item.batch_no,
								set_warehouse: me.frm.doc.set_warehouse,
								warehouse: item.warehouse,
								customer: me.frm.doc.customer || me.frm.doc.party_name,
								quotation_to: me.frm.doc.quotation_to,
								supplier: me.frm.doc.supplier,
								currency: me.frm.doc.currency,
								update_stock: update_stock,
								conversion_rate: me.frm.doc.conversion_rate,
								price_list: me.frm.doc.selling_price_list || me.frm.doc.buying_price_list,
								price_list_currency: me.frm.doc.price_list_currency,
								plc_conversion_rate: me.frm.doc.plc_conversion_rate,
								company: me.frm.doc.company,
								order_type: me.frm.doc.order_type,
								is_pos: cint(me.frm.doc.is_pos),
								is_subcontracted: me.frm.doc.is_subcontracted,
								transaction_date: me.frm.doc.transaction_date || me.frm.doc.posting_date,
								ignore_pricing_rule: me.frm.doc.ignore_pricing_rule,
								doctype: me.frm.doc.doctype,
								name: me.frm.doc.name,
								project: item.project || me.frm.doc.project,
								qty: item.qty || 1,
								stock_qty: item.stock_qty,
								conversion_factor: item.conversion_factor,
								weight_per_unit: item.weight_per_unit,
								weight_uom: item.weight_uom,
								manufacturer: item.manufacturer,
								stock_uom: item.stock_uom,
								pos_profile: me.frm.doc.doctype == 'Sales Invoice' ? me.frm.doc.pos_profile : '',
								cost_center: item.cost_center,
								tax_category: me.frm.doc.tax_category,
								item_tax_template: item.item_tax_template,
								child_docname: item.name,
							}
						},

						callback: function(r) {
							if(!r.exc) {
								frappe.run_serially([
									function () {
										var d = locals[cdt][cdn];
										me.add_taxes_from_item_tax_template(d.item_tax_rate);
										if (d.free_item_data) {
											me.apply_product_discount(d.free_item_data);
										}
									},
									function () { return me.frm.script_manager.trigger("price_list_rate", cdt, cdn); },
									function () { return me.toggle_conversion_factor(item); },
									function () {
										if (show_batch_dialog && !item.has_serial_no
											&& !item.has_batch_no) {
											show_batch_dialog = false;
										}
									},
									function () {
										if (show_batch_dialog)
											{ return frappe.db.get_value("Item", item.item_code, ["has_batch_no", "has_serial_no"])
												.then(function (r) {
													if(r.message && !frappe.flags.hide_serial_batch_dialog &&
														(r.message.has_batch_no || r.message.has_serial_no)) {
														frappe.flags.hide_serial_batch_dialog = false;
													}
												}); }
									},
									function () {
										if(show_batch_dialog && !frappe.flags.hide_serial_batch_dialog) {
											var d = locals[cdt][cdn];
											$.each(r.message, function(k, v) {
												if(!d[k]) { d[k] = v; }
											});

											if (d.has_batch_no && d.has_serial_no) {
												d.batch_no = undefined;
											}

											erpnext.show_serial_batch_selector(me.frm, d, function (item) {
												me.frm.script_manager.trigger('qty', item.doctype, item.name);
												if (!me.frm.doc.set_warehouse)
													{ me.frm.script_manager.trigger('warehouse', item.doctype, item.name); }
											}, undefined, !frappe.flags.hide_serial_batch_dialog);
										}
									},
									function () { return me.conversion_factor(doc, cdt, cdn, true); },
									function () { return me.remove_pricing_rule(item); },
									function () {
										if (item.apply_rule_on_other_items) {
											var key = item.name;
											me.apply_rule_on_other_items({key: item});
										}
									}
								]);
							}
						}
					});
				}
			}
		},

		add_taxes_from_item_tax_template: function(item_tax_map) {
			var me = this;

			if(item_tax_map && cint(frappe.defaults.get_default("add_taxes_from_item_tax_template"))) {
				if(typeof (item_tax_map) == "string") {
					item_tax_map = JSON.parse(item_tax_map);
				}

				$.each(item_tax_map, function(tax, rate) {
					var found = (me.frm.doc.taxes || []).find(function (d) { return d.account_head === tax; });
					if(!found) {
						var child = frappe.model.add_child(me.frm.doc, "taxes");
						child.charge_type = "On Net Total";
						child.account_head = tax;
						child.rate = 0;
					}
				});
			}
		},

		serial_no: function(doc, cdt, cdn) {
			var item = frappe.get_doc(cdt, cdn);

			if (item && item.serial_no) {
				if (!item.item_code) {
					this.frm.trigger("item_code", cdt, cdn);
				}
				else {
					var valid_serial_nos = [];

					// Replacing all occurences of comma with carriage return
					var serial_nos = item.serial_no.trim().replace(/,/g, '\n');

					serial_nos = serial_nos.trim().split('\n');

					// Trim each string and push unique string to new list
					for (var x=0; x<=serial_nos.length - 1; x++) {
						if (serial_nos[x].trim() != "" && valid_serial_nos.indexOf(serial_nos[x].trim()) == -1) {
							valid_serial_nos.push(serial_nos[x].trim());
						}
					}

					// Add the new list to the serial no. field in grid with each in new line
					item.serial_no = valid_serial_nos.join('\n');
					item.conversion_factor = item.conversion_factor || 1;

					refresh_field("serial_no", item.name, item.parentfield);
					if(!doc.is_return && cint(user_defaults.set_qty_in_transactions_based_on_serial_no_input)) {
						frappe.model.set_value(item.doctype, item.name,
							"qty", valid_serial_nos.length / item.conversion_factor);
						frappe.model.set_value(item.doctype, item.name, "stock_qty", valid_serial_nos.length);
					}
				}
			}
		},

		validate: function() {
			this.calculate_taxes_and_totals(false);
		},

		company: function() {
			var me = this;
			var set_pricing = function() {
				if(me.frm.doc.company && me.frm.fields_dict.currency) {
					var company_currency = me.get_company_currency();
					var company_doc = frappe.get_doc(":Company", me.frm.doc.company);

					if (!me.frm.doc.currency) {
						me.frm.set_value("currency", company_currency);
					}

					if (me.frm.doc.currency == company_currency) {
						me.frm.set_value("conversion_rate", 1.0);
					}
					if (me.frm.doc.price_list_currency == company_currency) {
						me.frm.set_value('plc_conversion_rate', 1.0);
					}
					if (company_doc.default_letter_head) {
						if(me.frm.fields_dict.letter_head) {
							me.frm.set_value("letter_head", company_doc.default_letter_head);
						}
					}
					var selling_doctypes_for_tc = ["Sales Invoice", "Quotation", "Sales Order", "Delivery Note"];
					if (company_doc.default_selling_terms && frappe.meta.has_field(me.frm.doc.doctype, "tc_name") &&
					selling_doctypes_for_tc.indexOf(me.frm.doc.doctype) != -1) {
						me.frm.set_value("tc_name", company_doc.default_selling_terms);
					}
					var buying_doctypes_for_tc = ["Request for Quotation", "Supplier Quotation", "Purchase Order",
						"Material Request", "Purchase Receipt"];
					// Purchase Invoice is excluded as per issue #3345
					if (company_doc.default_buying_terms && frappe.meta.has_field(me.frm.doc.doctype, "tc_name") &&
					buying_doctypes_for_tc.indexOf(me.frm.doc.doctype) != -1) {
						me.frm.set_value("tc_name", company_doc.default_buying_terms);
					}

					frappe.run_serially([
						function () { return me.frm.script_manager.trigger("currency"); },
						function () { return me.update_item_tax_map(); },
						function () { return me.apply_default_taxes(); },
						function () { return me.apply_pricing_rule(); }
					]);
				}
			};

			var set_party_account = function(set_pricing) {
				if (in_list(["Sales Invoice", "Purchase Invoice"], me.frm.doc.doctype)) {
					if(me.frm.doc.doctype=="Sales Invoice") {
						var party_type = "Customer";
						var party_account_field = 'debit_to';
					} else {
						var party_type = "Supplier";
						var party_account_field = 'credit_to';
					}

					var party = me.frm.doc[frappe.model.scrub(party_type)];
					if(party && me.frm.doc.company) {
						return frappe.call({
							method: "erpnext.accounts.party.get_party_account",
							args: {
								company: me.frm.doc.company,
								party_type: party_type,
								party: party
							},
							callback: function(r) {
								if(!r.exc && r.message) {
									me.frm.set_value(party_account_field, r.message);
									set_pricing();
								}
							}
						});
					} else {
						set_pricing();
					}
				} else {
					set_pricing();
				}

			};

			if (this.frm.doc.posting_date) { var date = this.frm.doc.posting_date; }
			else { var date = this.frm.doc.transaction_date; }

			if (frappe.meta.get_docfield(this.frm.doctype, "shipping_address") &&
				in_list(['Purchase Order', 'Purchase Receipt', 'Purchase Invoice'], this.frm.doctype)){
				erpnext.utils.get_shipping_address(this.frm, function(){
					set_party_account(set_pricing);
				});
			} else {
				set_party_account(set_pricing);
			}

			if(this.frm.doc.company) {
				erpnext.last_selected_company = this.frm.doc.company;
			}
		},

		transaction_date: function() {
			if (this.frm.doc.transaction_date) {
				this.frm.transaction_date = this.frm.doc.transaction_date;
				frappe.ui.form.trigger(this.frm.doc.doctype, "currency");
			}
		},

		posting_date: function() {
			var me = this;
			if (this.frm.doc.posting_date) {
				this.frm.posting_date = this.frm.doc.posting_date;

				if ((this.frm.doc.doctype == "Sales Invoice" && this.frm.doc.customer) ||
					(this.frm.doc.doctype == "Purchase Invoice" && this.frm.doc.supplier)) {
					return frappe.call({
						method: "erpnext.accounts.party.get_due_date",
						args: {
							"posting_date": me.frm.doc.posting_date,
							"party_type": me.frm.doc.doctype == "Sales Invoice" ? "Customer" : "Supplier",
							"bill_date": me.frm.doc.bill_date,
							"party": me.frm.doc.doctype == "Sales Invoice" ? me.frm.doc.customer : me.frm.doc.supplier,
							"company": me.frm.doc.company
						},
						callback: function(r, rt) {
							if(r.message) {
								me.frm.doc.due_date = r.message;
								refresh_field("due_date");
								frappe.ui.form.trigger(me.frm.doc.doctype, "currency");
								me.recalculate_terms();
							}
						}
					})
				} else {
					frappe.ui.form.trigger(me.frm.doc.doctype, "currency");
				}
			}
		},

		due_date: function() {
			// due_date is to be changed, payment terms template and/or payment schedule must
			// be removed as due_date is automatically changed based on payment terms
			if (this.frm.doc.due_date && !this.frm.updating_party_details && !this.frm.doc.is_pos) {
				if (this.frm.doc.payment_terms_template ||
					(this.frm.doc.payment_schedule && this.frm.doc.payment_schedule.length)) {
					var message1 = "";
					var message2 = "";
					var final_message = "Please clear the ";

					if (this.frm.doc.payment_terms_template) {
						message1 = "selected Payment Terms Template";
						final_message = final_message + message1;
					}

					if ((this.frm.doc.payment_schedule || []).length) {
						message2 = "Payment Schedule Table";
						if (message1.length !== 0) { message2 = " and " + message2; }
						final_message = final_message + message2;
					}
					frappe.msgprint(final_message);
				}
			}
		},

		bill_date: function() {
			this.posting_date();
		},

		recalculate_terms: function() {
			var doc = this.frm.doc;
			if (doc.payment_terms_template) {
				this.payment_terms_template();
			} else if (doc.payment_schedule) {
				var me = this;
				doc.payment_schedule.forEach(
					function(term) {
						if (term.payment_term) {
							me.payment_term(doc, term.doctype, term.name);
						} else {
							frappe.model.set_value(
								term.doctype, term.name, 'due_date',
								doc.posting_date || doc.transaction_date
							);
						}
					}
				);
			}
		},

		get_company_currency: function() {
			return erpnext.get_currency(this.frm.doc.company);
		},

		contact_person: function() {
			erpnext.utils.get_contact_details(this.frm);
		},

		currency: function() {
			/* manqala 19/09/2016: let the translation date be whichever of the transaction_date or posting_date is available */
			var transaction_date = this.frm.doc.transaction_date || this.frm.doc.posting_date;
			/* end manqala */
			var me = this;
			this.set_dynamic_labels();
			var company_currency = this.get_company_currency();
			// Added `ignore_pricing_rule` to determine if document is loading after mapping from another doc
			if(this.frm.doc.currency && this.frm.doc.currency !== company_currency
					&& !this.frm.doc.ignore_pricing_rule) {

				this.get_exchange_rate(transaction_date, this.frm.doc.currency, company_currency,
					function(exchange_rate) {
						if(exchange_rate != me.frm.doc.conversion_rate) {
							me.set_margin_amount_based_on_currency(exchange_rate);
							me.set_actual_charges_based_on_currency(exchange_rate);
							me.frm.set_value("conversion_rate", exchange_rate);
						}
					});
			} else {
				this.conversion_rate();
			}
		},

		conversion_rate: function() {
			var me = this.frm;
			if(this.frm.doc.currency === this.get_company_currency()) {
				this.frm.set_value("conversion_rate", 1.0);
			}
			if(this.frm.doc.currency === this.frm.doc.price_list_currency &&
				this.frm.doc.plc_conversion_rate !== this.frm.doc.conversion_rate) {
				this.frm.set_value("plc_conversion_rate", this.frm.doc.conversion_rate);
			}

			if(flt(this.frm.doc.conversion_rate)>0.0) {
				if(this.frm.doc.ignore_pricing_rule) {
					this.calculate_taxes_and_totals();
				} else if (!this.in_apply_price_list){
					this.apply_price_list();
				}

			}
			// Make read only if Accounts Settings doesn't allow stale rates
			this.frm.set_df_property("conversion_rate", "read_only", erpnext.stale_rate_allowed() ? 0 : 1);
		},

		shipping_rule: function() {
			var this$1 = this;

			var me = this;
			if(this.frm.doc.shipping_rule) {
				return this.frm.call({
					doc: this.frm.doc,
					method: "apply_shipping_rule",
					callback: function(r) {
						if(!r.exc) {
							me.calculate_taxes_and_totals();
						}
					}
				}).fail(function () { return this$1.frm.set_value('shipping_rule', ''); });
			}
			else {
				me.calculate_taxes_and_totals();
			}
		},

		set_margin_amount_based_on_currency: function(exchange_rate) {
			if (in_list(["Quotation", "Sales Order", "Delivery Note", "Sales Invoice"]), this.frm.doc.doctype) {
				$.each(this.frm.doc.items || [], function(i, d) {
					if(d.margin_type == "Amount") {
						frappe.model.set_value(d.doctype, d.name, "margin_rate_or_amount",
							flt(d.margin_rate_or_amount) / flt(exchange_rate));
					}
				});
			}
		},

		set_actual_charges_based_on_currency: function(exchange_rate) {
			$.each(this.frm.doc.taxes || [], function(i, d) {
				if(d.charge_type == "Actual") {
					frappe.model.set_value(d.doctype, d.name, "tax_amount",
						flt(d.tax_amount) / flt(exchange_rate));
				}
			});
		},

		get_exchange_rate: function(transaction_date, from_currency, to_currency, callback) {
			var args;
			if (["Quotation", "Sales Order", "Delivery Note", "Sales Invoice"].includes(this.frm.doctype)) {
				args = "for_selling";
			}
			else if (["Purchase Order", "Purchase Receipt", "Purchase Invoice"].includes(this.frm.doctype)) {
				args = "for_buying";
			}

			if (!transaction_date || !from_currency || !to_currency) { return; }
			return frappe.call({
				method: "erpnext.setup.utils.get_exchange_rate",
				args: {
					transaction_date: transaction_date,
					from_currency: from_currency,
					to_currency: to_currency,
					args: args
				},
				callback: function(r) {
					callback(flt(r.message));
				}
			});
		},

		price_list_currency: function() {
			var me=this;
			this.set_dynamic_labels();

			var company_currency = this.get_company_currency();
			// Added `ignore_pricing_rule` to determine if document is loading after mapping from another doc
			if(this.frm.doc.price_list_currency !== company_currency  && !this.frm.doc.ignore_pricing_rule) {
				this.get_exchange_rate(this.frm.doc.posting_date, this.frm.doc.price_list_currency, company_currency,
					function(exchange_rate) {
						me.frm.set_value("plc_conversion_rate", exchange_rate);
					});
			} else {
				this.plc_conversion_rate();
			}
		},

		plc_conversion_rate: function() {
			if(this.frm.doc.price_list_currency === this.get_company_currency()) {
				this.frm.set_value("plc_conversion_rate", 1.0);
			} else if(this.frm.doc.price_list_currency === this.frm.doc.currency
				&& this.frm.doc.plc_conversion_rate && cint(this.frm.doc.plc_conversion_rate) != 1 &&
				cint(this.frm.doc.plc_conversion_rate) != cint(this.frm.doc.conversion_rate)) {
				this.frm.set_value("conversion_rate", this.frm.doc.plc_conversion_rate);
			}

			if(!this.in_apply_price_list) {
				this.apply_price_list(null, true);
			}
		},

		uom: function(doc, cdt, cdn) {
			var me = this;
			var item = frappe.get_doc(cdt, cdn);
			if(item.item_code && item.uom) {
				return this.frm.call({
					method: "erpnext.stock.get_item_details.get_conversion_factor",
					child: item,
					args: {
						item_code: item.item_code,
						uom: item.uom
					},
					callback: function(r) {
						if(!r.exc) {
							me.conversion_factor(me.frm.doc, cdt, cdn);
						}
					}
				});
			}
		},

		conversion_factor: function(doc, cdt, cdn, dont_fetch_price_list_rate) {
			if(frappe.meta.get_docfield(cdt, "stock_qty", cdn)) {
				var item = frappe.get_doc(cdt, cdn);
				frappe.model.round_floats_in(item, ["qty", "conversion_factor"]);
				item.stock_qty = flt(item.qty * item.conversion_factor, precision("stock_qty", item));
				refresh_field("stock_qty", item.name, item.parentfield);
				this.toggle_conversion_factor(item);

				if(doc.doctype != "Material Request") {
					item.total_weight = flt(item.stock_qty * item.weight_per_unit);
					refresh_field("total_weight", item.name, item.parentfield);
					this.calculate_net_weight();
				}

				if (!dont_fetch_price_list_rate &&
					frappe.meta.has_field(doc.doctype, "price_list_currency")) {
					this.apply_price_list(item, true);
				}
			}
		},

		toggle_conversion_factor: function(item) {
			// toggle read only property for conversion factor field if the uom and stock uom are same
			if(this.frm.get_field('items').grid.fields_map.conversion_factor) {
				this.frm.fields_dict.items.grid.toggle_enable("conversion_factor",
					((item.uom != item.stock_uom) && !frappe.meta.get_docfield(cur_frm.fields_dict.items.grid.doctype, "conversion_factor").read_only)? true: false);
			}

		},

		qty: function(doc, cdt, cdn) {
			var item = frappe.get_doc(cdt, cdn);
			this.conversion_factor(doc, cdt, cdn, true);
			this.apply_pricing_rule(item, true);
		},

		service_stop_date: function(frm, cdt, cdn) {
			var child = locals[cdt][cdn];

			if(child.service_stop_date) {
				var start_date = Date.parse(child.service_start_date);
				var end_date = Date.parse(child.service_end_date);
				var stop_date = Date.parse(child.service_stop_date);

				if(stop_date < start_date) {
					frappe.model.set_value(cdt, cdn, "service_stop_date", "");
					frappe.throw(__("Service Stop Date cannot be before Service Start Date"));
				} else if (stop_date > end_date) {
					frappe.model.set_value(cdt, cdn, "service_stop_date", "");
					frappe.throw(__("Service Stop Date cannot be after Service End Date"));
				}
			}
		},

		service_start_date: function(frm, cdt, cdn) {
			var child = locals[cdt][cdn];

			if(child.service_start_date) {
				frappe.call({
					"method": "erpnext.stock.get_item_details.calculate_service_end_date",
					args: {"args": child},
					callback: function(r) {
						frappe.model.set_value(cdt, cdn, "service_end_date", r.message.service_end_date);
					}
				});
			}
		},

		calculate_net_weight: function(){
			/* Calculate Total Net Weight then further applied shipping rule to calculate shipping charges.*/
			var me = this;
			this.frm.doc.total_net_weight= 0.0;

			$.each(this.frm.doc["items"] || [], function(i, item) {
				me.frm.doc.total_net_weight += flt(item.total_weight);
			});
			refresh_field("total_net_weight");
			this.shipping_rule();
		},

		set_dynamic_labels: function() {
			// What TODO? should we make price list system non-mandatory?
			this.frm.toggle_reqd("plc_conversion_rate",
				!!(this.frm.doc.price_list_name && this.frm.doc.price_list_currency));

			var company_currency = this.get_company_currency();
			this.change_form_labels(company_currency);
			this.change_grid_labels(company_currency);
			this.frm.refresh_fields();
		},

		change_form_labels: function(company_currency) {
			var me = this;

			this.frm.set_currency_labels(["base_total", "base_net_total", "base_total_taxes_and_charges",
				"base_discount_amount", "base_grand_total", "base_rounded_total", "base_in_words",
				"base_taxes_and_charges_added", "base_taxes_and_charges_deducted", "total_amount_to_pay",
				"base_paid_amount", "base_write_off_amount", "base_change_amount", "base_operating_cost",
				"base_raw_material_cost", "base_total_cost", "base_scrap_material_cost",
				"base_rounding_adjustment"], company_currency);

			this.frm.set_currency_labels(["total", "net_total", "total_taxes_and_charges", "discount_amount",
				"grand_total", "taxes_and_charges_added", "taxes_and_charges_deducted",
				"rounded_total", "in_words", "paid_amount", "write_off_amount", "operating_cost",
				"scrap_material_cost", "rounding_adjustment", "raw_material_cost",
				"total_cost"], this.frm.doc.currency);

			this.frm.set_currency_labels(["outstanding_amount", "total_advance"],
				this.frm.doc.party_account_currency);

			cur_frm.set_df_property("conversion_rate", "description", "1 " + this.frm.doc.currency
				+ " = [?] " + company_currency);

			if(this.frm.doc.price_list_currency && this.frm.doc.price_list_currency!=company_currency) {
				cur_frm.set_df_property("plc_conversion_rate", "description", "1 "
					+ this.frm.doc.price_list_currency + " = [?] " + company_currency);
			}

			// toggle fields
			this.frm.toggle_display(["conversion_rate", "base_total", "base_net_total",
				"base_total_taxes_and_charges", "base_taxes_and_charges_added", "base_taxes_and_charges_deducted",
				"base_grand_total", "base_rounded_total", "base_in_words", "base_discount_amount",
				"base_paid_amount", "base_write_off_amount", "base_operating_cost", "base_raw_material_cost",
				"base_total_cost", "base_scrap_material_cost", "base_rounding_adjustment"],
			this.frm.doc.currency != company_currency);

			this.frm.toggle_display(["plc_conversion_rate", "price_list_currency"],
				this.frm.doc.price_list_currency != company_currency);

			var show = cint(cur_frm.doc.discount_amount) ||
					((cur_frm.doc.taxes || []).filter(function(d) {return d.included_in_print_rate===1}).length);

			if(frappe.meta.get_docfield(cur_frm.doctype, "net_total"))
				{ cur_frm.toggle_display("net_total", show); }

			if(frappe.meta.get_docfield(cur_frm.doctype, "base_net_total"))
				{ cur_frm.toggle_display("base_net_total", (show && (me.frm.doc.currency != company_currency))); }

		},

		change_grid_labels: function(company_currency) {
			var me = this;

			this.frm.set_currency_labels(["base_rate", "base_net_rate", "base_price_list_rate", "base_amount", "base_net_amount"],
				company_currency, "items");

			this.frm.set_currency_labels(["rate", "net_rate", "price_list_rate", "amount", "net_amount"],
				this.frm.doc.currency, "items");

			if(this.frm.fields_dict["operations"]) {
				this.frm.set_currency_labels(["operating_cost", "hour_rate"], this.frm.doc.currency, "operations");
				this.frm.set_currency_labels(["base_operating_cost", "base_hour_rate"], company_currency, "operations");

				var item_grid = this.frm.fields_dict["operations"].grid;
				$.each(["base_operating_cost", "base_hour_rate"], function(i, fname) {
					if(frappe.meta.get_docfield(item_grid.doctype, fname))
						{ item_grid.set_column_disp(fname, me.frm.doc.currency != company_currency); }
				});
			}

			if(this.frm.fields_dict["scrap_items"]) {
				this.frm.set_currency_labels(["rate", "amount"], this.frm.doc.currency, "scrap_items");
				this.frm.set_currency_labels(["base_rate", "base_amount"], company_currency, "scrap_items");

				var item_grid = this.frm.fields_dict["scrap_items"].grid;
				$.each(["base_rate", "base_amount"], function(i, fname) {
					if(frappe.meta.get_docfield(item_grid.doctype, fname))
						{ item_grid.set_column_disp(fname, me.frm.doc.currency != company_currency); }
				});
			}

			if(this.frm.fields_dict["taxes"]) {
				this.frm.set_currency_labels(["tax_amount", "total", "tax_amount_after_discount"], this.frm.doc.currency, "taxes");

				this.frm.set_currency_labels(["base_tax_amount", "base_total", "base_tax_amount_after_discount"], company_currency, "taxes");
			}

			if(this.frm.fields_dict["advances"]) {
				this.frm.set_currency_labels(["advance_amount", "allocated_amount"],
					this.frm.doc.party_account_currency, "advances");
			}

			// toggle columns
			var item_grid = this.frm.fields_dict["items"].grid;
			$.each(["base_rate", "base_price_list_rate", "base_amount"], function(i, fname) {
				if(frappe.meta.get_docfield(item_grid.doctype, fname))
					{ item_grid.set_column_disp(fname, me.frm.doc.currency != company_currency); }
			});

			var show = (cint(cur_frm.doc.discount_amount)) ||
				((cur_frm.doc.taxes || []).filter(function(d) {return d.included_in_print_rate===1}).length);

			$.each(["net_rate", "net_amount"], function(i, fname) {
				if(frappe.meta.get_docfield(item_grid.doctype, fname))
					{ item_grid.set_column_disp(fname, show); }
			});

			$.each(["base_net_rate", "base_net_amount"], function(i, fname) {
				if(frappe.meta.get_docfield(item_grid.doctype, fname))
					{ item_grid.set_column_disp(fname, (show && (me.frm.doc.currency != company_currency))); }
			});

			// set labels
			var $wrapper = $(this.frm.wrapper);
		},

		recalculate: function() {
			this.calculate_taxes_and_totals();
		},

		recalculate_values: function() {
			this.calculate_taxes_and_totals();
		},

		calculate_charges: function() {
			this.calculate_taxes_and_totals();
		},

		ignore_pricing_rule: function() {
			if(this.frm.doc.ignore_pricing_rule) {
				var me = this;
				var item_list = [];

				$.each(this.frm.doc["items"] || [], function(i, d) {
					if (d.item_code && !d.is_free_item) {
						item_list.push({
							"doctype": d.doctype,
							"name": d.name,
							"item_code": d.item_code,
							"pricing_rules": d.pricing_rules,
							"parenttype": d.parenttype,
							"parent": d.parent
						});
					}
				});
				return this.frm.call({
					method: "erpnext.accounts.doctype.pricing_rule.pricing_rule.remove_pricing_rules",
					args: { item_list: item_list },
					callback: function(r) {
						if (!r.exc && r.message) {
							r.message.forEach(function (row_item) {
								me.remove_pricing_rule(row_item);
							});
							me._set_values_for_item_list(r.message);
							me.calculate_taxes_and_totals();
							if(me.frm.doc.apply_discount_on) { me.frm.trigger("apply_discount_on"); }
						}
					}
				});
			} else {
				this.apply_pricing_rule();
			}
		},

		apply_pricing_rule: function(item, calculate_taxes_and_totals) {
			var me = this;
			var args = this._get_args(item);
			if (!(args.items && args.items.length)) {
				if(calculate_taxes_and_totals) { me.calculate_taxes_and_totals(); }
				return;
			}

			return this.frm.call({
				method: "erpnext.accounts.doctype.pricing_rule.pricing_rule.apply_pricing_rule",
				args: {	args: args, doc: me.frm.doc },
				callback: function(r) {
					if (!r.exc && r.message) {
						me._set_values_for_item_list(r.message);
						if(item) { me.set_gross_profit(item); }
						if(me.frm.doc.apply_discount_on) { me.frm.trigger("apply_discount_on"); }
					}
				}
			});
		},

		_get_args: function(item) {
			var me = this;
			return {
				"items": this._get_item_list(item),
				"customer": me.frm.doc.customer || me.frm.doc.party_name,
				"quotation_to": me.frm.doc.quotation_to,
				"customer_group": me.frm.doc.customer_group,
				"territory": me.frm.doc.territory,
				"supplier": me.frm.doc.supplier,
				"supplier_group": me.frm.doc.supplier_group,
				"currency": me.frm.doc.currency,
				"conversion_rate": me.frm.doc.conversion_rate,
				"price_list": me.frm.doc.selling_price_list || me.frm.doc.buying_price_list,
				"price_list_currency": me.frm.doc.price_list_currency,
				"plc_conversion_rate": me.frm.doc.plc_conversion_rate,
				"company": me.frm.doc.company,
				"transaction_date": me.frm.doc.transaction_date || me.frm.doc.posting_date,
				"campaign": me.frm.doc.campaign,
				"sales_partner": me.frm.doc.sales_partner,
				"ignore_pricing_rule": me.frm.doc.ignore_pricing_rule,
				"doctype": me.frm.doc.doctype,
				"name": me.frm.doc.name,
				"is_return": cint(me.frm.doc.is_return),
				"update_stock": in_list(['Sales Invoice', 'Purchase Invoice'], me.frm.doc.doctype) ? cint(me.frm.doc.update_stock) : 0,
				"conversion_factor": me.frm.doc.conversion_factor,
				"pos_profile": me.frm.doc.doctype == 'Sales Invoice' ? me.frm.doc.pos_profile : '',
				"coupon_code": me.frm.doc.coupon_code
			};
		},

		_get_item_list: function(item) {
			var item_list = [];
			var append_item = function(d) {
				if (d.item_code) {
					item_list.push({
						"doctype": d.doctype,
						"name": d.name,
						"child_docname": d.name,
						"item_code": d.item_code,
						"item_group": d.item_group,
						"brand": d.brand,
						"qty": d.qty,
						"stock_qty": d.stock_qty,
						"uom": d.uom,
						"stock_uom": d.stock_uom,
						"parenttype": d.parenttype,
						"parent": d.parent,
						"pricing_rules": d.pricing_rules,
						"warehouse": d.warehouse,
						"serial_no": d.serial_no,
						"price_list_rate": d.price_list_rate,
						"conversion_factor": d.conversion_factor || 1.0
					});

					// if doctype is Quotation Item / Sales Order Iten then add Margin Type and rate in item_list
					if (in_list(["Quotation Item", "Sales Order Item", "Delivery Note Item", "Sales Invoice Item"]), d.doctype){
						item_list[0]["margin_type"] = d.margin_type;
						item_list[0]["margin_rate_or_amount"] = d.margin_rate_or_amount;
					}
				}
			};

			if (item) {
				append_item(item);
			} else {
				$.each(this.frm.doc["items"] || [], function(i, d) {
					append_item(d);
				});
			}
			return item_list;
		},

		_set_values_for_item_list: function(children) {
			var me = this;
			var price_list_rate_changed = false;
			var items_rule_dict = {};

			for(var i=0, l=children.length; i<l; i++) {
				var d = children[i];
				var existing_pricing_rule = frappe.model.get_value(d.doctype, d.name, "pricing_rules");
				for(var k in d) {
					var v = d[k];
					if (["doctype", "name"].indexOf(k)===-1) {
						if(k=="price_list_rate") {
							if(flt(v) != flt(d.price_list_rate)) { price_list_rate_changed = true; }
						}
						frappe.model.set_value(d.doctype, d.name, k, v);
					}
				}

				// if pricing rule set as blank from an existing value, apply price_list
				if(!me.frm.doc.ignore_pricing_rule && existing_pricing_rule && !d.pricing_rules) {
					me.apply_price_list(frappe.get_doc(d.doctype, d.name));
				} else if(!d.pricing_rules) {
					me.remove_pricing_rule(frappe.get_doc(d.doctype, d.name));
				}

				if (d.free_item_data) {
					me.apply_product_discount(d.free_item_data);
				}

				if (d.apply_rule_on_other_items) {
					items_rule_dict[d.name] = d;
				}
			}

			me.apply_rule_on_other_items(items_rule_dict);

			if(!price_list_rate_changed) { me.calculate_taxes_and_totals(); }
		},

		apply_rule_on_other_items: function(args) {
			var me = this;
			var fields = ["discount_percentage", "pricing_rules", "discount_amount", "rate"];

			var loop = function ( k ) {
				var data = args[k];

				if (data && data.apply_rule_on_other_items) {
					me.frm.doc.items.forEach(function (d) {
						if (in_list(JSON.parse(data.apply_rule_on_other_items), d[data.apply_rule_on])) {
							for(var k in data) {
								if (in_list(fields, k) && data[k] && (data.price_or_product_discount === 'Price' || k === 'pricing_rules')) {
									frappe.model.set_value(d.doctype, d.name, k, data[k]);
								}
							}
						}
					});
				}
			};

			for(var k in args) loop( k );
		},

		apply_product_discount: function(free_item_data) {
			var items = this.frm.doc.items.filter(function (d) { return (d.item_code == free_item_data.item_code
				&& d.is_free_item); }) || [];

			if (!items.length) {
				var row_to_modify = frappe.model.add_child(this.frm.doc,
					this.frm.doc.doctype + ' Item', 'items');

				for (var key in free_item_data) {
					row_to_modify[key] = free_item_data[key];
				}
			} if (items && items.length && free_item_data) {
				items[0].qty = free_item_data.qty;
			}
		},

		apply_price_list: function(item, reset_plc_conversion) {
			// We need to reset plc_conversion_rate sometimes because the call to
			// `erpnext.stock.get_item_details.apply_price_list` is sensitive to its value
			if (!reset_plc_conversion) {
				this.frm.set_value("plc_conversion_rate", "");
			}

			var me = this;
			var args = this._get_args(item);
			if (!((args.items && args.items.length) || args.price_list)) {
				return;
			}

			if (me.in_apply_price_list == true) { return; }

			me.in_apply_price_list = true;
			return this.frm.call({
				method: "erpnext.stock.get_item_details.apply_price_list",
				args: {	args: args },
				callback: function(r) {
					if (!r.exc) {
						frappe.run_serially([
							function () { return me.frm.set_value("price_list_currency", r.message.parent.price_list_currency); },
							function () { return me.frm.set_value("plc_conversion_rate", r.message.parent.plc_conversion_rate); },
							function () {
								if(args.items.length) {
									me._set_values_for_item_list(r.message.children);
								}
							},
							function () { me.in_apply_price_list = false; }
						]);

					} else {
						me.in_apply_price_list = false;
					}
				}
			}).always(function () {
				me.in_apply_price_list = false;
			});
		},

		remove_pricing_rule: function(item) {
			var me = this;
			var fields = ["discount_percentage",
				"discount_amount", "margin_rate_or_amount", "rate_with_margin"];

			if(item.remove_free_item) {
				var items = [];

				me.frm.doc.items.forEach(function (d) {
					if(d.item_code != item.remove_free_item || !d.is_free_item) {
						items.push(d);
					}
				});

				me.frm.doc.items = items;
				refresh_field('items');
			} else if(item.applied_on_items && item.apply_on) {
				var applied_on_items = JSON.parse(item.applied_on_items);
				me.frm.doc.items.forEach(function (row) {
					if(in_list(applied_on_items, row[item.apply_on])) {
						fields.forEach(function (f) {
							row[f] = 0;
						});

						["pricing_rules", "margin_type"].forEach(function (field) {
							if (row[field]) {
								row[field] = '';
							}
						});
					}
				});

				me.trigger_price_list_rate();
			}
		},

		trigger_price_list_rate: function() {
			var me  = this;

			this.frm.doc.items.forEach(function (child_row) {
				me.frm.script_manager.trigger("price_list_rate",
					child_row.doctype, child_row.name);
			});
		},

		validate_company_and_party: function() {
			var me = this;
			var valid = true;

			$.each(["company", "customer"], function(i, fieldname) {
				if(frappe.meta.has_field(me.frm.doc.doctype, fieldname) && me.frm.doc.doctype != "Purchase Order") {
					if (!me.frm.doc[fieldname]) {
						frappe.msgprint(__("Please specify") + ": " +
							frappe.meta.get_label(me.frm.doc.doctype, fieldname, me.frm.doc.name) +
							". " + __("It is needed to fetch Item Details."));
						valid = false;
					}
				}
			});
			return valid;
		},

		get_terms: function() {
			var me = this;

			erpnext.utils.get_terms(this.frm.doc.tc_name, this.frm.doc, function(r) {
				if(!r.exc) {
					me.frm.set_value("terms", r.message);
				}
			});
		},

		taxes_and_charges: function() {
			var me = this;
			if(this.frm.doc.taxes_and_charges) {
				return this.frm.call({
					method: "erpnext.controllers.accounts_controller.get_taxes_and_charges",
					args: {
						"master_doctype": frappe.meta.get_docfield(this.frm.doc.doctype, "taxes_and_charges",
							this.frm.doc.name).options,
						"master_name": this.frm.doc.taxes_and_charges
					},
					callback: function(r) {
						if(!r.exc) {
							if(me.frm.doc.shipping_rule && me.frm.doc.taxes) {
								for (var i = 0, list = r.message; i < list.length; i += 1) {
									var tax = list[i];

									me.frm.add_child("taxes", tax);
								}

								refresh_field("taxes");
							} else {
								me.frm.set_value("taxes", r.message);
								me.calculate_taxes_and_totals();
							}
						}
					}
				});
			}
		},

		tax_category: function() {
			var this$1 = this;

			var me = this;
			if(me.frm.updating_party_details) { return; }

			frappe.run_serially([
				function () { return this$1.update_item_tax_map(); },
				function () { return erpnext.utils.set_taxes(this$1.frm, "tax_category"); } ]);
		},

		item_tax_template: function(doc, cdt, cdn) {
			var me = this;
			if(me.frm.updating_party_details) { return; }

			var item = frappe.get_doc(cdt, cdn);

			if(item.item_tax_template) {
				return this.frm.call({
					method: "erpnext.stock.get_item_details.get_item_tax_map",
					args: {
						company: me.frm.doc.company,
						item_tax_template: item.item_tax_template,
						as_json: true
					},
					callback: function(r) {
						if(!r.exc) {
							item.item_tax_rate = r.message;
							me.add_taxes_from_item_tax_template(item.item_tax_rate);
							me.calculate_taxes_and_totals();
						}
					}
				});
			} else {
				item.item_tax_rate = "{}";
				me.calculate_taxes_and_totals();
			}
		},

		update_item_tax_map: function() {
			var me = this;
			var item_codes = [];
			$.each(this.frm.doc.items || [], function(i, item) {
				if(item.item_code) {
					item_codes.push(item.item_code);
				}
			});

			if(item_codes.length) {
				return this.frm.call({
					method: "erpnext.stock.get_item_details.get_item_tax_info",
					args: {
						company: me.frm.doc.company,
						tax_category: cstr(me.frm.doc.tax_category),
						item_codes: item_codes
					},
					callback: function(r) {
						if(!r.exc) {
							$.each(me.frm.doc.items || [], function(i, item) {
								if(item.item_code && r.message.hasOwnProperty(item.item_code)) {
									if (!item.item_tax_template) {
										item.item_tax_template = r.message[item.item_code].item_tax_template;
										item.item_tax_rate = r.message[item.item_code].item_tax_rate;
									}
									me.add_taxes_from_item_tax_template(item.item_tax_rate);
								} else {
									item.item_tax_template = "";
									item.item_tax_rate = "{}";
								}
							});
							me.calculate_taxes_and_totals();
						}
					}
				});
			}
		},

		is_recurring: function() {
			// set default values for recurring documents
			if(this.frm.doc.is_recurring && this.frm.doc.__islocal) {
				frappe.msgprint(__("Please set recurring after saving"));
				this.frm.set_value('is_recurring', 0);
				return;
			}

			if(this.frm.doc.is_recurring) {
				if(!this.frm.doc.recurring_id) {
					this.frm.set_value('recurring_id', this.frm.doc.name);
				}

				var owner_email = this.frm.doc.owner=="Administrator"
					? frappe.user_info("Administrator").email
					: this.frm.doc.owner;

				this.frm.doc.notification_email_address = $.map([cstr(owner_email),
					cstr(this.frm.doc.contact_email)], function(v) { return v || null; }).join(", ");
				this.frm.doc.repeat_on_day_of_month = frappe.datetime.str_to_obj(this.frm.doc.posting_date).getDate();
			}

			refresh_many(["notification_email_address", "repeat_on_day_of_month"]);
		},

		from_date: function() {
			// set to_date
			if(this.frm.doc.from_date) {
				var recurring_type_map = {'Monthly': 1, 'Quarterly': 3, 'Half-yearly': 6,
					'Yearly': 12};

				var months = recurring_type_map[this.frm.doc.recurring_type];
				if(months) {
					var to_date = frappe.datetime.add_months(this.frm.doc.from_date,
						months);
					this.frm.doc.to_date = frappe.datetime.add_days(to_date, -1);
					refresh_field('to_date');
				}
			}
		},

		set_gross_profit: function(item) {
			if (this.frm.doc.doctype == "Sales Order" && item.valuation_rate) {
				var rate = flt(item.rate) * flt(this.frm.doc.conversion_rate || 1);
				item.gross_profit = flt(((rate - item.valuation_rate) * item.stock_qty), precision("amount", item));
			}
		},

		setup_item_selector: function() {
			// TODO: remove item selector

			return;
			// if(!this.item_selector) {
			// 	this.item_selector = new erpnext.ItemSelector({frm: this.frm});
			// }
		},

		get_advances: function() {
			if(!this.frm.is_return) {
				return this.frm.call({
					method: "set_advances",
					doc: this.frm.doc,
					callback: function(r, rt) {
						refresh_field("advances");
					}
				})
			}
		},

		make_payment_entry: function() {
			return frappe.call({
				method: cur_frm.cscript.get_method_for_payment(),
				args: {
					"dt": cur_frm.doc.doctype,
					"dn": cur_frm.doc.name
				},
				callback: function(r) {
					var doclist = frappe.model.sync(r.message);
					frappe.set_route("Form", doclist[0].doctype, doclist[0].name);
					// cur_frm.refresh_fields()
				}
			});
		},

		get_method_for_payment: function(){
			var method = "erpnext.accounts.doctype.payment_entry.payment_entry.get_payment_entry";
			if(cur_frm.doc.__onload && cur_frm.doc.__onload.make_payment_via_journal_entry){
				if(in_list(['Sales Invoice', 'Purchase Invoice'],  cur_frm.doc.doctype)){
					method = "erpnext.accounts.doctype.journal_entry.journal_entry.get_payment_entry_against_invoice";
				}else {
					method= "erpnext.accounts.doctype.journal_entry.journal_entry.get_payment_entry_against_order";
				}
			}

			return method
		},

		set_query_for_batch: function(doc, cdt, cdn) {
			// Show item's batches in the dropdown of batch no

			var me = this;
			var item = frappe.get_doc(cdt, cdn);

			if(!item.item_code) {
				frappe.throw(__("Please enter Item Code to get batch no"));
			} else if (doc.doctype == "Purchase Receipt" ||
				(doc.doctype == "Purchase Invoice" && doc.update_stock)) {

				return {
					filters: {'item': item.item_code}
				}
			} else {
				var filters = {
					'item_code': item.item_code,
					'posting_date': me.frm.doc.posting_date || frappe.datetime.nowdate(),
				};

				if (doc.is_return) {
					filters["is_return"] = 1;
				}

				if (item.warehouse) { filters["warehouse"] = item.warehouse; }

				return {
					query : "erpnext.controllers.queries.get_batch_no",
					filters: filters
				}
			}
		},

		set_query_for_item_tax_template: function(doc, cdt, cdn) {
			var item = frappe.get_doc(cdt, cdn);
			if(!item.item_code) {
				frappe.throw(__("Please enter Item Code to get item taxes"));
			} else {

				var filters = {
					'item_code': item.item_code,
					'valid_from': ["<=", doc.transaction_date || doc.bill_date || doc.posting_date],
					'item_group': item.item_group,
				};

				if (doc.tax_category)
					{ filters['tax_category'] = doc.tax_category; }

				return {
					query: "erpnext.controllers.queries.get_tax_template",
					filters: filters
				}
			}
		},

		payment_terms_template: function() {
			var me = this;
			var doc = this.frm.doc;
			if(doc.payment_terms_template && doc.doctype !== 'Delivery Note') {
				var posting_date = doc.posting_date || doc.transaction_date;
				frappe.call({
					method: "erpnext.controllers.accounts_controller.get_payment_terms",
					args: {
						terms_template: doc.payment_terms_template,
						posting_date: posting_date,
						grand_total: doc.rounded_total || doc.grand_total,
						bill_date: doc.bill_date
					},
					callback: function(r) {
						if(r.message && !r.exc) {
							me.frm.set_value("payment_schedule", r.message);
						}
					}
				});
			}
		},

		payment_term: function(doc, cdt, cdn) {
			var row = locals[cdt][cdn];
			if(row.payment_term) {
				frappe.call({
					method: "erpnext.controllers.accounts_controller.get_payment_term_details",
					args: {
						term: row.payment_term,
						bill_date: this.frm.doc.bill_date,
						posting_date: this.frm.doc.posting_date || this.frm.doc.transaction_date,
						grand_total: this.frm.doc.rounded_total || this.frm.doc.grand_total
					},
					callback: function(r) {
						if(r.message && !r.exc) {
							for (var d in r.message) {
								frappe.model.set_value(cdt, cdn, d, r.message[d]);
							}
						}
					}
				});
			}
		},

		blanket_order: function(doc, cdt, cdn) {
			var me = this;
			var item = locals[cdt][cdn];
			if (item.blanket_order && (item.parenttype=="Sales Order" || item.parenttype=="Purchase Order")) {
				frappe.call({
					method: "erpnext.stock.get_item_details.get_blanket_order_details",
					args: {
						args:{
							item_code: item.item_code,
							customer: doc.customer,
							supplier: doc.supplier,
							company: doc.company,
							transaction_date: doc.transaction_date,
							blanket_order: item.blanket_order
						}
					},
					callback: function(r) {
						if (!r.message) {
							frappe.throw(__("Invalid Blanket Order for the selected Customer and Item"));
						} else {
							frappe.run_serially([
								function () { return frappe.model.set_value(cdt, cdn, "blanket_order_rate", r.message.blanket_order_rate); },
								function () { return me.frm.script_manager.trigger("price_list_rate", cdt, cdn); }
							]);
						}
					}
				});
			}
		},

		set_reserve_warehouse: function() {
			this.autofill_warehouse(this.frm.doc.supplied_items, "reserve_warehouse", this.frm.doc.set_reserve_warehouse);
		},

		set_warehouse: function() {
			this.autofill_warehouse(this.frm.doc.items, "warehouse", this.frm.doc.set_warehouse);
		},

		autofill_warehouse : function (child_table, warehouse_field, warehouse) {
			if (warehouse && child_table && child_table.length) {
				var doctype = child_table[0].doctype;
				$.each(child_table || [], function(i, item) {
					frappe.model.set_value(doctype, item.name, warehouse_field, warehouse);
				});
			}
		},

		coupon_code: function() {
			var this$1 = this;

			var me = this;
			frappe.run_serially([
				function () { return this$1.frm.doc.ignore_pricing_rule=1; },
				function () { return me.ignore_pricing_rule(); },
				function () { return this$1.frm.doc.ignore_pricing_rule=0; },
				function () { return me.apply_pricing_rule(); }
			]);
		}
	});

	erpnext.show_serial_batch_selector = function(frm, d, callback, on_close, show_dialog) {
		frappe.require("assets/erpnext/js/utils/serial_no_batch_selector.js", function() {
			new erpnext.SerialNoBatchSelector({
				frm: frm,
				item: d,
				warehouse_details: {
					type: "Warehouse",
					name: d.warehouse
				},
				callback: callback,
				on_close: on_close
			}, show_dialog);
		});
	};

	frappe.templates['pos'] = '<div class="pos">  <div class="row">   <div class="col-sm-5 pos-bill-wrapper">    <div class="col-sm-12"><h6 class="form-section-heading uppercase">{{ __("Item Cart") }}</h6></div>    <div class="pos-bill">     <div class="item-cart">      <div class="pos-list-row pos-bill-header text-muted h6">       <span class="cell subject">                {{ __("Item Name")}}       </span>       <span class="cell text-right">{{ __("Quantity") }}</span>       <span class="cell text-right">{{ __("Discount") }}</span>       <span class="cell text-right">{{ __("Rate") }}</span>      </div>      <div class="item-cart-items">       <div class="no-items-message text-extra-muted">        <span class="text-center">         <i class="fa fa-2x fa-shopping-cart"></i>         <p>{{ __("Tap items to add them here") }}</p>        </span>       </div>       <div class="items">       </div>      </div>     </div>    </div>    <div class="totals-area">     <div class="pos-list-row net-total-area">      <div class="cell"></div>      <div class="cell text-right">{%= __("Net Total") %}</div>      <div class="cell price-cell bold net-total text-right"></div>     </div>     <div class="pos-list-row tax-area">      <div class="cell"></div>      <div class="cell text-right">{%= __("Taxes") %}</div>      <div class="cell price-cell text-right tax-table">      </div>     </div>     {% if(allow_user_to_edit_discount) { %}      <div class="pos-list-row discount-amount-area">       <div class="cell"></div>       <div class="cell text-right">{%= __("Discount") %}</div>       <div class="cell price-cell discount-field-col">        <div class="input-group input-group-sm">         <span class="input-group-addon">%</span>         <input type="text" class="form-control discount-percentage text-right">        </div>        <div class="input-group input-group-sm">         <span class="input-group-addon">{%= get_currency_symbol(currency) %}</span>         <input type="text" class="form-control discount-amount text-right" placeholder="{%= 0.00 %}">        </div>       </div>      </div>     {% } %}     <div class="pos-list-row grand-total-area collapse-btn" style="border-bottom:1px solid #d1d8dd;">      <div class="cell">       <a class="">        <i class="octicon octicon-chevron-down"></i>       </a>      </div>      <div class="cell text-right bold">{%= __("Grand Total") %}</div>      <div class="cell price-cell grand-total text-right lead"></div>     </div>     <div class="pos-list-row qty-total-area collapse-btn" style="border-bottom:1px solid #d1d8dd;">      <div class="cell">       <a class="">        <i class="octicon octicon-chevron-down"></i>       </a>      </div>      <div class="cell text-right bold">{%= __("Qty Total") %}</div>      <div class="cell price-cell qty-total text-right lead"></div>     </div>    </div>    <div class="row" style="margin-top: 30px">     <div class="col-sm-6 selected-item">      </div>     <div class="col-xs-6 numeric_keypad hidden-xs" style="display:none">      {% var chartData = ["Qty", "Disc", "Price"] %} {% for(var i=0; i      <3; i++) { %} <div class="row text-right">       {% for(var j=i*3; j       <(i+1)*3; j++) { %} <button type="button" class="btn btn-default numeric-keypad" val="{{j+1}}">{{j+1}}</button>        {% } %}        <button type="button" {% if((!allow_user_to_edit_rate && __(chartData[i]) == __("Price")) || (!allow_user_to_edit_discount && __(chartData[i]) == __("Disc"))) { %} disabled {% } %} id="pos-item-{{ chartData[i].toLowerCase() }}" class="btn text-center btn-default numeric-keypad pos-operation">{{ __(chartData[i]) }}</button>     </div>     {% } %}     <div class="row text-right">      <button type="button" class="btn btn-default numeric-keypad numeric-del">{{ __("Del") }}</button>      <button type="button" class="btn btn-default numeric-keypad" val="0">0</button>      <button type="button" class="btn btn-default numeric-keypad" val=".">.</button>      <button type="button" class="btn btn-primary numeric-keypad pos-pay">{{ __("Pay") }}</button>     </div>    </div>   </div>  </div>  <div class="col-sm-5 list-customers">   <div class="col-sm-12"><h6 class="form-section-heading uppercase">{{ __("Customers in Queue") }}</h6></div>   <div class="pos-list-row pos-bill-header">    <div class="cell subject"><input class="list-select-all" type="checkbox">{{ __("Customer") }}</div>    <div class="cell text-left">{{ __("Status") }}</div>    <div class="cell text-right">{{ __("Amount") }}</div>    <div class="cell text-right">{{ __("Grand Total") }}</div>   </div>   <div class="list-customers-table border-left border-right border-bottom">    <div class="no-items-message text-extra-muted">     <span class="text-center">      <i class="fa fa-2x fa-user"></i>      <p>{{ __("No Customers yet!") }}</p>     </span>    </div>   </div>  </div>  <div class="col-sm-7 pos-items-section">   <div class="col-sm-12"><h6 class="form-section-heading uppercase">{{ __("Stock Items") }}</h6></div>   <div class="row pos-item-area">    </div>   <span id="customer-results" style="color:#68a;"></span>   <div class="item-list-area">    <div class="pos-list-row pos-bill-header text-muted h6">     <div class="cell subject search-item-group">      <div class="dropdown">       <a class="text-muted dropdown-toggle" data-toggle="dropdown"><span class="dropdown-text">{{ __("All Item Groups") }}</span><i class="caret"></i></a>       <ul class="dropdown-menu">       </ul>      </div>     </div>     <div class="cell search-item"></div>    </div>    <div class="app-listing item-list image-view-container">     </div>   </div>  </div> </div> ';

	frappe.templates['pos_bill_item'] = '<div class="row pos-bill-row pos-bill-item" data-item-code="{%= item_code %}">     <div class="col-xs-4"><h6>{%= item_code || "" %}{%= __(item_name) || "" %}</h6></div>     <div class="col-xs-3">         <div class="row pos-qty-row">             <div class="col-xs-2 text-center pos-qty-btn" data-action="decrease-qty"><i class="fa fa-minus text-muted" style="font-size:12px"></i></div>             <div class="col-xs-8">     <div>                     <input type="tel" value="{%= qty %}" class="form-control   pos-item-qty text-right">                 </div>                 {% if(actual_qty != null) { %}                 <div style="margin-top: 5px;" class="text-muted small text-right">                     {%= __("In Stock: ") %} <span>{%= actual_qty || 0.0 %}</span>                 </div>                 {% } %}             </div>             <div class="col-xs-2 text-center pos-qty-btn" data-action="increase-qty"><i class="fa fa-plus text-muted" style="font-size:12px"></i></div>         </div>     </div>     <div class="col-xs-2 text-right">   <div class="row input-sm">             <input type="tel" value="{%= discount_percentage %}" class="form-control text-right pos-item-disc">         </div>     </div>     <div class="col-xs-3 text-right">         <div class="text-muted" style="margin-top: 5px;">    {% if(enabled) { %}     <input type="tel" value="{%= rate %}" class="form-control input-sm pos-item-price text-right">    {% } else { %}     <h6>{%= format_currency(rate) %}</h6>    {% } %}   </div>   <p><h6>{%= amount %}</h6></p>     </div> </div> ';

	frappe.templates['pos_bill_item_new'] = '<div class="pos-list-row pos-bill-item {{ selected_class }}" data-item-code="{{ item_code }}">  <div class="cell subject">      <a class="grey list-id" title="{{ title }}">{{ strip_html(__(title)) }}</a>  </div>  <div class="cell text-right">{%= qty %}</div>  <div class="cell text-right">{%= discount_percentage %}</div>  <div class="cell text-right">{%= format_currency(rate) %}</div> </div> ';

	frappe.templates['pos_selected_item'] = '<div class="pos-selected-item-action" data-item-code="{%= item_code %}" data-idx="{%= idx %}">  <div class="pos-list-row">   <div class="cell">{{ __("Quantity") }}:</div>   <input type="tel" class="form-control cell pos-item-qty" value="{%= qty %}"/>  </div>  <div class="pos-list-row">   <div class="cell">{{ __("Price List Rate") }}:</div>   <input type="tel" class="form-control cell" disabled value="{%= price_list_rate %}"/>  </div>  <div class="pos-list-row">   <div class="cell">{{ __("Discount") }}: %</div>   <input type="tel" class="form-control cell pos-item-disc" {% if !allow_user_to_edit_discount %} disabled {% endif %} value="{%= discount_percentage %}">  </div>  <div class="pos-list-row">   <div class="cell">{{ __("Price") }}:</div>   <input type="tel" class="form-control cell pos-item-price" {% if !allow_user_to_edit_rate %} disabled {% endif %} value="{%= rate %}"/>  </div>   <div class="pos-list-row">   <div class="cell">{{ __("Amount") }}:</div>   <input type="tel" class="form-control cell pos-amount" disabled value="{%= amount %}"/>  </div> </div>';

	frappe.templates['pos_item'] = '<div class="pos-item-wrapper image-view-item" data-item-code="{{item_code}}">  <div class="image-view-header doclist-row">   <div class="list-value">    <a class="grey list-id" data-name="{{item_code}}" title="{{ title }}">{{ title }}<br>({{ __(item_stock) }})</a>   </div>  </div>  <div class="image-view-body">   <a  data-item-code="{{ item_code }}"    title="{{ title }}"   >    <div class="image-field"     style="     {% if (!item_image) { %}      background-color: #fafbfc;     {% } %}     border: 0px;"    >     {% if (!item_image) { %}     <span class="placeholder-text">      {%= frappe.get_abbr(item_name || item_code) %}     </span>     {% } %}     {% if (item_image) { %}     <img src="{{ item_image }}" alt="{{item_name || item_code}}">     {% } %}    </div>    <span class="price-info">     {{item_price}} / {{item_uom}}    </span>   </a>  </div> </div>';

	frappe.templates['pos_tax_row'] = '<div class="pos-list-row" style="padding-right: 0;">  <div class="cell">{%= description %}</div>  <div class="cell text-right bold">{%= tax_amount %}</div> </div> ';

	frappe.templates['customer_toolbar'] = '<div class="pos-bill-toolbar col-xs-9" style="display: flex; width: 70%;">  <div class="party-area" style="flex: 1;">   <span class="edit-customer-btn text-muted" style="display: inline;">    <a class="btn-open no-decoration" title="Edit Customer">     <i class="octicon octicon-pencil"></i>    </a>    </span>  </div>  <button class="btn btn-default list-customers-btn" style="margin-left: 12px">   <i class="octicon octicon-organization"></i>  </button>  </button> {% if (allow_delete) { %}  <button class="btn btn-default btn-danger" style="margin: 0 5px 0 5px">    <i class="octicon octicon-trashcan"></i>   </button> {% } %} </div>';

	frappe.templates['pos_invoice_list'] = '<div class="pos-list-row" invoice-name = "{{name}}">  <div class="list-column cell subject" invoice-name = "{{name}}">   <input class="list-delete text-left" type="checkbox" style = "margin-right:5px">   <a class="grey list-id text-left customer-row" title="{{ customer }}">{%= customer %}</a>  </div>  <div class="list-column cell text-left customer-row"><span class="indicator {{data.indicator}}">{{ data.status }}</span></div>  <div class="list-column cell text-right customer-row">{%= paid_amount %}</div>  <div class="list-column cell text-right customer-row">{%= grand_total %}</div> </div> ';

	frappe.templates['pos_payment'] = '<div class="pos_payment row">  <div class="row" style="padding: 0px 30px;">   <h3>{{ __("Total Amount") }}: <span class="label label-default" style="font-size:20px;padding:5px">{%= format_currency(grand_total, currency) %}</span></h3>  </div>  <div class="row amount-row">   <div class="col-xs-6 col-sm-3 text-center">    <p class="amount-label"> {{ __("Paid") }} <h3 class="paid_amount">{%= format_currency(paid_amount, currency) %}</h3></p>   </div>   <div class="col-xs-6 col-sm-3 text-center">    <p class="amount-label"> {{ __("Outstanding") }} <h3 class="outstanding_amount">{%= format_currency(outstanding_amount, currency) %} </h3></p>   </div>   <div class="col-xs-6 col-sm-3 text-center">    <p class="amount-label"> {{ __("Change") }} <input class="form-control text-right change_amount bold" type="text" idx="change_amount" value="{{format_number(change_amount, null, 2)}}">    </p>   </div>   <div class="col-xs-6 col-sm-3 text-center">    <p class="amount-label"> {{ __("Write off") }} <input class="form-control text-right write_off_amount bold" type="text" idx="write_off_amount" value="{{format_number(write_off_amount, null, 2)}}">    </p>   </div>  </div>  <hr>  <div class="row">   <div class="col-sm-6 ">    <div class ="row multimode-payments" style = "margin-right:10px">    </div>   </div>   <div class="col-sm-6 payment-toolbar">    {% for(var i=0; i<3; i++) { %}     <div class="row">      {% for(var j=i*3; j<(i+1)*3; j++) { %}       <button type="button"  class="btn btn-default pos-keyboard-key">{{j+1}}</button>      {% } %}     </div>    {% } %}    <div class="row">     <button type="button"  class="btn btn-default delete-btn">{{ __("Del") }}</button>     <button type="button"  class="btn btn-default pos-keyboard-key">0</button>     <button type="button"  class="btn btn-default pos-keyboard-key">.</button>    </div>         </div>  </div> </div> ';

	frappe.templates['payment_details'] = '<div class="row pos-payment-row" type="{{type}}" idx={{idx}}>     <div class="col-xs-6" style="padding:20px">{{mode_of_payment}}</div>  <div class="col-xs-6">   <div class="input-group">    <input disabled class="form-control text-right amount" idx="{{idx}}" type="text" value="{%= format_currency(amount, currency) %}">    <span class="input-group-btn">     <button type="button" class="btn btn-default clr" idx="{{idx}}" style="border:1px solid #d1d8dd">C</button>    </span>   </div>  </div> </div>';

	frappe.templates['item_selector'] = '<div class="app-listing item-list image-view-container item-selector"> {% for (var i=0; i < data.length; i++) { var item = data[i]; %}  {% if (i % 4 === 0) { %}<div class="image-view-row">{% } %}  <div class="image-view-item" data-name="{{ item.name }}">   <div class="image-view-header doclist-row">    <div class="list-value">     <a class="grey list-id" data-name="{{item.name}}"      title="{{ item.item_name || item.name}}">      {{item.item_name || item.name}}</a>    </div>   </div>   <div class="image-view-body">    <a  data-item-code="{{ item.name }}"     title="{{ item.item_name || item.name }}"    >     <div class="image-field"      style="      {% if (!item.image) { %}       background-color: #fafbfc;      {% } %}      border: 0px;"     >      {% if (!item.image) { %}      <span class="placeholder-text">       {%= frappe.get_abbr(item.item_name || item.name) %}      </span>      {% } %}      {% if (item.image) { %}      <img src="{{ item.image }}" alt="{{item.item_name || item.name}}">      {% } %}     </div>    </a>   </div>  </div>  {% if ((i % 4 === 3) || (i===data.length - 1)) { %}</div>{% } %} {% endfor %} </div>';

	frappe.templates['employees_to_mark_attendance'] = '{% if data %} <div class="col-md-12 col-xs-12" align="center">  <div class="col-md-12 col-xs-12" style="padding-bottom:15px;">   <b>Employees to mark attendance</b>  </div>  {% for item in data %}  <div class="col-md-4 col-xs-6" style="padding-bottom:10px;">   {{ item.employee }} &nbsp;&nbsp; {{ item.employee_name }}  </div>  {% } %} </div> {% } else { %} <div></div> {% } %} ';

	erpnext.ItemSelector = Class.extend({
		init: function(opts) {
			$.extend(this, opts);

			if (!this.item_field) {
				this.item_field = 'item_code';
			}

			if (!this.item_query) {
				this.item_query = erpnext.queries.item().query;
			}

			this.grid = this.frm.get_field("items").grid;
			this.setup();
		},

		setup: function() {
			var me = this;
			if(!this.grid.add_items_button) {
				this.grid.add_items_button = this.grid.add_custom_button(__('Add Items'), function() {
					if(!me.dialog) {
						me.make_dialog();
					}
					me.dialog.show();
					me.render_items();
					setTimeout(function() { me.dialog.input.focus(); }, 1000);
				});
			}
		},

		make_dialog: function() {
			this.dialog = new frappe.ui.Dialog({
				title: __('Add Items')
			});
			var body = $(this.dialog.body);
			body.html('<div><p><input type="text" class="form-control"></p>\
			<br><div class="results"></div></div>');

			this.dialog.input = body.find('.form-control');
			this.dialog.results = body.find('.results');

			var me = this;
			this.dialog.results.on('click', '.image-view-item', function() {
				me.add_item($(this).attr('data-name'));
			});

			this.dialog.input.on('keyup', function() {
				if(me.timeout_id) {
					clearTimeout(me.timeout_id);
				}
				me.timeout_id = setTimeout(function() {
					me.render_items();
					me.timeout_id = undefined;
				}, 500);
			});
		},

		add_item: function(item_code) {
			var this$1 = this;

			// add row or update qty
			var added = false;

			// find row with item if exists
			$.each(this.frm.doc.items || [], function (i, d) {
				if(d[this$1.item_field]===item_code) {
					frappe.model.set_value(d.doctype, d.name, 'qty', d.qty + 1);
					frappe.show_alert({message: __("Added {0} ({1})", [item_code, d.qty]), indicator: 'green'});
					added = true;
					return false;
				}
			});

			if(!added) {
				var d = null;
				frappe.run_serially([
					function () { d = this$1.grid.add_new_row(); },
					function () { return frappe.model.set_value(d.doctype, d.name, this$1.item_field, item_code); },
					function () { return frappe.timeout(0.1); },
					function () {
						frappe.model.set_value(d.doctype, d.name, 'qty', 1);
						frappe.show_alert({message: __("Added {0} ({1})", [item_code, 1]), indicator: 'green'});
					}
				]);
			}

		},

		render_items: function() {
			var args = {
				query: this.item_query,
				filters: {}
			};
			args.txt = this.dialog.input.val();
			args.as_dict = 1;

			if (this.get_filters) {
				$.extend(args.filters, this.get_filters() || {});
			}

			var me = this;
			frappe.link_search("Item", args, function(r) {
				$.each(r.values, function(i, d) {
					if(!d.image) {
						d.abbr = frappe.get_abbr(d.item_name);
						d.color = frappe.get_palette(d.item_name);
					}
				});
				me.dialog.results.html(frappe.render_template('item_selector', {'data':r.values}));
			});
		}
	});

	frappe.provide('frappe.help.help_links');

	var docsUrl = 'https://erpnext.com/docs/';

	frappe.help.help_links['Form/Rename Tool'] = [
		{ label: 'Bulk Rename', url: docsUrl + 'user/manual/en/setting-up/data/bulk-rename' } ];

	//Setup

	frappe.help.help_links['List/User'] = [
		{ label: 'New User', url: docsUrl + 'user/manual/en/setting-up/users-and-permissions/adding-users' },
		{ label: 'Rename User', url: docsUrl + 'user/manual/en/setting-up/articles/rename-user' } ];

	frappe.help.help_links['permission-manager'] = [
		{ label: 'Role Permissions Manager', url: docsUrl + 'user/manual/en/setting-up/users-and-permissions/role-based-permissions' },
		{ label: 'Managing Perm Level in Permissions Manager', url: docsUrl + 'user/manual/en/setting-up/articles/managing-perm-level' },
		{ label: 'User Permissions', url: docsUrl + 'user/manual/en/setting-up/users-and-permissions/user-permissions' },
		{ label: 'Sharing', url: docsUrl + 'user/manual/en/setting-up/users-and-permissions/sharing' },
		{ label: 'Password', url: docsUrl + 'user/manual/en/setting-up/articles/change-password' } ];

	frappe.help.help_links['Form/System Settings'] = [
		{ label: 'Naming Series', url: docsUrl + 'user/manual/en/setting-up/settings/system-settings' } ];

	frappe.help.help_links['data-import-tool'] = [
		{ label: 'Importing and Exporting Data', url: docsUrl + 'user/manual/en/setting-up/data/data-import-tool' },
		{ label: 'Overwriting Data from Data Import Tool', url: docsUrl + 'user/manual/en/setting-up/articles/overwriting-data-from-data-import-tool' } ];

	frappe.help.help_links['module_setup'] = [
		{ label: 'Role Permissions Manager', url: docsUrl + 'user/manual/en/setting-up/users-and-permissions/role-based-permissions' } ];

	frappe.help.help_links['Form/Naming Series'] = [
		{ label: 'Naming Series', url: docsUrl + 'user/manual/en/setting-up/settings/naming-series' },
		{ label: 'Setting the Current Value for Naming Series', url: docsUrl + 'user/manual/en/setting-up/articles/naming-series-current-value' } ];

	frappe.help.help_links['Form/Global Defaults'] = [
		{ label: 'Global Settings', url: docsUrl + 'user/manual/en/setting-up/settings/global-defaults' } ];

	frappe.help.help_links['Form/Email Digest'] = [
		{ label: 'Email Digest', url: docsUrl + 'user/manual/en/setting-up/email/email-digest' } ];

	frappe.help.help_links['List/Print Heading'] = [
		{ label: 'Print Heading', url: docsUrl + 'user/manual/en/setting-up/print/print-headings' } ];

	frappe.help.help_links['List/Letter Head'] = [
		{ label: 'Letter Head', url: docsUrl + 'user/manual/en/setting-up/print/letter-head' } ];

	frappe.help.help_links['List/Address Template'] = [
		{ label: 'Address Template', url: docsUrl + 'user/manual/en/setting-up/print/address-template' } ];

	frappe.help.help_links['List/Terms and Conditions'] = [
		{ label: 'Terms and Conditions', url: docsUrl + 'user/manual/en/setting-up/print/terms-and-conditions' } ];

	frappe.help.help_links['List/Cheque Print Template'] = [
		{ label: 'Cheque Print Template', url: docsUrl + 'user/manual/en/setting-up/print/cheque-print-template' } ];

	frappe.help.help_links['List/Email Account'] = [
		{ label: 'Email Account', url: docsUrl + 'user/manual/en/setting-up/email/email-account' } ];

	frappe.help.help_links['List/Notification'] = [
		{ label: 'Notification', url: docsUrl + 'user/manual/en/setting-up/email/notifications' } ];

	frappe.help.help_links['Form/Notification'] = [
		{ label: 'Notification', url: docsUrl + 'user/manual/en/setting-up/email/notifications' } ];

	frappe.help.help_links['List/Email Digest'] = [
		{ label: 'Email Digest', url: docsUrl + 'user/manual/en/setting-up/email/email-digest' } ];

	frappe.help.help_links['List/Auto Email Report'] = [
		{ label: 'Auto Email Reports', url: docsUrl + 'user/manual/en/setting-up/email/email-reports' } ];

	frappe.help.help_links['Form/Print Settings'] = [
		{ label: 'Print Settings', url: docsUrl + 'user/manual/en/setting-up/print/print-settings' } ];

	frappe.help.help_links['print-format-builder'] = [
		{ label: 'Print Format Builder', url: docsUrl + 'user/manual/en/setting-up/print/print-settings' } ];

	frappe.help.help_links['List/Print Heading'] = [
		{ label: 'Print Heading', url: docsUrl + 'user/manual/en/setting-up/print/print-headings' } ];

	//setup-integrations

	frappe.help.help_links['Form/PayPal Settings'] = [
		{ label: 'PayPal Settings', url: docsUrl + 'user/manual/en/setting-up/integrations/paypal-integration' } ];

	frappe.help.help_links['Form/Razorpay Settings'] = [
		{ label: 'Razorpay Settings', url: docsUrl + 'user/manual/en/setting-up/integrations/razorpay-integration' } ];

	frappe.help.help_links['Form/Dropbox Settings'] = [
		{ label: 'Dropbox Settings', url: docsUrl + 'user/manual/en/setting-up/integrations/dropbox-backup' } ];

	frappe.help.help_links['Form/LDAP Settings'] = [
		{ label: 'LDAP Settings', url: docsUrl + 'user/manual/en/setting-up/integrations/ldap-integration' } ];

	frappe.help.help_links['Form/Stripe Settings'] = [
		{ label: 'Stripe Settings', url: docsUrl + 'user/manual/en/setting-up/integrations/stripe-integration' } ];

	//Sales

	frappe.help.help_links['Form/Quotation'] = [
		{ label: 'Quotation', url: docsUrl + 'user/manual/en/selling/quotation' },
		{ label: 'Applying Discount', url: docsUrl + 'user/manual/en/selling/articles/applying-discount' },
		{ label: 'Sales Person', url: docsUrl + 'user/manual/en/selling/articles/sales-persons-in-the-sales-transactions' },
		{ label: 'Applying Margin', url: docsUrl + 'user/manual/en/selling/articles/adding-margin' } ];

	frappe.help.help_links['List/Customer'] = [
		{ label: 'Customer', url: docsUrl + 'user/manual/en/CRM/customer' },
		{ label: 'Credit Limit', url: docsUrl + 'user/manual/en/accounts/credit-limit' } ];

	frappe.help.help_links['Form/Customer'] = [
		{ label: 'Customer', url: docsUrl + 'user/manual/en/CRM/customer' },
		{ label: 'Credit Limit', url: docsUrl + 'user/manual/en/accounts/credit-limit' } ];

	frappe.help.help_links['List/Sales Taxes and Charges Template'] = [
		{ label: 'Setting Up Taxes', url: docsUrl + 'user/manual/en/setting-up/setting-up-taxes' } ];

	frappe.help.help_links['Form/Sales Taxes and Charges Template'] = [
		{ label: 'Setting Up Taxes', url: docsUrl + 'user/manual/en/setting-up/setting-up-taxes' } ];

	frappe.help.help_links['List/Sales Order'] = [
		{ label: 'Sales Order', url: docsUrl + 'user/manual/en/selling/sales-order' },
		{ label: 'Recurring Sales Order', url: docsUrl + 'user/manual/en/accounts/recurring-orders-and-invoices' },
		{ label: 'Applying Discount', url: docsUrl + 'user/manual/en/selling/articles/applying-discount' } ];

	frappe.help.help_links['Form/Sales Order'] = [
		{ label: 'Sales Order', url: docsUrl + 'user/manual/en/selling/sales-order' },
		{ label: 'Recurring Sales Order', url: docsUrl + 'user/manual/en/accounts/recurring-orders-and-invoices' },
		{ label: 'Applying Discount', url: docsUrl + 'user/manual/en/selling/articles/applying-discount' },
		{ label: 'Drop Shipping', url: docsUrl + 'user/manual/en/selling/articles/drop-shipping' },
		{ label: 'Sales Person', url: docsUrl + 'user/manual/en/selling/articles/sales-persons-in-the-sales-transactions' },
		{ label: 'Close Sales Order', url: docsUrl + 'user/manual/en/selling/articles/close-sales-order' },
		{ label: 'Applying Margin', url: docsUrl + 'user/manual/en/selling/articles/adding-margin' } ];

	frappe.help.help_links['Form/Product Bundle'] = [
		{ label: 'Product Bundle', url: docsUrl + 'user/manual/en/selling/setup/product-bundle' } ];

	frappe.help.help_links['Form/Selling Settings'] = [
		{ label: 'Selling Settings', url: docsUrl + 'user/manual/en/selling/setup/selling-settings' } ];

	//Buying

	frappe.help.help_links['List/Supplier'] = [
		{ label: 'Supplier', url: docsUrl + 'user/manual/en/buying/supplier' } ];

	frappe.help.help_links['Form/Supplier'] = [
		{ label: 'Supplier', url: docsUrl + 'user/manual/en/buying/supplier' } ];

	frappe.help.help_links['Form/Request for Quotation'] = [
		{ label: 'Request for Quotation', url: docsUrl + 'user/manual/en/buying/request-for-quotation' },
		{ label: 'RFQ Video', url: docsUrl + 'user/videos/learn/request-for-quotation.html' } ];

	frappe.help.help_links['Form/Supplier Quotation'] = [
		{ label: 'Supplier Quotation', url: docsUrl + 'user/manual/en/buying/supplier-quotation' } ];

	frappe.help.help_links['Form/Buying Settings'] = [
		{ label: 'Buying Settings', url: docsUrl + 'user/manual/en/buying/setup/buying-settings' } ];

	frappe.help.help_links['List/Purchase Order'] = [
		{ label: 'Purchase Order', url: docsUrl + 'user/manual/en/buying/purchase-order' },
		{ label: 'Recurring Purchase Order', url: docsUrl + 'user/manual/en/accounts/recurring-orders-and-invoices' } ];

	frappe.help.help_links['Form/Purchase Order'] = [
		{ label: 'Purchase Order', url: docsUrl + 'user/manual/en/buying/purchase-order' },
		{ label: 'Item UoM', url: docsUrl + 'user/manual/en/buying/articles/purchasing-in-different-unit' },
		{ label: 'Supplier Item Code', url: docsUrl + 'user/manual/en/buying/articles/maintaining-suppliers-part-no-in-item' },
		{ label: 'Recurring Purchase Order', url: docsUrl + 'user/manual/en/accounts/recurring-orders-and-invoices' },
		{ label: 'Subcontracting', url: docsUrl + 'user/manual/en/manufacturing/subcontracting' } ];

	frappe.help.help_links['List/Purchase Taxes and Charges Template'] = [
		{ label: 'Setting Up Taxes', url: docsUrl + 'user/manual/en/setting-up/setting-up-taxes' } ];

	frappe.help.help_links['List/POS Profile'] = [
		{ label: 'POS Profile', url: docsUrl + 'user/manual/en/setting-up/pos-setting' } ];

	frappe.help.help_links['List/Price List'] = [
		{ label: 'Price List', url: docsUrl + 'user/manual/en/setting-up/price-lists' } ];

	frappe.help.help_links['List/Authorization Rule'] = [
		{ label: 'Authorization Rule', url: docsUrl + 'user/manual/en/setting-up/authorization-rule' } ];

	frappe.help.help_links['Form/SMS Settings'] = [
		{ label: 'SMS Settings', url: docsUrl + 'user/manual/en/setting-up/sms-setting' } ];

	frappe.help.help_links['List/Stock Reconciliation'] = [
		{ label: 'Stock Reconciliation', url: docsUrl + 'user/manual/en/setting-up/stock-reconciliation-for-non-serialized-item' } ];

	frappe.help.help_links['Tree/Territory'] = [
		{ label: 'Territory', url: docsUrl + 'user/manual/en/setting-up/territory' } ];

	frappe.help.help_links['Form/Dropbox Backup'] = [
		{ label: 'Dropbox Backup', url: docsUrl + 'user/manual/en/setting-up/third-party-backups' },
		{ label: 'Setting Up Dropbox Backup', url: docsUrl + 'user/manual/en/setting-up/articles/setting-up-dropbox-backups' } ];

	frappe.help.help_links['List/Workflow'] = [
		{ label: 'Workflow', url: docsUrl + 'user/manual/en/setting-up/workflows' } ];

	frappe.help.help_links['List/Company'] = [
		{ label: 'Company', url: docsUrl + 'user/manual/en/setting-up/company-setup' },
		{ label: 'Managing Multiple Companies', url: docsUrl + 'user/manual/en/setting-up/articles/managing-multiple-companies' },
		{ label: 'Delete All Related Transactions for a Company', url: docsUrl + 'user/manual/en/setting-up/articles/delete-a-company-and-all-related-transactions' } ];

	//Accounts

	frappe.help.help_links['modules/Accounts'] = [
		{ label: 'Introduction to Accounts', url: docsUrl + 'user/manual/en/accounts/' },
		{ label: 'Chart of Accounts', url: docsUrl + 'user/manual/en/accounts/chart-of-accounts.html' },
		{ label: 'Multi Currency Accounting', url: docsUrl + 'user/manual/en/accounts/multi-currency-accounting' } ];

	frappe.help.help_links['Tree/Account'] = [
		{ label: 'Chart of Accounts', url: docsUrl + 'user/manual/en/accounts/chart-of-accounts' },
		{ label: 'Managing Tree Mastes', url: docsUrl + 'user/manual/en/setting-up/articles/managing-tree-structure-masters' } ];

	frappe.help.help_links['Form/Sales Invoice'] = [
		{ label: 'Sales Invoice', url: docsUrl + 'user/manual/en/accounts/sales-invoice' },
		{ label: 'Accounts Opening Balance', url: docsUrl + 'user/manual/en/accounts/opening-accounts' },
		{ label: 'Sales Return', url: docsUrl + 'user/manual/en/stock/sales-return' },
		{ label: 'Recurring Sales Invoice', url: docsUrl + 'user/manual/en/accounts/recurring-orders-and-invoices' } ];

	frappe.help.help_links['List/Sales Invoice'] = [
		{ label: 'Sales Invoice', url: docsUrl + 'user/manual/en/accounts/sales-invoice' },
		{ label: 'Accounts Opening Balance', url: docsUrl + 'user/manual/en/accounts/opening-accounts' },
		{ label: 'Sales Return', url: docsUrl + 'user/manual/en/stock/sales-return' },
		{ label: 'Recurring Sales Invoice', url: docsUrl + 'user/manual/en/accounts/recurring-orders-and-invoices' } ];

	frappe.help.help_links['pos'] = [
		{ label: 'Point of Sale Invoice', url: docsUrl + 'user/manual/en/accounts/point-of-sale-pos-invoice' } ];

	frappe.help.help_links['List/POS Profile'] = [
		{ label: 'Point of Sale Profile', url: docsUrl + 'user/manual/en/setting-up/pos-setting' } ];

	frappe.help.help_links['List/Purchase Invoice'] = [
		{ label: 'Purchase Invoice', url: docsUrl + 'user/manual/en/accounts/purchase-invoice' },
		{ label: 'Accounts Opening Balance', url: docsUrl + 'user/manual/en/accounts/opening-accounts' },
		{ label: 'Recurring Purchase Invoice', url: docsUrl + 'user/manual/en/accounts/recurring-orders-and-invoices' } ];

	frappe.help.help_links['List/Journal Entry'] = [
		{ label: 'Journal Entry', url: docsUrl + 'user/manual/en/accounts/journal-entry' },
		{ label: 'Advance Payment Entry', url: docsUrl + 'user/manual/en/accounts/advance-payment-entry' },
		{ label: 'Accounts Opening Balance', url: docsUrl + 'user/manual/en/accounts/opening-accounts' } ];

	frappe.help.help_links['List/Payment Entry'] = [
		{ label: 'Payment Entry', url: docsUrl + 'user/manual/en/accounts/payment-entry' } ];

	frappe.help.help_links['List/Payment Request'] = [
		{ label: 'Payment Request', url: docsUrl + 'user/manual/en/accounts/payment-request' } ];

	frappe.help.help_links['List/Asset'] = [
		{ label: 'Managing Fixed Assets', url: docsUrl + 'user/manual/en/accounts/managing-fixed-assets' } ];

	frappe.help.help_links['List/Asset Category'] = [
		{ label: 'Asset Category', url: docsUrl + 'user/manual/en/accounts/managing-fixed-assets' } ];

	frappe.help.help_links['Tree/Cost Center'] = [
		{ label: 'Budgeting', url: docsUrl + 'user/manual/en/accounts/budgeting' } ];

	frappe.help.help_links['List/Item'] = [
		{ label: 'Item', url: docsUrl + 'user/manual/en/stock/item' },
		{ label: 'Item Price', url: docsUrl + 'user/manual/en/stock/item/item-price' },
		{ label: 'Barcode', url: docsUrl + 'user/manual/en/stock/articles/track-items-using-barcode' },
		{ label: 'Item Wise Taxation', url: docsUrl + 'user/manual/en/accounts/item-wise-taxation' },
		{ label: 'Managing Fixed Assets', url: docsUrl + 'user/manual/en/accounts/managing-fixed-assets' },
		{ label: 'Item Codification', url: docsUrl + 'user/manual/en/stock/item/item-codification' },
		{ label: 'Item Variants', url: docsUrl + 'user/manual/en/stock/item/item-variants' },
		{ label: 'Item Valuation', url: docsUrl + 'user/manual/en/stock/item/item-valuation-fifo-and-moving-average' } ];

	frappe.help.help_links['Form/Item'] = [
		{ label: 'Item', url: docsUrl + 'user/manual/en/stock/item' },
		{ label: 'Item Price', url: docsUrl + 'user/manual/en/stock/item/item-price' },
		{ label: 'Barcode', url: docsUrl + 'user/manual/en/stock/articles/track-items-using-barcode' },
		{ label: 'Item Wise Taxation', url: docsUrl + 'user/manual/en/accounts/item-wise-taxation' },
		{ label: 'Managing Fixed Assets', url: docsUrl + 'user/manual/en/accounts/managing-fixed-assets' },
		{ label: 'Item Codification', url: docsUrl + 'user/manual/en/stock/item/item-codification' },
		{ label: 'Item Variants', url: docsUrl + 'user/manual/en/stock/item/item-variants' },
		{ label: 'Item Valuation', url: docsUrl + 'user/manual/en/stock/item/item-valuation-fifo-and-moving-average' } ];

	frappe.help.help_links['List/Purchase Receipt'] = [
		{ label: 'Purchase Receipt', url: docsUrl + 'user/manual/en/stock/purchase-receipt' },
		{ label: 'Barcode', url: docsUrl + 'user/manual/en/stock/articles/track-items-using-barcode' } ];

	frappe.help.help_links['List/Delivery Note'] = [
		{ label: 'Delivery Note', url: docsUrl + 'user/manual/en/stock/delivery-note' },
		{ label: 'Barcode', url: docsUrl + 'user/manual/en/stock/articles/track-items-using-barcode' },
		{ label: 'Sales Return', url: docsUrl + 'user/manual/en/stock/sales-return' } ];

	frappe.help.help_links['Form/Delivery Note'] = [
		{ label: 'Delivery Note', url: docsUrl + 'user/manual/en/stock/delivery-note' },
		{ label: 'Sales Return', url: docsUrl + 'user/manual/en/stock/sales-return' },
		{ label: 'Barcode', url: docsUrl + 'user/manual/en/stock/articles/track-items-using-barcode' },
		{ label: 'Subcontracting', url: docsUrl + 'user/manual/en/manufacturing/subcontracting' } ];

	frappe.help.help_links['List/Installation Note'] = [
		{ label: 'Installation Note', url: docsUrl + 'user/manual/en/stock/installation-note' } ];


	frappe.help.help_links['Tree'] = [
		{ label: 'Managing Tree Structure Masters', url: docsUrl + 'user/manual/en/setting-up/articles/managing-tree-structure-masters' } ];

	frappe.help.help_links['List/Budget'] = [
		{ label: 'Budgeting', url: docsUrl + 'user/manual/en/accounts/budgeting' } ];

	//Stock

	frappe.help.help_links['List/Material Request'] = [
		{ label: 'Material Request', url: docsUrl + 'user/manual/en/stock/material-request' },
		{ label: 'Auto-creation of Material Request', url: docsUrl + 'user/manual/en/stock/articles/auto-creation-of-material-request' } ];

	frappe.help.help_links['Form/Material Request'] = [
		{ label: 'Material Request', url: docsUrl + 'user/manual/en/stock/material-request' },
		{ label: 'Auto-creation of Material Request', url: docsUrl + 'user/manual/en/stock/articles/auto-creation-of-material-request' } ];

	frappe.help.help_links['Form/Stock Entry'] = [
		{ label: 'Stock Entry', url: docsUrl + 'user/manual/en/stock/stock-entry' },
		{ label: 'Stock Entry Types', url: docsUrl + 'user/manual/en/stock/articles/stock-entry-purpose' },
		{ label: 'Repack Entry', url: docsUrl + 'user/manual/en/stock/articles/repack-entry' },
		{ label: 'Opening Stock', url: docsUrl + 'user/manual/en/stock/opening-stock' },
		{ label: 'Subcontracting', url: docsUrl + 'user/manual/en/manufacturing/subcontracting' } ];

	frappe.help.help_links['List/Stock Entry'] = [
		{ label: 'Stock Entry', url: docsUrl + 'user/manual/en/stock/stock-entry' } ];

	frappe.help.help_links['Tree/Warehouse'] = [
		{ label: 'Warehouse', url: docsUrl + 'user/manual/en/stock/warehouse' } ];

	frappe.help.help_links['List/Serial No'] = [
		{ label: 'Serial No', url: docsUrl + 'user/manual/en/stock/serial-no' } ];

	frappe.help.help_links['Form/Serial No'] = [
		{ label: 'Serial No', url: docsUrl + 'user/manual/en/stock/serial-no' } ];

	frappe.help.help_links['Form/Batch'] = [
		{ label: 'Batch', url: docsUrl + 'user/manual/en/stock/batch' } ];

	frappe.help.help_links['Form/Packing Slip'] = [
		{ label: 'Packing Slip', url: docsUrl + 'user/manual/en/stock/tools/packing-slip' } ];

	frappe.help.help_links['Form/Quality Inspection'] = [
		{ label: 'Quality Inspection', url: docsUrl + 'user/manual/en/stock/tools/quality-inspection' } ];

	frappe.help.help_links['Form/Landed Cost Voucher'] = [
		{ label: 'Landed Cost Voucher', url: docsUrl + 'user/manual/en/stock/tools/landed-cost-voucher' } ];

	frappe.help.help_links['Tree/Item Group'] = [
		{ label: 'Item Group', url: docsUrl + 'user/manual/en/stock/setup/item-group' } ];

	frappe.help.help_links['Form/Item Attribute'] = [
		{ label: 'Item Attribute', url: docsUrl + 'user/manual/en/stock/setup/item-attribute' } ];

	frappe.help.help_links['Form/UOM'] = [
		{ label: 'Fractions in UOM', url: docsUrl + 'user/manual/en/stock/articles/managing-fractions-in-uom' } ];

	frappe.help.help_links['Form/Stock Reconciliation'] = [
		{ label: 'Opening Stock Entry', url: docsUrl + 'user/manual/en/stock/opening-stock' } ];

	//CRM

	frappe.help.help_links['Form/Lead'] = [
		{ label: 'Lead', url: docsUrl + 'user/manual/en/CRM/lead' } ];

	frappe.help.help_links['Form/Opportunity'] = [
		{ label: 'Opportunity', url: docsUrl + 'user/manual/en/CRM/opportunity' } ];

	frappe.help.help_links['Form/Address'] = [
		{ label: 'Address', url: docsUrl + 'user/manual/en/CRM/contact' } ];

	frappe.help.help_links['Form/Contact'] = [
		{ label: 'Contact', url: docsUrl + 'user/manual/en/CRM/contact' } ];

	frappe.help.help_links['Form/Newsletter'] = [
		{ label: 'Newsletter', url: docsUrl + 'user/manual/en/CRM/newsletter' } ];

	frappe.help.help_links['Form/Campaign'] = [
		{ label: 'Campaign', url: docsUrl + 'user/manual/en/CRM/setup/campaign' } ];

	frappe.help.help_links['Tree/Sales Person'] = [
		{ label: 'Sales Person', url: docsUrl + 'user/manual/en/CRM/setup/sales-person' } ];

	frappe.help.help_links['Form/Sales Person'] = [
		{ label: 'Sales Person Target', url: docsUrl + 'user/manual/en/selling/setup/sales-person-target-allocation' } ];

	//Support

	frappe.help.help_links['List/Feedback Trigger'] = [
		{ label: 'Feedback Trigger', url: docsUrl + 'user/manual/en/setting-up/feedback/setting-up-feedback' } ];

	frappe.help.help_links['List/Feedback Request'] = [
		{ label: 'Feedback Request', url: docsUrl + 'user/manual/en/setting-up/feedback/submit-feedback' } ];

	frappe.help.help_links['List/Feedback Request'] = [
		{ label: 'Feedback Request', url: docsUrl + 'user/manual/en/setting-up/feedback/submit-feedback' } ];

	//Manufacturing

	frappe.help.help_links['Form/BOM'] = [
		{ label: 'Bill of Material', url: docsUrl + 'user/manual/en/manufacturing/bill-of-materials' },
		{ label: 'Nested BOM Structure', url: docsUrl + 'user/manual/en/manufacturing/articles/nested-bom-structure' } ];

	frappe.help.help_links['Form/Work Order'] = [
		{ label: 'Work Order', url: docsUrl + 'user/manual/en/manufacturing/work-order' } ];

	frappe.help.help_links['Form/Workstation'] = [
		{ label: 'Workstation', url: docsUrl + 'user/manual/en/manufacturing/workstation' } ];

	frappe.help.help_links['Form/Operation'] = [
		{ label: 'Operation', url: docsUrl + 'user/manual/en/manufacturing/operation' } ];

	frappe.help.help_links['Form/BOM Update Tool'] = [
		{ label: 'BOM Update Tool', url: docsUrl + 'user/manual/en/manufacturing/tools/bom-update-tool' } ];

	//Customize

	frappe.help.help_links['Form/Customize Form'] = [
		{ label: 'Custom Field', url: docsUrl + 'user/manual/en/customize-erpnext/custom-field' },
		{ label: 'Customize Field', url: docsUrl + 'user/manual/en/customize-erpnext/customize-form' } ];

	frappe.help.help_links['Form/Custom Field'] = [
		{ label: 'Custom Field', url: docsUrl + 'user/manual/en/customize-erpnext/custom-field' } ];

	frappe.help.help_links['Form/Custom Field'] = [
		{ label: 'Custom Field', url: docsUrl + 'user/manual/en/customize-erpnext/custom-field' } ];

	frappe.provide('agriculture');

	agriculture.TernaryPlot = class TernaryPlot {
		constructor(opts) {
		var this$1 = this;

			Object.assign(this, opts);

			frappe.require('assets/frappe/js/lib/snap.svg-min.js', function () {
				this$1.make_svg();
				this$1.init_snap();
				this$1.init_config();
				this$1.make_plot();
				this$1.make_plot_marking();
				this$1.make_legend();
				this$1.mark_blip();
			});
		}

		make_svg() {
			this.$svg = $('<svg height="350" width="400">');
			$(this.parent).append(this.$svg);
		}

		init_snap() {
			this.paper = new Snap(this.$svg.get(0));
		}

		init_config() {
			this.config = {
				triangle_side: 300,
				spacing: 50,
				strokeWidth: 1,
				stroke: frappe.ui.color.get('black')
			};
			this.config.scaling_factor = this.config.triangle_side / 100;
			var ref = this.config;
			var t = ref.triangle_side;
			var s = ref.spacing;
			var p = ref.scaling_factor;

			this.coords = {
				sand: {
					points: [
						s + t * Snap.cos(60), s,
						s, s + t * Snap.cos(30),
						s + t, s + t * Snap.cos(30)
					],
					color: frappe.ui.color.get('peach')
				},
				loamy_sand: {
					points: [
						s + 15 * p * Snap.cos(60), s + (100 - 15) * p * Snap.cos(30),
						s + 10 * p * Snap.cos(60), s + (100 - 10) * p * Snap.cos(30),
						s + (100 - 85) * p, s + t * Snap.cos(30),
						s + (100 - 70) * p, s + t * Snap.cos(30)
					],
					color: frappe.ui.color.get('pink')
				},
				sandy_loam: {
					points: [
						s + 20 * p * Snap.cos(60) + 27.5 * p, s + (100 - 20) * p * Snap.cos(30),
						s + 20 * p * Snap.cos(60), s + (100 - 20) * p * Snap.cos(30),
						s + 15 * p * Snap.cos(60), s + (100 - 15) * p * Snap.cos(30),
						s + (100 - 75) * p, s + t * Snap.cos(30),
						s + (100 - 50) * p, s + t * Snap.cos(30),
						s + (100 - 50) * p + 7.5 * p * Snap.cos(60), s + t * Snap.cos(30) - 7.5 * p * Snap.cos(30),
						s + (100 - 50) * p + 7.5 * p * Snap.cos(60) - 10 * p, s + t * Snap.cos(30) - 7.5 * p * Snap.cos(30)
					],
					color: frappe.ui.color.get('pink', 'light')
				},
				loam: {
					points: [
						s + (100 - 50) * p + 27.5 * p * Snap.cos(60), s + t * Snap.cos(30) - 27.5 * p * Snap.cos(30),
						s + (100 - 50) * p + 27.5 * p * Snap.cos(60) - 22.5 * p, s + t * Snap.cos(30) - 27.5 * p * Snap.cos(30),
						s + 20 * p * Snap.cos(60) + 27.5 * p, s + (100 - 20) * p * Snap.cos(30),
						s + (100 - 50) * p + 7.5 * p * Snap.cos(60) - 10 * p, s + t * Snap.cos(30) - 7.5 * p * Snap.cos(30),
						s + (100 - 50) * p + 7.5 * p * Snap.cos(60), s + t * Snap.cos(30) - 7.5 * p * Snap.cos(30)
					],
					color: frappe.ui.color.get('brown')
				},
				silt_loam: {
					points: [
						s + t - 27.5 * p * Snap.cos(60), s + 72.5 * p * Snap.cos(30),
						s + (100 - 50) * p + 27.5 * p * Snap.cos(60), s + t * Snap.cos(30) - 27.5 * p * Snap.cos(30),
						s + (100 - 50) * p, s + t * Snap.cos(30),
						s + (100 - 20) * p, s + t * Snap.cos(30),
						s + (100 - 20) * p + 12.5 * p * Snap.cos(60), s + 90 * p * Snap.cos(30),
						s + t - 12.5 * p * Snap.cos(60), s + (100 - 12.5) * p * Snap.cos(30)
					],
					color: frappe.ui.color.get('green', 'dark')
				},
				silt: {
					points: [
						s + t - 12.5 * p * Snap.cos(60), s + (100 - 12.5) * p * Snap.cos(30),
						s + (100 - 20) * p + 12.5 * p * Snap.cos(60), s + 90 * p * Snap.cos(30),
						s + (100 - 20) * p, s + t * Snap.cos(30),
						s + t, s + t * Snap.cos(30)
					],
					color: frappe.ui.color.get('green')
				},
				silty_clay_loam: {
					points: [
						s + t - 40 * p * Snap.cos(60), s + 60 * p * Snap.cos(30),
						s + t - 40 * p * Snap.cos(60) - 20 * p, s + 60 * p * Snap.cos(30),
						s + t - 27.5 * p * Snap.cos(60) - 20 * p, s + 72.5 * p * Snap.cos(30),
						s + t - 27.5 * p * Snap.cos(60), s + 72.5 * p * Snap.cos(30)
					],
					color: frappe.ui.color.get('cyan', 'dark')
				},
				silty_clay: {
					points: [
						s + t - 60 * p * Snap.cos(60), s + 40 * p * Snap.cos(30),
						s + t - 40 * p * Snap.cos(60) - 20 * p, s + 60 * p * Snap.cos(30),
						s + t - 40 * p * Snap.cos(60), s + 60 * p * Snap.cos(30)
					],
					color: frappe.ui.color.get('cyan')
				},
				clay_loam: {
					points: [
						s + t - 40 * p * Snap.cos(60) - 20 * p, s + 60 * p * Snap.cos(30),
						s + t - 40 * p * Snap.cos(60) - 45 * p, s + 60 * p * Snap.cos(30),
						s + t - 27.5 * p * Snap.cos(60) - 45 * p, s + 72.5 * p * Snap.cos(30),
						s + t - 27.5 * p * Snap.cos(60) - 20 * p, s + 72.5 * p * Snap.cos(30)
					],
					color: frappe.ui.color.get('green', 'light')
				},
				sandy_clay_loam: {
					points: [
						s + 35 * p * Snap.cos(60) + 20 * p, s + (100 - 35) * p * Snap.cos(30),
						s + 35 * p * Snap.cos(60), s + (100 - 35) * p * Snap.cos(30),
						s + 20 * p * Snap.cos(60), s + (100 - 20) * p * Snap.cos(30),
						s + 20 * p * Snap.cos(60) + 27.5 * p, s + (100 - 20) * p * Snap.cos(30),
						s + t - 27.5 * p * Snap.cos(60) - 45 * p, s + 72.5 * p * Snap.cos(30)
					],
					color: frappe.ui.color.get('pink', 'dark')
				},
				sandy_clay: {
					points: [
						s + 55 * p * Snap.cos(60), s + (100 - 55) * p * Snap.cos(30),
						s + 35 * p * Snap.cos(60), s + (100 - 35) * p * Snap.cos(30),
						s + 35 * p * Snap.cos(60) + 20 * p, s + (100 - 35) * p * Snap.cos(30)
					],
					color: frappe.ui.color.get('red')
				},
				clay: {
					points: [
						s + t * Snap.cos(60), s,
						s + 55 * p * Snap.cos(60), s + (100 - 55) * p * Snap.cos(30),
						s + t - 40 * p * Snap.cos(60) - 45 * p, s + 60 * p * Snap.cos(30),
						s + t - 40 * p * Snap.cos(60) - 20 * p, s + 60 * p * Snap.cos(30),
						s + t - 60 * p * Snap.cos(60), s + 40 * p * Snap.cos(30)
					],
					color: frappe.ui.color.get('yellow')
				},
			};
		}

		get_coords(soil_type) {
			return this.coords[soil_type].points;
		}

		get_color(soil_type) {
			return this.coords[soil_type].color;
		}

		make_plot() {
			for (var soil_type in this.coords) {
				this.paper.polygon(this.get_coords(soil_type)).attr({
					fill: this.get_color(soil_type),
					stroke: this.config.stroke,
					strokeWidth: this.config.strokeWidth
				});
			}
		}

		make_plot_marking() {
			var ref = this.config;
			var t = ref.triangle_side;
			var s = ref.spacing;
			var p = ref.scaling_factor;

			var clay = this.paper.text(t * Snap.cos(60) / 2, s + t * Snap.cos(30) / 2, __("Clay")).attr({
				fill: frappe.ui.color.get('black')
			});
			clay.transform("r300");

			var silt = this.paper.text(t, s + t * Snap.cos(30) / 2, __("Silt")).attr({
				fill: frappe.ui.color.get('black')
			});
			silt.transform("r60");

			var sand = this.paper.text(35 + t * Snap.cos(60), 90 + t * Snap.cos(30), __("Sand")).attr({
				fill: frappe.ui.color.get('black')
			});
			sand.transform("r0");
		}

		make_legend() {
			// let side = len(this.coords)/2;
			var index = 1;
			var offset = 0;
			var exec_once = true;
			for (var soil_type in this.coords) {
				if (index > 6 && exec_once){
					offset = 300;
					index = 1;
					exec_once = false;
				}
				var rect = this.paper.rect(0+offset, 0+index*20, 100, 19, 5, 5).attr({
					fill: this.get_color(soil_type),
					stroke: frappe.ui.color.get('black')
				});
				var text = this.paper.text(5+offset, 16+index*20, soil_type).attr({
					fill: frappe.ui.color.get('black'),
					'font-size': 12
				});
				index++;
			}
		}

		mark_blip(ref) {
			if ( ref === void 0 ) ref = this;
			var clay = ref.clay;
			var sand = ref.sand;
			var silt = ref.silt;

			if (clay + sand + silt != 0){
				var ref$1 = this.config;
				var t = ref$1.triangle_side;
				var s = ref$1.spacing;
				var p = ref$1.scaling_factor;

				var x_blip = s + clay * p * Snap.cos(60) + silt * p;
				var y_blip = s + silt * p * Snap.cos(30) + sand * p * Snap.sin(60);
				this.blip = this.paper.circle(x_blip, y_blip, 4).attr({
					fill: frappe.ui.color.get("orange"),
					stroke: frappe.ui.color.get("orange"),
					strokeWidth: 2
				});
			}
		}

		remove_blip() {
			if (typeof this.blip !== 'undefined')
				{ this.blip.remove(); }
		}
	};

	frappe.templates['item_quick_entry'] = '<div class="h6 uppercase" style="margin-top: 30px;">{{ __("Variant Attributes") }}</div> <div class="attributes hide-control"> </div>';

	frappe.provide('frappe.ui.form');

	frappe.ui.form.ItemQuickEntryForm = frappe.ui.form.QuickEntryForm.extend({
		init: function(doctype, after_insert) {
			this._super(doctype, after_insert);
		},

		render_dialog: function() {
			this.mandatory = this.get_variant_fields().concat(this.mandatory);
			this.mandatory = this.mandatory.concat(this.get_attributes_fields());
			this.check_naming_series_based_on();
			this._super();
			this.init_post_render_dialog_operations();
			this.preset_fields_for_template();
			this.dialog.$wrapper.find('.edit-full').text(__('Edit in full page for more options like assets, serial nos, batches etc.'));
		},

		check_naming_series_based_on: function() {
			if (frappe.defaults.get_default("item_naming_by") === "Naming Series") {
				this.mandatory = this.mandatory.filter(function (d) { return d.fieldname !== "item_code"; });
			}
		},

		init_post_render_dialog_operations: function() {
			this.dialog.fields_dict.attribute_html.$wrapper.append(frappe.render_template("item_quick_entry"));
			this.init_for_create_variant_trigger();
			this.init_for_item_template_trigger();
			// explicitly hide manufacturing fields as hidden not working.
			this.toggle_manufacturer_fields();
			this.dialog.get_field("item_template").df.hidden = 1;
			this.dialog.get_field("item_template").refresh();
		},

		register_primary_action: function() {
			var me = this;
			this.dialog.set_primary_action(__('Save'), function() {
				if (me.dialog.working) { return; }

				var data = me.dialog.get_values();
				var variant_values = {};

				if (me.dialog.fields_dict.create_variant.$input.prop("checked")) {
					variant_values = me.get_variant_doc();
					if (!Object.keys(variant_values).length) {
						data = null;
					}
					variant_values.stock_uom = me.template_doc.stock_uom;
					variant_values.item_group = me.template_doc.item_group;
				}

				if (data) {
					me.dialog.working = true;
					var values = me.update_doc();
					//patch for manufacturer type variants as extend is overwriting it.
					if (variant_values['variant_based_on'] == "Manufacturer") {
						values['variant_based_on'] = "Manufacturer";
					}
					$.extend(variant_values, values);
					me.insert(variant_values);
				}
			});
		},

		insert: function(variant_values) {
			var me = this;
			return new Promise(function (resolve) {
				frappe.call({
					method: "frappe.client.insert",
					args: {
						doc: variant_values
					},
					callback: function(r) {
						me.dialog.hide();
						// delete the old doc
						frappe.model.clear_doc(me.dialog.doc.doctype, me.dialog.doc.name);
						me.dialog.doc = r.message;
						if (frappe._from_link) {
							frappe.ui.form.update_calling_link(me.dialog.doc);
						} else {
							if (me.after_insert) {
								me.after_insert(me.dialog.doc);
							} else {
								me.open_form_if_not_list();
							}
						}
					},
					error: function() {
						me.open_doc();
					},
					always: function() {
						me.dialog.working = false;
						resolve(me.dialog.doc);
					},
					freeze: true
				});
			});
		},

		open_doc: function() {
			this.dialog.hide();
			this.update_doc();
			if (this.dialog.fields_dict.create_variant.$input.prop("checked")) {
				var template = this.dialog.fields_dict.item_template.input.value;
				if (template)
					{ frappe.set_route("Form", this.doctype, template); }
			} else {
				frappe.set_route('Form', this.doctype, this.doc.name);
			}
		},

		get_variant_fields: function() {
			var variant_fields = [{
				fieldname: "create_variant",
				fieldtype: "Check",
				label: __("Create Variant")
			},
			{
				fieldname: 'item_template',
				label: __('Item Template'),
				reqd: 0,
				fieldtype: 'Link',
				options: "Item",
				get_query: function() {
					return {
						filters: {
							"has_variants": 1
						}
					};
				}
			}];

			return variant_fields;
		},

		get_manufacturing_fields: function() {
			this.manufacturer_fields = [{
				fieldtype: 'Link',
				options: 'Manufacturer',
				label: 'Manufacturer',
				fieldname: "manufacturer",
				hidden: 1,
				reqd: 0
			}, {
				fieldtype: 'Data',
				label: 'Manufacturer Part Number',
				fieldname: 'manufacturer_part_no',
				hidden: 1,
				reqd: 0
			}];
			return this.manufacturer_fields;
		},

		get_attributes_fields: function() {
			var attribute_fields = [{
				fieldname: 'attribute_html',
				fieldtype: 'HTML'
			}];

			attribute_fields = attribute_fields.concat(this.get_manufacturing_fields());
			return attribute_fields;
		},

		init_for_create_variant_trigger: function() {
			var me = this;

			this.dialog.fields_dict.create_variant.$input.on("click", function() {
				me.preset_fields_for_template();
				me.init_post_template_trigger_operations(false, [], true);
			});
		},

		preset_fields_for_template: function() {
			var this$1 = this;

			var for_variant = this.dialog.get_value('create_variant');

			// setup template field, seen and mandatory if variant
			var template_field = this.dialog.get_field("item_template");
			template_field.df.reqd = for_variant;
			template_field.set_value('');
			template_field.df.hidden = !for_variant;
			template_field.refresh();

			// hide properties for variant
			['item_code', 'item_name', 'item_group', 'stock_uom'].forEach(function (d) {
				var f = this$1.dialog.get_field(d);
				f.df.hidden = for_variant;
				f.refresh();
			});

			this.dialog.get_field('attribute_html').toggle(false);

			// non mandatory for variants
			['item_code', 'stock_uom', 'item_group'].forEach(function (d) {
				var f = this$1.dialog.get_field(d);
				f.df.reqd = !for_variant;
				f.refresh();
			});

		},

		init_for_item_template_trigger: function() {
			var me = this;

			me.dialog.fields_dict["item_template"].df.onchange = function () {
				var template = me.dialog.fields_dict.item_template.input.value;
				me.template_doc = null;
				if (template) {
					frappe.call({
						method: "frappe.client.get",
						args: {
							doctype: "Item",
							name: template
						},
						callback: function(r) {
							me.template_doc = r.message;
							me.is_manufacturer = false;

							if (me.template_doc.variant_based_on === "Manufacturer") {
								me.init_post_template_trigger_operations(true, [], true);
							} else {

								me.init_post_template_trigger_operations(false, me.template_doc.attributes, false);
								me.render_attributes(me.template_doc.attributes);
							}
						}
					});
				} else {
					me.dialog.get_field('attribute_html').toggle(false);
					me.init_post_template_trigger_operations(false, [], true);
				}
			};
		},

		init_post_template_trigger_operations: function(is_manufacturer, attributes, attributes_flag) {
			this.attributes = attributes;
			this.attribute_values = {};
			this.attributes_count = attributes.length;

			this.dialog.fields_dict.attribute_html.$wrapper.find(".attributes").empty();
			this.is_manufacturer = is_manufacturer;
			this.toggle_manufacturer_fields();
			this.dialog.fields_dict.attribute_html.$wrapper.find(".attributes").toggleClass("hide-control", attributes_flag);
			this.dialog.fields_dict.attribute_html.$wrapper.find(".attributes-header").toggleClass("hide-control", attributes_flag);
		},

		toggle_manufacturer_fields: function() {
			var me = this;
			$.each(this.manufacturer_fields, function(i, dialog_field) {
				me.dialog.get_field(dialog_field.fieldname).df.hidden = !me.is_manufacturer;
				me.dialog.get_field(dialog_field.fieldname).df.reqd = dialog_field.fieldname == 'manufacturer' ? me.is_manufacturer : false;
				me.dialog.get_field(dialog_field.fieldname).refresh();
			});
		},

		initiate_render_attributes: function() {
			this.dialog.fields_dict.attribute_html.$wrapper.find(".attributes").empty();
			this.render_attributes(this.attributes);
		},

		render_attributes: function(attributes) {
			var me = this;

			this.dialog.get_field('attribute_html').toggle(true);

			$.each(attributes, function(index, row) {
				var desc = "";
				var fieldtype = "Data";
				if (row.numeric_values) {
					fieldtype = "Float";
					desc = "Min Value: " + row.from_range + " , Max Value: " + row.to_range + ", in Increments of: " + row.increment;
				}

				me.init_make_control(fieldtype, row);
				me[row.attribute].set_value(me.attribute_values[row.attribute] || "");
				me[row.attribute].$wrapper.toggleClass("has-error", me.attribute_values[row.attribute] ? false : true);

				// Set Label explicitly as make_control is not displaying label
				$(me[row.attribute].label_area).text(__(row.attribute));

				if (desc) {
					$(repl("<p class=\"help-box small text-muted hidden-xs\">%(desc)s</p>", {
						"desc": desc
					})).insertAfter(me[row.attribute].input_area);
				}

				if (!row.numeric_values) {
					me.init_awesomplete_for_attribute(row);
				} else {
					me[row.attribute].$input.on("change", function() {
						me.attribute_values[row.attribute] = $(this).val();
						$(this).closest(".frappe-control").toggleClass("has-error", $(this).val() ? false : true);
					});
				}
			});
		},

		init_make_control: function(fieldtype, row) {
			this[row.attribute] = frappe.ui.form.make_control({
				df: {
					"fieldtype": fieldtype,
					"label": row.attribute,
					"fieldname": row.attribute,
					"options": row.options || ""
				},
				parent: $(this.dialog.fields_dict.attribute_html.wrapper).find(".attributes"),
				only_input: false
			});
			this[row.attribute].make_input();
		},

		init_awesomplete_for_attribute: function(row) {
			var me = this;

			this[row.attribute].input.awesomplete = new Awesomplete(this[row.attribute].input, {
				minChars: 0,
				maxItems: 99,
				autoFirst: true,
				list: [],
			});

			this[row.attribute].$input.on('input', function(e) {
				frappe.call({
					method: "frappe.client.get_list",
					args: {
						doctype: "Item Attribute Value",
						filters: [
							["parent", "=", $(e.target).attr("data-fieldname")],
							["attribute_value", "like", e.target.value + "%"]
						],
						fields: ["attribute_value"],
						parent: "Item Attribute"
					},
					callback: function(r) {
						if (r.message) {
							e.target.awesomplete.list = r.message.map(function(d) {
								return d.attribute_value;
							});
						}
					}
				});
			}).on('focus', function(e) {
				$(e.target).val('').trigger('input');
			}).on("awesomplete-close", function (e) {
				me.attribute_values[$(e.target).attr("data-fieldname")] = e.target.value;
				$(e.target).closest(".frappe-control").toggleClass("has-error", e.target.value ? false : true);
			});
		},

		get_variant_doc: function() {
			var me = this;
			var variant_doc = {};
			var attribute = this.validate_mandatory_attributes();

			if (Object.keys(attribute).length) {
				frappe.call({
					method: "erpnext.controllers.item_variant.create_variant_doc_for_quick_entry",
					args: {
						"template": me.dialog.fields_dict.item_template.$input.val(),
						args: attribute
					},
					async: false,
					callback: function(r) {
						if (Object.prototype.toString.call(r.message) == "[object Object]") {
							variant_doc = r.message;
						} else {
							var msgprint_dialog = frappe.msgprint(__("Item Variant {0} already exists with same attributes", [repl('<a class="strong variant-click" data-item-code="%(item)s" \
								>%(item)s</a>', {
									item: r.message
								})]));

							msgprint_dialog.$wrapper.find(".variant-click").on("click", function() {
								msgprint_dialog.hide();
								me.dialog.hide();
								if (frappe._from_link) {
									frappe._from_link.set_value($(this).attr("data-item-code"));
								} else {
									frappe.set_route('Form', "Item", $(this).attr("data-item-code"));
								}
							});
						}
					}
				});
			}
			return variant_doc;
		},

		validate_mandatory_attributes: function() {
			var me = this;
			var attribute = {};
			var mandatory = [];

			$.each(this.attributes, function(index, attr) {
				var value = me.attribute_values[attr.attribute] || "";
				if (value) {
					attribute[attr.attribute] = attr.numeric_values ? flt(value) : value;
				} else {
					mandatory.push(attr.attribute);
				}
			});

			if (this.is_manufacturer) {
				$.each(this.manufacturer_fields, function(index, field) {
					attribute[field.fieldname] = me.dialog.fields_dict[field.fieldname].input.value;
				});
			}
			return attribute;
		}
	});

	frappe.provide('frappe.ui.form');

	frappe.ui.form.CustomerQuickEntryForm = frappe.ui.form.QuickEntryForm.extend({
		init: function(doctype, after_insert) {
			this.skip_redirect_on_error = true;
			this._super(doctype, after_insert);
		},

		render_dialog: function() {
			this.mandatory = this.mandatory.concat(this.get_variant_fields());
			this._super();
		},

		get_variant_fields: function() {
			var variant_fields = [{
				fieldtype: "Section Break",
				label: __("Primary Contact Details"),
				collapsible: 1
			},
			{
				label: __("Email Id"),
				fieldname: "email_id",
				fieldtype: "Data"
			},
			{
				fieldtype: "Column Break"
			},
			{
				label: __("Mobile Number"),
				fieldname: "mobile_no",
				fieldtype: "Data"
			},
			{
				fieldtype: "Section Break",
				label: __("Primary Address Details"),
				collapsible: 1
			},
			{
				label: __("Address Line 1"),
				fieldname: "address_line1",
				fieldtype: "Data"
			},
			{
				label: __("Address Line 2"),
				fieldname: "address_line2",
				fieldtype: "Data"
			},
			{
				label: __("ZIP Code"),
				fieldname: "pincode",
				fieldtype: "Data"
			},
			{
				fieldtype: "Column Break"
			},
			{
				label: __("City"),
				fieldname: "city",
				fieldtype: "Data"
			},
			{
				label: __("State"),
				fieldname: "state",
				fieldtype: "Data"
			},
			{
				label: __("Country"),
				fieldname: "country",
				fieldtype: "Link",
				options: "Country"
			},
			{
				label: __("Customer POS Id"),
				fieldname: "customer_pos_id",
				fieldtype: "Data",
				hidden: 1
			}];

			return variant_fields;
		},
	});

	frappe.templates['student_button'] = '<div class="col-sm-3">     <div class="checkbox">         <label>             <input                  type="checkbox"                 data-group_roll_number="{{group_roll_number}}"                  data-student="{{student}}"                 data-student-name="{{student_name}}"                 class="students-check"                  {% if status === "Present" %}                 checked                 {% endif %}                 >             {{ group_roll_number }} - {{ student_name }}         </label>     </div> </div>';

	frappe.templates['assessment_result_tool'] = '<table class="table table-bordered assessment-result-tool">  <thead>   <tr>    <th style="width: 90px" rowspan="2">Student</th>    <th style="width: 170px" rowspan="2">Student Name</th>    {% for c in criteria %}    <th class="score" style="width: 100px">{{ c.assessment_criteria }}</th>    {% endfor %}    <th class="score" style="width: 170px" rowspan="2">Comments</th>    <th class="score" style="width: 100px">Total Marks</th>       </tr>   <tr>    {% for c in criteria %}    <th class="score" style="width: 100px">Score ({{ c.maximum_score }})</th>    {% endfor %}    <th class="score" style="width: 100px">Score ({{max_total_score}})</th>   </tr>  </thead>  <tbody>   {% for s in students %}   <tr     {% if(s.assessment_details && s.docstatus && s.docstatus == 1) { %} class="text-muted" {% } %}    data-student="{{s.student}}">     <td>{{ s.student }}</td>    <td>{{ s.student_name }}</td>    {% for c in criteria %}    <td>     <span data-student="{{s.student}}" data-criteria="{{c.assessment_criteria}}" class="student-result-grade badge" >      {% if(s.assessment_details) { %}       {{s.assessment_details[c.assessment_criteria][1]}}       {% } %}     </span>     <input type="number" class="student-result-data" style="width:70%; float:right;"      data-max-score="{{c.maximum_score}}"      data-criteria="{{c.assessment_criteria}}"      data-student="{{s.student}}"      {% if(s.assessment_details && s.docstatus && s.docstatus == 1) { %} disabled {% } %}      {% if(s.assessment_details) { %}       value="{{s.assessment_details[c.assessment_criteria][0]}}"      {% } %}/>    </td>    {% endfor %}    <td>     <input type="text" class="result-comment" data-student="{{s.student}}"     {% if(s.assessment_details && s.docstatus && s.docstatus == 1) { %} disabled {% } %}     {% if(s.assessment_details) { %}      value="{{s.assessment_details.comment}}"     {% } %}    </td>    <td>     <span data-student="{{s.student}}" class="total-score-grade badge" style="width:30%; float:left;">     {% if(s.assessment_details) { %}     {{s.assessment_details.total_score[1]}}     {% } %}     </span>     <span data-student="{{s.student}}" class="total-score" style="width:60%; float:center;">     {% if(s.assessment_details) { %}     {{s.assessment_details.total_score[0]}}     {% } %}     </span>     <span data-student="{{s.student}}" class="total-result-link" style="width: 10%; display:{% if(!s.assessment_details) { %}None{% } %}; float:right;">      <a class="btn-open no-decoration" title="Open Link" href="#Form/Assessment Result/{% if(s.assessment_details) { %}{{s.name}}{% } %}">       <i class="octicon octicon-arrow-right"></i>      </a>     </span>    </td>   </tr>   {% endfor %}  </tbody> </table>';

	frappe.provide('erpnext.hub');

	frappe.views.MarketplaceFactory = class MarketplaceFactory extends frappe.views.Factory {
		show() {
			var this$1 = this;

			is_marketplace_disabled()
				.then(function (disabled) {
					if (disabled) {
						frappe.show_not_found('Marketplace');
						return;
					}

					if (frappe.pages.marketplace) {
						frappe.container.change_to('marketplace');
						erpnext.hub.marketplace.refresh();
					} else {
						this$1.make('marketplace');
					}
				});
		}

		make(page_name) {
			var this$1 = this;

			var assets = [
				'/assets/js/marketplace.min.js'
			];

			frappe.require(assets, function () {
				erpnext.hub.marketplace = new erpnext.hub.Marketplace({
					parent: this$1.make_page(true, page_name)
				});
			});
		}
	};

	function is_marketplace_disabled() {
		return frappe.call({
			method: "erpnext.hub_node.doctype.marketplace_settings.marketplace_settings.is_marketplace_enabled"
		}).then(function (r) { return r.message; })
	}

	class CallPopup {
		constructor(call_log) {
			this.caller_number = call_log.from;
			this.call_log = call_log;
			this.setup_listener();
			this.make();
		}

		make() {
			var this$1 = this;

			this.dialog = new frappe.ui.Dialog({
				'static': true,
				'minimizable': true,
				'fields': [{
					'fieldname': 'name',
					'label': 'Name',
					'default': this.get_caller_name() || __('Unknown Caller'),
					'fieldtype': 'Data',
					'read_only': 1
				}, {
					'fieldtype': 'Button',
					'label': __('Open Contact'),
					'click': function () { return frappe.set_route('Form', 'Contact', this$1.call_log.contact); },
					'depends_on': function () { return this$1.call_log.contact; }
				}, {
					'fieldtype': 'Button',
					'label': __('Open Lead'),
					'click': function () { return frappe.set_route('Form', 'Lead', this$1.call_log.lead); },
					'depends_on': function () { return this$1.call_log.lead; }
				}, {
					'fieldtype': 'Button',
					'label': __('Create New Contact'),
					'click': function () { return frappe.new_doc('Contact', { 'mobile_no': this$1.caller_number }); },
					'depends_on': function () { return !this$1.get_caller_name(); }
				}, {
					'fieldtype': 'Button',
					'label': __('Create New Lead'),
					'click': function () { return frappe.new_doc('Lead', { 'mobile_no': this$1.caller_number }); },
					'depends_on': function () { return !this$1.get_caller_name(); }
				}, {
					'fieldtype': 'Column Break',
				}, {
					'fieldname': 'number',
					'label': 'Phone Number',
					'fieldtype': 'Data',
					'default': this.caller_number,
					'read_only': 1
				}, {
					'fielname': 'last_interaction',
					'fieldtype': 'Section Break',
					'label': __('Activity'),
					'depends_on': function () { return this$1.get_caller_name(); }
				}, {
					'fieldtype': 'Small Text',
					'label': __('Last Issue'),
					'fieldname': 'last_issue',
					'read_only': true,
					'depends_on': function () { return this$1.call_log.contact; },
					'default': ("<i class=\"text-muted\">" + (__('No issue has been raised by the caller.')) + "<i>")
				}, {
					'fieldtype': 'Small Text',
					'label': __('Last Communication'),
					'fieldname': 'last_communication',
					'read_only': true,
					'default': ("<i class=\"text-muted\">" + (__('No communication found.')) + "<i>")
				}, {
					'fieldtype': 'Section Break',
				}, {
					'fieldtype': 'Small Text',
					'label': __('Call Summary'),
					'fieldname': 'call_summary',
				}, {
					'fieldtype': 'Button',
					'label': __('Save'),
					'click': function () {
						var call_summary = this$1.dialog.get_value('call_summary');
						if (!call_summary) { return; }
						frappe.xcall('erpnext.communication.doctype.call_log.call_log.add_call_summary', {
							'call_log': this$1.call_log.name,
							'summary': call_summary,
						}).then(function () {
							this$1.close_modal();
							frappe.show_alert({
								message: ("\n\t\t\t\t\t\t\t\t" + (__('Call Summary Saved')) + "\n\t\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\tclass=\"text-small text-muted\"\n\t\t\t\t\t\t\t\t\thref=\"#Form/Call Log/" + (this$1.call_log.name) + "\">\n\t\t\t\t\t\t\t\t\t" + (__('View call log')) + "\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t"),
								indicator: 'green'
							});
						});
					}
				}],
			});
			this.set_call_status();
			this.dialog.get_close_btn().show();
			this.make_last_interaction_section();
			this.dialog.$body.addClass('call-popup');
			this.dialog.set_secondary_action(this.close_modal.bind(this));
			frappe.utils.play_sound('incoming-call');
			this.dialog.show();
		}

		set_indicator(color, blink) {
			if ( blink === void 0 ) blink=false;

			var classes = "indicator " + color + " " + (blink ? 'blink': '');
			this.dialog.header.find('.indicator').attr('class', classes);
		}

		set_call_status(call_status) {
			var title = '';
			call_status = call_status || this.call_log.status;
			if (['Ringing'].includes(call_status) || !call_status) {
				title = __('Incoming call from {0}', [this.get_caller_name() || this.caller_number]);
				this.set_indicator('blue', true);
			} else if (call_status === 'In Progress') {
				title = __('Call Connected');
				this.set_indicator('yellow');
			} else if (call_status === 'Missed') {
				this.set_indicator('red');
				title = __('Call Missed');
			} else if (['Completed', 'Disconnected'].includes(call_status)) {
				this.set_indicator('red');
				title = __('Call Disconnected');
			} else {
				this.set_indicator('blue');
				title = call_status;
			}
			this.dialog.set_title(title);
		}

		update_call_log(call_log) {
			this.call_log = call_log;
			this.set_call_status();
		}

		close_modal() {
			this.dialog.hide();
			delete erpnext.call_popup;
		}

		call_disconnected(call_log) {
			var this$1 = this;

			frappe.utils.play_sound('call-disconnect');
			this.update_call_log(call_log);
			setTimeout(function () {
				if (!this$1.dialog.get_value('call_summary')) {
					this$1.close_modal();
				}
			}, 30000);
		}

		make_last_interaction_section() {
			var this$1 = this;

			frappe.xcall('erpnext.crm.doctype.utils.get_last_interaction', {
				'contact': this.call_log.contact,
				'lead': this.call_log.lead
			}).then(function (data) {
				var comm_field = this$1.dialog.get_field('last_communication');
				if (data.last_communication) {
					var comm = data.last_communication;
					comm_field.set_value(comm.content);
				}

				if (data.last_issue) {
					var issue = data.last_issue;
					var issue_field = this$1.dialog.get_field("last_issue");
					issue_field.set_value(issue.subject);
					issue_field.$wrapper.append(("\n\t\t\t\t\t<a class=\"text-medium\" href=\"#List/Issue?customer=" + (issue.customer) + "\">\n\t\t\t\t\t\t" + (__('View all issues from {0}', [issue.customer])) + "\n\t\t\t\t\t</a>\n\t\t\t\t"));
				}
			});
		}

		get_caller_name() {
			var log = this.call_log;
			return log.contact_name || log.lead_name;
		}

		setup_listener() {
			var this$1 = this;

			frappe.realtime.on(("call_" + (this.call_log.id) + "_disconnected"), function (call_log) {
				this$1.call_disconnected(call_log);
				// Remove call disconnect listener after the call is disconnected
				frappe.realtime.off(("call_" + (this$1.call_log.id) + "_disconnected"));
			});
		}
	}

	$(document).on('app_ready', function () {
		frappe.realtime.on('show_call_popup', function (call_log) {
			if (!erpnext.call_popup) {
				erpnext.call_popup = new CallPopup(call_log);
			} else {
				erpnext.call_popup.update_call_log(call_log);
				erpnext.call_popup.dialog.show();
			}
		});
	});

	frappe.provide('frappe.ui.form');

	var default_dimensions = {};

	var doctypes_with_dimensions = ["GL Entry", "Sales Invoice", "Purchase Invoice", "Payment Entry", "Asset",
		"Expense Claim", "Stock Entry", "Budget", "Payroll Entry", "Delivery Note", "Shipping Rule", "Loyalty Program",
		"Fee Schedule", "Fee Structure", "Stock Reconciliation", "Travel Request", "Fees", "POS Profile", "Opening Invoice Creation Tool",
		"Subscription", "Purchase Order", "Journal Entry", "Material Request", "Purchase Receipt", "Landed Cost Item", "Asset"];

	var child_docs = ["Sales Invoice Item", "Purchase Invoice Item", "Purchase Order Item", "Journal Entry Account",
		"Material Request Item", "Delivery Note Item", "Purchase Receipt Item", "Stock Entry Detail", "Payment Entry Deduction",
		"Landed Cost Item", "Asset Value Adjustment", "Opening Invoice Creation Tool Item", "Subscription Plan"];

	frappe.call({
		method: "erpnext.accounts.doctype.accounting_dimension.accounting_dimension.get_dimension_filters",
		callback: function(r) {
			erpnext.dimension_filters = r.message[0];
			default_dimensions = r.message[1];
		}
	});

	doctypes_with_dimensions.forEach(function (doctype) {
		frappe.ui.form.on(doctype, {
			onload: function(frm) {
				erpnext.dimension_filters.forEach(function (dimension) {
					frappe.model.with_doctype(dimension['document_type'], function () {
						if(frappe.meta.has_field(dimension['document_type'], 'is_group')) {
							frm.set_query(dimension['fieldname'], {
								"is_group": 0
							});
						}
					});
				});
			},

			company: function(frm) {
				if(frm.doc.company && (Object.keys(default_dimensions || {}).length > 0)
					&& default_dimensions[frm.doc.company]) {
					frm.trigger('update_dimension');
				}
			},

			update_dimension: function(frm) {
				erpnext.dimension_filters.forEach(function (dimension) {
					if(frm.is_new()) {
						if(frm.doc.company && Object.keys(default_dimensions || {}).length > 0
							&& default_dimensions[frm.doc.company]) {

							var default_dimension = default_dimensions[frm.doc.company][dimension['fieldname']];

							if(default_dimension) {
								if (frappe.meta.has_field(doctype, dimension['fieldname'])) {
									frm.set_value(dimension['fieldname'], default_dimension);
								}

								$.each(frm.doc.items || frm.doc.accounts || [], function(i, row) {
									frappe.model.set_value(row.doctype, row.name, dimension['fieldname'], default_dimension);
								});
							}
						}
					}
				});
			}
		});
	});

	child_docs.forEach(function (doctype) {
		frappe.ui.form.on(doctype, {
			items_add: function(frm, cdt, cdn) {
				erpnext.dimension_filters.forEach(function (dimension) {
					var row = frappe.get_doc(cdt, cdn);
					frm.script_manager.copy_from_first_row("items", row, [dimension['fieldname']]);
				});
			},

			accounts_add: function(frm, cdt, cdn) {
				erpnext.dimension_filters.forEach(function (dimension) {
					var row = frappe.get_doc(cdt, cdn);
					frm.script_manager.copy_from_first_row("accounts", row, [dimension['fieldname']]);
				});
			}
		});
	});

}());
//# sourceMappingURL=erpnext.min.js.map

(function () {
	'use strict';

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	var script = {
		props: ['label', 'name', 'dependencies', 'incomplete_dependencies',
			'onboard', 'count', 'route', 'doctype', 'open_count', 'youtube_id'],
		data: function data() {
			return {
				hover: false,
				popover_hover: false,
			}
		},
		computed: {
			disabled_dependent: function disabled_dependent() {
				return this.dependencies && this.incomplete_dependencies;
			},

			indicator_color: function indicator_color() {
				if(this.open_count) {
					return 'red';
				}
				if(this.onboard) {
					return this.count ? 'blue' : 'orange';
				}			return 'grey';
			},

			popover_active: function popover_active() {
				return this.popover_hover || this.hover;
			}
		},
		methods: {
			mouseover: function mouseover() {
				$('.module-link-popover').hide();
				this.hover = true;
			},

			mouseleave: function mouseleave() {
				var this$1 = this;

				setTimeout(function () {
					this$1.hover = false;
				}, 300);
			},

			handle_click: function handle_click(e) {
				if (this.youtube_id) {
					frappe.help.show_video(this.youtube_id);
				} else {
					frappe.set_route(this.route);
				}
			}
		}
	};

	/* script */
	            var __vue_script__ = script;
	            
	/* template */
	var __vue_render__ = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c(
	    "div",
	    {
	      staticClass: "link-item flush-top small",
	      class: {
	        "onboard-spotlight": _vm.onboard,
	        "disabled-link": _vm.disabled_dependent
	      },
	      on: { mouseover: _vm.mouseover, mouseleave: _vm.mouseleave }
	    },
	    [
	      _c("span", { class: ["indicator", _vm.indicator_color] }),
	      _vm._v(" "),
	      _vm.disabled_dependent
	        ? _c("span", {
	            staticClass: "link-content text-muted",
	            domProps: { innerHTML: _vm._s(_vm.label || _vm.__(_vm.name)) }
	          })
	        : _c("a", {
	            staticClass: "link-content",
	            attrs: { href: _vm.route },
	            domProps: { innerHTML: _vm._s(_vm.label || _vm.__(_vm.name)) },
	            on: {
	              click: function($event) {
	                $event.preventDefault();
	                return _vm.handle_click($event)
	              }
	            }
	          }),
	      _vm._v(" "),
	      _vm.disabled_dependent
	        ? _c(
	            "div",
	            {
	              directives: [
	                {
	                  name: "show",
	                  rawName: "v-show",
	                  value: _vm.popover_active,
	                  expression: "popover_active"
	                }
	              ],
	              staticClass: "module-link-popover popover fade top in",
	              attrs: { role: "tooltip" },
	              on: {
	                mouseover: function($event) {
	                  _vm.popover_hover = true;
	                },
	                mouseleave: function($event) {
	                  _vm.popover_hover = false;
	                }
	              }
	            },
	            [
	              _c("div", { staticClass: "arrow" }),
	              _vm._v(" "),
	              _c("h3", {
	                staticClass: "popover-title",
	                staticStyle: { display: "none" }
	              }),
	              _vm._v(" "),
	              _c(
	                "div",
	                {
	                  staticClass: "popover-content",
	                  staticStyle: { padding: "12px" }
	                },
	                [
	                  _c("div", { staticClass: "small text-muted" }, [
	                    _vm._v(_vm._s(_vm.__("You need to create these first: ")))
	                  ]),
	                  _vm._v(" "),
	                  _c("div", { staticClass: "small" }, [
	                    _vm._v(
	                      _vm._s(_vm.__(_vm.incomplete_dependencies.join(", ")))
	                    )
	                  ])
	                ]
	              )
	            ]
	          )
	        : _vm._e()
	    ]
	  )
	};
	var __vue_staticRenderFns__ = [];
	__vue_render__._withStripped = true;

	  /* style */
	  var __vue_inject_styles__ = function (inject) {
	    if (!inject) { return }
	    inject("data-v-f494b6f0_0", { source: ".link-item[data-v-f494b6f0] {\n  position: relative;\n  margin: 10px 0px;\n  cursor: default;\n}\n.onboard-spotlight .link-content[data-v-f494b6f0] {\n  font-weight: 600;\n}\na[data-v-f494b6f0]:hover,\na[data-v-f494b6f0]:focus {\n  text-decoration: underline;\n}\n.indicator[data-v-f494b6f0] {\n  margin-right: 5px;\n  color: inherit;\n  font-weight: inherit;\n}\n.link-content[data-v-f494b6f0] {\n  flex: 1;\n}\n.popover[data-v-f494b6f0] {\n  display: block;\n  top: -60px;\n  max-width: 220px;\n}\n.popover.top > .arrow[data-v-f494b6f0] {\n  left: 20%;\n}\n", map: {"version":3,"sources":["ModuleLinkItem.vue"],"names":[],"mappings":"AAAA;EACE,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;AACA;;EAEE,0BAA0B;AAC5B;AACA;EACE,iBAAiB;EACjB,cAAc;EACd,oBAAoB;AACtB;AACA;EACE,OAAO;AACT;AACA;EACE,cAAc;EACd,UAAU;EACV,gBAAgB;AAClB;AACA;EACE,SAAS;AACX","file":"ModuleLinkItem.vue","sourcesContent":[".link-item {\n  position: relative;\n  margin: 10px 0px;\n  cursor: default;\n}\n.onboard-spotlight .link-content {\n  font-weight: 600;\n}\na:hover,\na:focus {\n  text-decoration: underline;\n}\n.indicator {\n  margin-right: 5px;\n  color: inherit;\n  font-weight: inherit;\n}\n.link-content {\n  flex: 1;\n}\n.popover {\n  display: block;\n  top: -60px;\n  max-width: 220px;\n}\n.popover.top > .arrow {\n  left: 20%;\n}\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__ = "data-v-f494b6f0";
	  /* module identifier */
	  var __vue_module_identifier__ = undefined;
	  /* functional template */
	  var __vue_is_functional_template__ = false;
	  /* component normalizer */
	  function __vue_normalize__(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/home/bharath/frappe-bench/apps/frappe/frappe/public/js/frappe/views/components/ModuleLinkItem.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var ModuleLinkItem = __vue_normalize__(
	    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
	    __vue_inject_styles__,
	    __vue_script__,
	    __vue_scope_id__,
	    __vue_is_functional_template__,
	    __vue_module_identifier__,
	    __vue_create_injector__,
	    undefined
	  );

	//

	var script$1 = {
		components: {
			ModuleLinkItem: ModuleLinkItem
		},
		props: ['module_name', 'sections'],
	};

	/* script */
	            var __vue_script__$1 = script$1;
	            
	/* template */
	var __vue_render__$1 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c("div", [
	    _vm.sections.length
	      ? _c(
	          "div",
	          { staticClass: "sections-container" },
	          _vm._l(_vm.sections, function(section) {
	            return _c(
	              "div",
	              { key: section.label, staticClass: "border section-box" },
	              [
	                _c("h4", { staticClass: "h4" }, [
	                  _vm._v(" " + _vm._s(section.label) + " ")
	                ]),
	                _vm._v(" "),
	                _vm._l(section.items, function(item) {
	                  return _c(
	                    "module-link-item",
	                    _vm._b(
	                      {
	                        key: section.label + item.label,
	                        attrs: {
	                          "data-youtube-id":
	                            item.type === "help" ? item.youtube_id : false
	                        }
	                      },
	                      "module-link-item",
	                      item,
	                      false
	                    )
	                  )
	                })
	              ],
	              2
	            )
	          }),
	          0
	        )
	      : _c(
	          "div",
	          { staticClass: "sections-container" },
	          _vm._l(3, function(n) {
	            return _c("div", { key: n, staticClass: "skeleton-section-box" })
	          }),
	          0
	        )
	  ])
	};
	var __vue_staticRenderFns__$1 = [];
	__vue_render__$1._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$1 = function (inject) {
	    if (!inject) { return }
	    inject("data-v-4cbcb448_0", { source: ".sections-container[data-v-4cbcb448] {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  column-gap: 15px;\n  row-gap: 15px;\n}\n.section-box[data-v-4cbcb448] {\n  padding: 5px 20px;\n  border-radius: 4px;\n}\n.skeleton-section-box[data-v-4cbcb448] {\n  background-color: #f5f7fa;\n  height: 250px;\n  border-radius: 4px;\n}\n.h4[data-v-4cbcb448] {\n  margin-bottom: 15px;\n}\n", map: {"version":3,"sources":["ModuleDetail.vue"],"names":[],"mappings":"AAAA;EACE,aAAa;EACb,4DAA4D;EAC5D,gBAAgB;EAChB,aAAa;AACf;AACA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,yBAAyB;EACzB,aAAa;EACb,kBAAkB;AACpB;AACA;EACE,mBAAmB;AACrB","file":"ModuleDetail.vue","sourcesContent":[".sections-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  column-gap: 15px;\n  row-gap: 15px;\n}\n.section-box {\n  padding: 5px 20px;\n  border-radius: 4px;\n}\n.skeleton-section-box {\n  background-color: #f5f7fa;\n  height: 250px;\n  border-radius: 4px;\n}\n.h4 {\n  margin-bottom: 15px;\n}\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$1 = "data-v-4cbcb448";
	  /* module identifier */
	  var __vue_module_identifier__$1 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$1 = false;
	  /* component normalizer */
	  function __vue_normalize__$1(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/home/bharath/frappe-bench/apps/frappe/frappe/public/js/frappe/views/components/ModuleDetail.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$1() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$1.styles || (__vue_create_injector__$1.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var ModuleDetail = __vue_normalize__$1(
	    { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
	    __vue_inject_styles__$1,
	    __vue_script__$1,
	    __vue_scope_id__$1,
	    __vue_is_functional_template__$1,
	    __vue_module_identifier__$1,
	    __vue_create_injector__$1,
	    undefined
	  );

	function generate_route(item) {
		if(item.type==="doctype") {
			item.doctype = item.name;
		}
		var route = '';
		if(!item.route) {
			if(item.link) {
				route=strip(item.link, "#");
			} else if(item.type==="doctype") {
				if(frappe.model.is_single(item.doctype)) {
					route = 'Form/' + item.doctype;
				} else {
					if (item.filters) {
						frappe.route_options=item.filters;
					}
					route="List/" + item.doctype;
				}
			} else if(item.type==="report" && item.is_query_report) {
				route="query-report/" + item.name;
			} else if(item.type==="report") {
				route="List/" + item.doctype + "/Report/" + item.name;
			} else if(item.type==="page") {
				route=item.name;
			}

			route = '#' + route;
		} else {
			route = item.route;
		}

		if(item.route_options) {
			route += "?" + $.map(item.route_options, function(value, key) {
				return encodeURIComponent(key) + "=" + encodeURIComponent(value); }).join('&');
		}

		// if(item.type==="page" || item.type==="help" || item.type==="report" ||
		// (item.doctype && frappe.model.can_read(item.doctype))) {
		//     item.shown = true;
		// }
		return route;
	}

	//

	var script$2 = {
	  components: {
	    ModuleDetail: ModuleDetail,
	  },
	  data: function data() {
	    return {
	      route: frappe.get_route(),
	      current_module_label: '',
	      current_module_sections: [],
	      modules_data_cache: {},
	      modules_list: frappe.boot.allowed_modules.filter(
	        function (d) { return (d.type === 'module' || d.category === 'Places') && !d.blocked; }
	      ),
	    }
	  },
	  created: function created() {
	    this.update_current_module();
	  },
	  mounted: function mounted() {
	    var this$1 = this;

	    frappe.module_links = {};
	    frappe.route.on('change', function () {
	      this$1.update_current_module();
	    });
	  },
	  methods: {
	    update_current_module: function update_current_module() {
	      var route = frappe.get_route();
	      if (route[0] === 'modules') {
	        this.route = route;
	        var module = this.modules_list.filter(function (m) { return m.module_name == route[1]; })[0];
	        var module_name = module && (module.label || module.module_name);
	        var title = this.current_module_label
	          ? this.current_module_label
	          : module_name;

	        frappe.modules.home && frappe.modules.home.page.set_title(title);

	        if (!frappe.modules.home) {
	          setTimeout(function () {
	            frappe.modules.home.page.set_title(title);
	          }, 200);
	        }

	        if (module_name) {
	          this.get_module_sections(module.module_name);
	        }
	      }
	    },

	    get_module_sections: function get_module_sections(module_name) {
	      var this$1 = this;

	      var cache = this.modules_data_cache[module_name];
	      if (cache) {
	        this.current_module_sections = cache;
	      } else {
	        this.current_module_sections = [];
	        return frappe.call({
	          method: 'frappe.desk.moduleview.get',
	          args: {
	            module: module_name,
	          },
	          callback: function (r) {
	            var m = frappe.get_module(module_name);
	            this$1.current_module_sections = r.message.data;
	            this$1.process_data(module_name, this$1.current_module_sections);
	            this$1.modules_data_cache[module_name] = this$1.current_module_sections;
	          },
	          freeze: true,
	        })
	      }
	    },
	    process_data: function process_data(module_name, data) {
	      frappe.module_links[module_name] = [];
	      data.forEach(function(section) {
	        section.items.forEach(function(item) {
	          item.route = generate_route(item);
	        });
	      });
	    },
	  },
	};

	/* script */
	            var __vue_script__$2 = script$2;
	            
	/* template */
	var __vue_render__$2 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c(
	    "div",
	    { staticClass: "modules-page-container" },
	    [
	      this.route &&
	      _vm.modules_list
	        .map(function(m) {
	          return m.module_name
	        })
	        .includes(_vm.route[1])
	        ? _c("module-detail", {
	            attrs: {
	              module_name: _vm.route[1],
	              sections: _vm.current_module_sections
	            }
	          })
	        : _vm._e()
	    ],
	    1
	  )
	};
	var __vue_staticRenderFns__$2 = [];
	__vue_render__$2._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$2 = function (inject) {
	    if (!inject) { return }
	    inject("data-v-46b0ca98_0", { source: ".modules-page-container[data-v-46b0ca98] {\n  margin: 15px 0px;\n}\n", map: {"version":3,"sources":["Modules.vue"],"names":[],"mappings":"AAAA;EACE,gBAAgB;AAClB","file":"Modules.vue","sourcesContent":[".modules-page-container {\n  margin: 15px 0px;\n}\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$2 = "data-v-46b0ca98";
	  /* module identifier */
	  var __vue_module_identifier__$2 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$2 = false;
	  /* component normalizer */
	  function __vue_normalize__$2(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/home/bharath/frappe-bench/apps/frappe/frappe/public/js/frappe/views/components/Modules.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$2() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$2.styles || (__vue_create_injector__$2.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var Modules = __vue_normalize__$2(
	    { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
	    __vue_inject_styles__$2,
	    __vue_script__$2,
	    __vue_scope_id__$2,
	    __vue_is_functional_template__$2,
	    __vue_module_identifier__$2,
	    __vue_create_injector__$2,
	    undefined
	  );

	frappe.provide('frappe.modules');

	frappe.modules.Home = class {
		constructor(ref) {
		var parent = ref.parent;

			this.$parent = $(parent);
			this.page = parent.page;
			this.setup_header();
			this.make_body();
		}
		make_body() {
			this.$modules_container = this.$parent.find('.layout-main');

			new Vue({
				el: this.$modules_container[0],
				render: function (h) { return h(Modules); }
			});
		}
		setup_header() {
			// subtitle
		}
	};

}());
//# sourceMappingURL=modules.min.js.map
